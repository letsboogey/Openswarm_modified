
build/blank.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_6>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__vector_11>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__vector_14>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__vector_23>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	ca 01       	movw	r24, r20
      6a:	46 02       	muls	r20, r22
      6c:	9e 01       	movw	r18, r28
      6e:	94 01       	movw	r18, r8
      70:	9b 01       	movw	r18, r22
      72:	28 02       	muls	r18, r24
      74:	1d 02       	muls	r17, r29
      76:	92 08       	sbc	r9, r2
      78:	76 07       	cpc	r23, r22
      7a:	76 07       	cpc	r23, r22
      7c:	8f 08       	sbc	r8, r15
      7e:	9b 08       	sbc	r9, r11
      80:	8b 08       	sbc	r8, r11
      82:	a2 08       	sbc	r10, r2
      84:	9e 08       	sbc	r9, r14
      86:	a6 08       	sbc	r10, r6
      88:	5f 08       	sbc	r5, r15
      8a:	31 08       	sbc	r3, r1

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
    wdt_disable();
      9a:	88 e1       	ldi	r24, 0x18	; 24
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	80 93 60 00 	sts	0x0060, r24
      a4:	10 92 60 00 	sts	0x0060, r1
      a8:	0f be       	out	0x3f, r0	; 63

000000aa <__do_copy_data>:
      aa:	11 e0       	ldi	r17, 0x01	; 1
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	e2 e4       	ldi	r30, 0x42	; 66
      b2:	f7 e1       	ldi	r31, 0x17	; 23
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a8 30       	cpi	r26, 0x08	; 8
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a8 e0       	ldi	r26, 0x08	; 8
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a0 37       	cpi	r26, 0x70	; 112
      cc:	b1 07       	cpc	r27, r17
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <main>
      d4:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setup>:
#include "kilolib.h"

void setup() {
      dc:	08 95       	ret

000000de <loop>:
    // put your setup code here, will be run once at the beginning
}

void loop() {
    // put your main code here, will be run repeatedly
    set_color(RGB(1,0,0));
      de:	81 e0       	ldi	r24, 0x01	; 1
      e0:	0e 94 f0 06 	call	0xde0	; 0xde0 <set_color>
    delay(100);
      e4:	84 e6       	ldi	r24, 0x64	; 100
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <delay>
    set_color(RGB(0,1,0));
      ec:	84 e0       	ldi	r24, 0x04	; 4
      ee:	0e 94 f0 06 	call	0xde0	; 0xde0 <set_color>
    delay(100);
      f2:	84 e6       	ldi	r24, 0x64	; 100
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <delay>

000000fa <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
      fa:	08 95       	ret

000000fc <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	08 95       	ret

00000102 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     102:	08 95       	ret

00000104 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     104:	df 92       	push	r13
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
    cli();
     112:	f8 94       	cli

    ports_off();
     114:	14 b8       	out	0x04, r1	; 4
     116:	17 b8       	out	0x07, r1	; 7
     118:	1a b8       	out	0x0a, r1	; 10
     11a:	15 b8       	out	0x05, r1	; 5
     11c:	18 b8       	out	0x08, r1	; 8
     11e:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     120:	52 9a       	sbi	0x0a, 2	; 10
     122:	5a 9a       	sbi	0x0b, 2	; 11
    OS_timers_setup();
     124:	14 bc       	out	0x24, r1	; 36
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	85 bd       	out	0x25, r24	; 37
     12a:	84 e6       	ldi	r24, 0x64	; 100
     12c:	87 bd       	out	0x27, r24	; 39
     12e:	22 e0       	ldi	r18, 0x02	; 2
     130:	20 93 6e 00 	sts	0x006E, r18
    rx_timer_setup();
     134:	10 92 80 00 	sts	0x0080, r1
     138:	10 92 81 00 	sts	0x0081, r1
     13c:	8f e8       	ldi	r24, 0x8F	; 143
     13e:	9b e0       	ldi	r25, 0x0B	; 11
     140:	90 93 89 00 	sts	0x0089, r25
     144:	80 93 88 00 	sts	0x0088, r24
     148:	20 93 6f 00 	sts	0x006F, r18
    motors_setup();
     14c:	53 98       	cbi	0x0a, 3	; 10
     14e:	23 98       	cbi	0x04, 3	; 4
     150:	81 ea       	ldi	r24, 0xA1	; 161
     152:	80 93 b0 00 	sts	0x00B0, r24
     156:	20 93 b1 00 	sts	0x00B1, r18
     15a:	10 92 b4 00 	sts	0x00B4, r1
     15e:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     162:	8b e0       	ldi	r24, 0x0B	; 11
     164:	80 bf       	out	0x30, r24	; 48
     166:	83 e0       	ldi	r24, 0x03	; 3
     168:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     16c:	86 e0       	ldi	r24, 0x06	; 6
     16e:	80 93 7c 00 	sts	0x007C, r24
     172:	83 e8       	ldi	r24, 0x83	; 131
     174:	80 93 7a 00 	sts	0x007A, r24
     178:	80 91 7a 00 	lds	r24, 0x007A
     17c:	80 64       	ori	r24, 0x40	; 64
     17e:	80 93 7a 00 	sts	0x007A, r24
     182:	80 91 7a 00 	lds	r24, 0x007A
     186:	86 fd       	sbrc	r24, 6
     188:	fc cf       	rjmp	.-8      	; 0x182 <kilo_init+0x7e>
    adc_trigger_high_gain();
     18a:	10 92 7c 00 	sts	0x007C, r1
     18e:	83 ea       	ldi	r24, 0xA3	; 163
     190:	80 93 7a 00 	sts	0x007A, r24
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 89 0b 	call	0x1712	; 0x1712 <__eerd_byte_m328p>
    if (osccal != 0xFF)
     1a2:	8f 3f       	cpi	r24, 0xFF	; 255
     1a4:	11 f0       	breq	.+4      	; 0x1aa <kilo_init+0xa6>
        OSCCAL = osccal;
     1a6:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     1aa:	10 92 39 01 	sts	0x0139, r1
    rx_leadingbit = 1;
     1ae:	c1 e0       	ldi	r28, 0x01	; 1
     1b0:	c0 93 12 01 	sts	0x0112, r28
    rx_leadingbyte = 1;
     1b4:	c0 93 56 01 	sts	0x0156, r28
    rx_byteindex = 0;
     1b8:	10 92 30 01 	sts	0x0130, r1
    rx_bytevalue = 0;
     1bc:	10 92 6a 01 	sts	0x016A, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     1c0:	80 e9       	ldi	r24, 0x90	; 144
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 89 0b 	call	0x1712	; 0x1712 <__eerd_byte_m328p>
     1c8:	80 93 2f 01 	sts	0x012F, r24
    if (tx_mask & ~TX_MASK_MAX)
     1cc:	80 91 2f 01 	lds	r24, 0x012F
     1d0:	88 73       	andi	r24, 0x38	; 56
     1d2:	11 f0       	breq	.+4      	; 0x1d8 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     1d4:	c0 93 2f 01 	sts	0x012F, r28
    tx_clock = 0;
     1d8:	10 92 5a 01 	sts	0x015A, r1
     1dc:	10 92 59 01 	sts	0x0159, r1
    tx_increment = 255;
     1e0:	8f ef       	ldi	r24, 0xFF	; 255
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	90 93 58 01 	sts	0x0158, r25
     1e8:	80 93 57 01 	sts	0x0157, r24
    kilo_ticks = 0;
     1ec:	10 92 35 01 	sts	0x0135, r1
     1f0:	10 92 36 01 	sts	0x0136, r1
     1f4:	10 92 37 01 	sts	0x0137, r1
     1f8:	10 92 38 01 	sts	0x0138, r1
    kilo_state = IDLE;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	80 93 11 01 	sts	0x0111, r24
    kilo_tx_period = 3906;
     202:	82 e4       	ldi	r24, 0x42	; 66
     204:	9f e0       	ldi	r25, 0x0F	; 15
     206:	90 93 69 01 	sts	0x0169, r25
     20a:	80 93 68 01 	sts	0x0168, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     20e:	80 eb       	ldi	r24, 0xB0	; 176
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 89 0b 	call	0x1712	; 0x1712 <__eerd_byte_m328p>
     216:	c8 2f       	mov	r28, r24
     218:	81 eb       	ldi	r24, 0xB1	; 177
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 89 0b 	call	0x1712	; 0x1712 <__eerd_byte_m328p>
     220:	2c 2f       	mov	r18, r28
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	38 2b       	or	r19, r24
     226:	30 93 6c 01 	sts	0x016C, r19
     22a:	20 93 6b 01 	sts	0x016B, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     22e:	85 e0       	ldi	r24, 0x05	; 5
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 89 0b 	call	0x1712	; 0x1712 <__eerd_byte_m328p>
     236:	80 93 6f 01 	sts	0x016F, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     23a:	89 e0       	ldi	r24, 0x09	; 9
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 89 0b 	call	0x1712	; 0x1712 <__eerd_byte_m328p>
     242:	80 93 5b 01 	sts	0x015B, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     246:	8c e0       	ldi	r24, 0x0C	; 12
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 89 0b 	call	0x1712	; 0x1712 <__eerd_byte_m328p>
     24e:	80 93 6d 01 	sts	0x016D, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     252:	84 e1       	ldi	r24, 0x14	; 20
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 89 0b 	call	0x1712	; 0x1712 <__eerd_byte_m328p>
     25a:	80 93 6e 01 	sts	0x016E, r24
     25e:	5a e3       	ldi	r21, 0x3A	; 58
     260:	e5 2e       	mov	r14, r21
     262:	51 e0       	ldi	r21, 0x01	; 1
     264:	f5 2e       	mov	r15, r21
     266:	03 e1       	ldi	r16, 0x13	; 19
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	c0 e2       	ldi	r28, 0x20	; 32
     26c:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     26e:	ce 01       	movw	r24, r28
     270:	0e 94 89 0b 	call	0x1712	; 0x1712 <__eerd_byte_m328p>
     274:	d8 2e       	mov	r13, r24
     276:	ce 01       	movw	r24, r28
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	0e 94 89 0b 	call	0x1712	; 0x1712 <__eerd_byte_m328p>
     27e:	2d 2d       	mov	r18, r13
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	32 2f       	mov	r19, r18
     284:	22 27       	eor	r18, r18
     286:	28 2b       	or	r18, r24
     288:	f7 01       	movw	r30, r14
     28a:	21 93       	st	Z+, r18
     28c:	31 93       	st	Z+, r19
     28e:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     290:	ce 01       	movw	r24, r28
     292:	c0 96       	adiw	r24, 0x30	; 48
     294:	0e 94 89 0b 	call	0x1712	; 0x1712 <__eerd_byte_m328p>
     298:	d8 2e       	mov	r13, r24
     29a:	ce 01       	movw	r24, r28
     29c:	c1 96       	adiw	r24, 0x31	; 49
     29e:	0e 94 89 0b 	call	0x1712	; 0x1712 <__eerd_byte_m328p>
     2a2:	2d 2d       	mov	r18, r13
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	32 2f       	mov	r19, r18
     2a8:	22 27       	eor	r18, r18
     2aa:	28 2b       	or	r18, r24
     2ac:	f8 01       	movw	r30, r16
     2ae:	21 93       	st	Z+, r18
     2b0:	31 93       	st	Z+, r19
     2b2:	8f 01       	movw	r16, r30
     2b4:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     2b6:	cc 33       	cpi	r28, 0x3C	; 60
     2b8:	d1 05       	cpc	r29, r1
     2ba:	c9 f6       	brne	.-78     	; 0x26e <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     2bc:	78 94       	sei
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	08 95       	ret

000002ce <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     2ce:	1f 92       	push	r1
     2d0:	0f 92       	push	r0
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	8f 93       	push	r24
    wdt_disable();
     2da:	88 e1       	ldi	r24, 0x18	; 24
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	80 93 60 00 	sts	0x0060, r24
     2e4:	10 92 60 00 	sts	0x0060, r1
     2e8:	0f be       	out	0x3f, r0	; 63
}
     2ea:	8f 91       	pop	r24
     2ec:	0f 90       	pop	r0
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	0f 90       	pop	r0
     2f2:	1f 90       	pop	r1
     2f4:	18 95       	reti

000002f6 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     2f6:	7c 01       	movw	r14, r24
     2f8:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     2fa:	d1 2c       	mov	r13, r1
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     2fc:	88 24       	eor	r8, r8
     2fe:	8a 94       	dec	r8
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     300:	64 e0       	ldi	r22, 0x04	; 4
     302:	b6 2e       	mov	r11, r22

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     304:	76 e0       	ldi	r23, 0x06	; 6
     306:	97 2e       	mov	r9, r23
     308:	e3 e8       	ldi	r30, 0x83	; 131
     30a:	ae 2e       	mov	r10, r30
            case SLEEPING:
                cli();
                acomp_off();
                adc_off();
                ports_off();
                wdt_enable(WDTO_8S);
     30c:	08 e1       	ldi	r16, 0x18	; 24
     30e:	10 e0       	ldi	r17, 0x00	; 0
     310:	f9 e2       	ldi	r31, 0x29	; 41
     312:	cf 2e       	mov	r12, r31

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     314:	e0 91 11 01 	lds	r30, 0x0111
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	e7 30       	cpi	r30, 0x07	; 7
     31c:	f1 05       	cpc	r31, r1
     31e:	d0 f7       	brcc	.-12     	; 0x314 <kilo_start+0x1e>
     320:	ec 5c       	subi	r30, 0xCC	; 204
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     328:	dd 20       	and	r13, r13
     32a:	09 f4       	brne	.+2      	; 0x32e <kilo_start+0x38>
     32c:	fd c0       	rjmp	.+506    	; 0x528 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     32e:	b0 92 11 01 	sts	0x0111, r11
     332:	dd 24       	eor	r13, r13
     334:	d3 94       	inc	r13
            case RUNNING:
                loop();
     336:	fe 01       	movw	r30, r28
     338:	09 95       	icall
                break;
     33a:	ec cf       	rjmp	.-40     	; 0x314 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     33c:	80 91 39 01 	lds	r24, 0x0139
     340:	81 11       	cpse	r24, r1
     342:	eb c0       	rjmp	.+470    	; 0x51a <kilo_start+0x224>
        cli();                                    // disable interrupts
     344:	f8 94       	cli
        adc_setup_conversion(6);
     346:	90 92 7c 00 	sts	0x007C, r9
     34a:	a0 92 7a 00 	sts	0x007A, r10
        adc_start_conversion();
     34e:	80 91 7a 00 	lds	r24, 0x007A
     352:	80 64       	ori	r24, 0x40	; 64
     354:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     358:	80 91 7a 00 	lds	r24, 0x007A
     35c:	86 fd       	sbrc	r24, 6
     35e:	fc cf       	rjmp	.-8      	; 0x358 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     360:	20 91 78 00 	lds	r18, 0x0078
     364:	30 91 79 00 	lds	r19, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     368:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     36a:	2b 3a       	cpi	r18, 0xAB	; 171
     36c:	92 e0       	ldi	r25, 0x02	; 2
     36e:	39 07       	cpc	r19, r25
     370:	0c f0       	brlt	.+2      	; 0x374 <kilo_start+0x7e>
     372:	ed c0       	rjmp	.+474    	; 0x54e <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     374:	29 38       	cpi	r18, 0x89	; 137
     376:	e2 e0       	ldi	r30, 0x02	; 2
     378:	3e 07       	cpc	r19, r30
     37a:	0c f0       	brlt	.+2      	; 0x37e <kilo_start+0x88>
     37c:	ef c0       	rjmp	.+478    	; 0x55c <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     37e:	27 36       	cpi	r18, 0x67	; 103
     380:	32 40       	sbci	r19, 0x02	; 2
     382:	0c f4       	brge	.+2      	; 0x386 <kilo_start+0x90>
     384:	ca c0       	rjmp	.+404    	; 0x51a <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     386:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     388:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     38a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     38c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     38e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     390:	3c 98       	cbi	0x07, 4	; 7
     392:	c0 cf       	rjmp	.-128    	; 0x314 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     394:	f8 94       	cli
                acomp_off();
     396:	80 b7       	in	r24, 0x30	; 48
     398:	87 7f       	andi	r24, 0xF7	; 247
     39a:	80 bf       	out	0x30, r24	; 48
                adc_off();
     39c:	80 91 7a 00 	lds	r24, 0x007A
     3a0:	8f 77       	andi	r24, 0x7F	; 127
     3a2:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     3a6:	14 b8       	out	0x04, r1	; 4
     3a8:	17 b8       	out	0x07, r1	; 7
     3aa:	1a b8       	out	0x0a, r1	; 10
     3ac:	15 b8       	out	0x05, r1	; 5
     3ae:	18 b8       	out	0x08, r1	; 8
     3b0:	1b b8       	out	0x0b, r1	; 11
                wdt_enable(WDTO_8S);
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	a8 95       	wdr
     3b8:	00 93 60 00 	sts	0x0060, r16
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	c0 92 60 00 	sts	0x0060, r12
                WDTCSR |= (1<<WDIE);
     3c2:	80 91 60 00 	lds	r24, 0x0060
     3c6:	80 64       	ori	r24, 0x40	; 64
     3c8:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     3cc:	83 b7       	in	r24, 0x33	; 51
     3ce:	81 7f       	andi	r24, 0xF1	; 241
     3d0:	84 60       	ori	r24, 0x04	; 4
     3d2:	83 bf       	out	0x33, r24	; 51
                cli();
     3d4:	f8 94       	cli
                sleep_enable();
     3d6:	83 b7       	in	r24, 0x33	; 51
     3d8:	81 60       	ori	r24, 0x01	; 1
     3da:	83 bf       	out	0x33, r24	; 51
                sei();
     3dc:	78 94       	sei
                sleep_cpu();
     3de:	88 95       	sleep
                sleep_disable();
     3e0:	83 b7       	in	r24, 0x33	; 51
     3e2:	8e 7f       	andi	r24, 0xFE	; 254
     3e4:	83 bf       	out	0x33, r24	; 51
                sei();
     3e6:	78 94       	sei
                rx_busy = 0;
     3e8:	10 92 39 01 	sts	0x0139, r1
                ports_on();
     3ec:	52 9a       	sbi	0x0a, 2	; 10
     3ee:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     3f0:	80 91 7a 00 	lds	r24, 0x007A
     3f4:	80 68       	ori	r24, 0x80	; 128
     3f6:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3fa:	87 e5       	ldi	r24, 0x57	; 87
     3fc:	92 e0       	ldi	r25, 0x02	; 2
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <kilo_start+0x108>
     402:	00 c0       	rjmp	.+0      	; 0x404 <kilo_start+0x10e>
     404:	00 00       	nop
                _delay_us(300);
                acomp_on();
     406:	80 b7       	in	r24, 0x30	; 48
     408:	88 61       	ori	r24, 0x18	; 24
     40a:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     40c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     40e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     410:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     412:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     414:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     416:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     418:	ef e1       	ldi	r30, 0x1F	; 31
     41a:	fe e4       	ldi	r31, 0x4E	; 78
     41c:	31 97       	sbiw	r30, 0x01	; 1
     41e:	f1 f7       	brne	.-4      	; 0x41c <kilo_start+0x126>
     420:	00 c0       	rjmp	.+0      	; 0x422 <kilo_start+0x12c>
     422:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     424:	80 91 39 01 	lds	r24, 0x0139
     428:	81 11       	cpse	r24, r1
     42a:	81 c0       	rjmp	.+258    	; 0x52e <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     42c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     42e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     430:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     432:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     434:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     436:	3c 98       	cbi	0x07, 4	; 7
     438:	6d cf       	rjmp	.-294    	; 0x314 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     43a:	80 91 0f 01 	lds	r24, 0x010F
     43e:	81 11       	cpse	r24, r1
     440:	41 c0       	rjmp	.+130    	; 0x4c4 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     442:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     446:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     44a:	10 92 10 01 	sts	0x0110, r1
     44e:	62 cf       	rjmp	.-316    	; 0x314 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     450:	48 99       	sbic	0x09, 0	; 9
     452:	ec cf       	rjmp	.-40     	; 0x42c <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     454:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     456:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     458:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     45a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     45c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     45e:	3c 98       	cbi	0x07, 4	; 7
     460:	8f ec       	ldi	r24, 0xCF	; 207
     462:	97 e0       	ldi	r25, 0x07	; 7
     464:	01 97       	sbiw	r24, 0x01	; 1
     466:	f1 f7       	brne	.-4      	; 0x464 <kilo_start+0x16e>
     468:	00 c0       	rjmp	.+0      	; 0x46a <kilo_start+0x174>
     46a:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     46c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     46e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     470:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     472:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     474:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     476:	3c 98       	cbi	0x07, 4	; 7
     478:	9f ef       	ldi	r25, 0xFF	; 255
     47a:	e1 ee       	ldi	r30, 0xE1	; 225
     47c:	f4 e0       	ldi	r31, 0x04	; 4
     47e:	91 50       	subi	r25, 0x01	; 1
     480:	e0 40       	sbci	r30, 0x00	; 0
     482:	f0 40       	sbci	r31, 0x00	; 0
     484:	e1 f7       	brne	.-8      	; 0x47e <kilo_start+0x188>
     486:	00 c0       	rjmp	.+0      	; 0x488 <kilo_start+0x192>
     488:	00 00       	nop
     48a:	44 cf       	rjmp	.-376    	; 0x314 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     48c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     48e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     490:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     492:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     494:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     496:	3c 98       	cbi	0x07, 4	; 7
     498:	ef ec       	ldi	r30, 0xCF	; 207
     49a:	f7 e0       	ldi	r31, 0x07	; 7
     49c:	31 97       	sbiw	r30, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <kilo_start+0x1a6>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <kilo_start+0x1ac>
     4a2:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4a4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4a6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4a8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4aa:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4ac:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4ae:	3c 98       	cbi	0x07, 4	; 7
     4b0:	ff ef       	ldi	r31, 0xFF	; 255
     4b2:	21 ee       	ldi	r18, 0xE1	; 225
     4b4:	84 e0       	ldi	r24, 0x04	; 4
     4b6:	f1 50       	subi	r31, 0x01	; 1
     4b8:	20 40       	sbci	r18, 0x00	; 0
     4ba:	80 40       	sbci	r24, 0x00	; 0
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <kilo_start+0x1c0>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <kilo_start+0x1ca>
     4c0:	00 00       	nop
     4c2:	28 cf       	rjmp	.-432    	; 0x314 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     4c4:	90 91 0f 01 	lds	r25, 0x010F
     4c8:	80 91 10 01 	lds	r24, 0x0110
     4cc:	98 17       	cp	r25, r24
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <kilo_start+0x1dc>
     4d0:	21 cf       	rjmp	.-446    	; 0x314 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     4d2:	80 91 0f 01 	lds	r24, 0x010F
     4d6:	80 93 10 01 	sts	0x0110, r24
                        if (cur_motion == MOVE_LEFT) {
     4da:	80 91 0f 01 	lds	r24, 0x010F
     4de:	81 30       	cpi	r24, 0x01	; 1
     4e0:	09 f4       	brne	.+2      	; 0x4e4 <kilo_start+0x1ee>
     4e2:	50 c0       	rjmp	.+160    	; 0x584 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     4e4:	80 91 0f 01 	lds	r24, 0x010F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4e8:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     4ec:	80 92 b4 00 	sts	0x00B4, r8
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     4f0:	82 30       	cpi	r24, 0x02	; 2
     4f2:	d9 f1       	breq	.+118    	; 0x56a <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4f4:	80 92 b3 00 	sts	0x00B3, r8
    OCR2B = cw;
     4f8:	80 92 b4 00 	sts	0x00B4, r8
     4fc:	8f e2       	ldi	r24, 0x2F	; 47
     4fe:	95 e7       	ldi	r25, 0x75	; 117
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	f1 f7       	brne	.-4      	; 0x500 <kilo_start+0x20a>
     504:	00 c0       	rjmp	.+0      	; 0x506 <kilo_start+0x210>
     506:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     508:	80 91 6e 01 	lds	r24, 0x016E
     50c:	90 91 6d 01 	lds	r25, 0x016D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     510:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     514:	80 93 b4 00 	sts	0x00B4, r24
     518:	fd ce       	rjmp	.-518    	; 0x314 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     51a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     51c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     51e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     520:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     522:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     524:	3c 98       	cbi	0x07, 4	; 7
     526:	f6 ce       	rjmp	.-532    	; 0x314 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     528:	f7 01       	movw	r30, r14
     52a:	09 95       	icall
     52c:	00 cf       	rjmp	.-512    	; 0x32e <kilo_start+0x38>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     52e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     530:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     532:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     534:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     536:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     538:	3c 98       	cbi	0x07, 4	; 7
     53a:	ff ef       	ldi	r31, 0xFF	; 255
     53c:	20 e7       	ldi	r18, 0x70	; 112
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	f1 50       	subi	r31, 0x01	; 1
     542:	20 40       	sbci	r18, 0x00	; 0
     544:	80 40       	sbci	r24, 0x00	; 0
     546:	e1 f7       	brne	.-8      	; 0x540 <kilo_start+0x24a>
     548:	00 c0       	rjmp	.+0      	; 0x54a <kilo_start+0x254>
     54a:	00 00       	nop
     54c:	6f cf       	rjmp	.-290    	; 0x42c <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     54e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     550:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     552:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     554:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     556:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     558:	3c 98       	cbi	0x07, 4	; 7
     55a:	dc ce       	rjmp	.-584    	; 0x314 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     55c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     55e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     560:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     562:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     564:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     566:	3c 9a       	sbi	0x07, 4	; 7
     568:	d5 ce       	rjmp	.-598    	; 0x314 <kilo_start+0x1e>
     56a:	ef e2       	ldi	r30, 0x2F	; 47
     56c:	f5 e7       	ldi	r31, 0x75	; 117
     56e:	31 97       	sbiw	r30, 0x01	; 1
     570:	f1 f7       	brne	.-4      	; 0x56e <kilo_start+0x278>
     572:	00 c0       	rjmp	.+0      	; 0x574 <kilo_start+0x27e>
     574:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     576:	80 91 5b 01 	lds	r24, 0x015B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     57a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     57e:	80 93 b4 00 	sts	0x00B4, r24
     582:	c8 ce       	rjmp	.-624    	; 0x314 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     584:	80 92 b3 00 	sts	0x00B3, r8
    OCR2B = cw;
     588:	10 92 b4 00 	sts	0x00B4, r1
     58c:	8f e2       	ldi	r24, 0x2F	; 47
     58e:	95 e7       	ldi	r25, 0x75	; 117
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	f1 f7       	brne	.-4      	; 0x590 <kilo_start+0x29a>
     594:	00 c0       	rjmp	.+0      	; 0x596 <kilo_start+0x2a0>
     596:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     598:	80 91 6f 01 	lds	r24, 0x016F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     59c:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5a0:	10 92 b4 00 	sts	0x00B4, r1
     5a4:	b7 ce       	rjmp	.-658    	; 0x314 <kilo_start+0x1e>

000005a6 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <delay+0x10>
     5a8:	ef ec       	ldi	r30, 0xCF	; 207
     5aa:	f7 e0       	ldi	r31, 0x07	; 7
     5ac:	31 97       	sbiw	r30, 0x01	; 1
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <delay+0x6>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <delay+0xc>
     5b2:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     5b4:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5b6:	00 97       	sbiw	r24, 0x00	; 0
     5b8:	b9 f7       	brne	.-18     	; 0x5a8 <delay+0x2>
     5ba:	08 95       	ret

000005bc <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5bc:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5c0:	60 93 b4 00 	sts	0x00B4, r22
     5c4:	08 95       	ret

000005c6 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5c6:	8f ef       	ldi	r24, 0xFF	; 255
     5c8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5cc:	80 93 b4 00 	sts	0x00B4, r24
     5d0:	8f e0       	ldi	r24, 0x0F	; 15
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	ef ec       	ldi	r30, 0xCF	; 207
     5d6:	f7 e0       	ldi	r31, 0x07	; 7
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <spinup_motors+0x12>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <spinup_motors+0x18>
     5de:	00 00       	nop
     5e0:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	b9 f7       	brne	.-18     	; 0x5d4 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     5e6:	08 95       	ret

000005e8 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     5e8:	80 91 39 01 	lds	r24, 0x0139
     5ec:	81 11       	cpse	r24, r1
     5ee:	1e c0       	rjmp	.+60     	; 0x62c <get_ambientlight+0x44>
        cli();
     5f0:	f8 94       	cli
        adc_setup_conversion(7);
     5f2:	87 e0       	ldi	r24, 0x07	; 7
     5f4:	80 93 7c 00 	sts	0x007C, r24
     5f8:	83 e8       	ldi	r24, 0x83	; 131
     5fa:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     5fe:	80 91 7a 00 	lds	r24, 0x007A
     602:	80 64       	ori	r24, 0x40	; 64
     604:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     608:	80 91 7a 00 	lds	r24, 0x007A
     60c:	86 fd       	sbrc	r24, 6
     60e:	fc cf       	rjmp	.-8      	; 0x608 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     610:	80 91 78 00 	lds	r24, 0x0078
     614:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     618:	10 92 7c 00 	sts	0x007C, r1
     61c:	23 ea       	ldi	r18, 0xA3	; 163
     61e:	20 93 7a 00 	sts	0x007A, r18
     622:	21 e0       	ldi	r18, 0x01	; 1
     624:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     628:	78 94       	sei
     62a:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     62c:	8f ef       	ldi	r24, 0xFF	; 255
     62e:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     630:	08 95       	ret

00000632 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     632:	80 91 39 01 	lds	r24, 0x0139
     636:	81 11       	cpse	r24, r1
     638:	1e c0       	rjmp	.+60     	; 0x676 <get_temperature+0x44>
        cli();
     63a:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     63c:	88 ec       	ldi	r24, 0xC8	; 200
     63e:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     642:	87 e8       	ldi	r24, 0x87	; 135
     644:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     648:	80 91 7a 00 	lds	r24, 0x007A
     64c:	80 64       	ori	r24, 0x40	; 64
     64e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     652:	80 91 7a 00 	lds	r24, 0x007A
     656:	86 fd       	sbrc	r24, 6
     658:	fc cf       	rjmp	.-8      	; 0x652 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     65a:	80 91 78 00 	lds	r24, 0x0078
     65e:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     662:	10 92 7c 00 	sts	0x007C, r1
     666:	23 ea       	ldi	r18, 0xA3	; 163
     668:	20 93 7a 00 	sts	0x007A, r18
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     672:	78 94       	sei
     674:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     676:	8f ef       	ldi	r24, 0xFF	; 255
     678:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     67a:	08 95       	ret

0000067c <rand_hard>:

uint8_t rand_hard() {
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t num = 0;
     686:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     688:	13 ea       	ldi	r17, 0xA3	; 163
     68a:	d1 e0       	ldi	r29, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     68c:	c6 e0       	ldi	r28, 0x06	; 6
     68e:	b3 e8       	ldi	r27, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     690:	e1 e0       	ldi	r30, 0x01	; 1
     692:	f0 e0       	ldi	r31, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     694:	20 e8       	ldi	r18, 0x80	; 128
     696:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     698:	f8 94       	cli
            adc_setup_conversion(6);
     69a:	c0 93 7c 00 	sts	0x007C, r28
     69e:	b0 93 7a 00 	sts	0x007A, r27
            adc_start_conversion();
     6a2:	90 91 7a 00 	lds	r25, 0x007A
     6a6:	90 64       	ori	r25, 0x40	; 64
     6a8:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     6ac:	90 91 7a 00 	lds	r25, 0x007A
     6b0:	96 fd       	sbrc	r25, 6
     6b2:	fc cf       	rjmp	.-8      	; 0x6ac <rand_hard+0x30>
            a = ADCW&0x1;
     6b4:	40 91 78 00 	lds	r20, 0x0078
     6b8:	50 91 79 00 	lds	r21, 0x0079
     6bc:	a4 2f       	mov	r26, r20
     6be:	a1 70       	andi	r26, 0x01	; 1
            adc_start_conversion();
     6c0:	90 91 7a 00 	lds	r25, 0x007A
     6c4:	90 64       	ori	r25, 0x40	; 64
     6c6:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     6ca:	90 91 7a 00 	lds	r25, 0x007A
     6ce:	96 fd       	sbrc	r25, 6
     6d0:	fc cf       	rjmp	.-8      	; 0x6ca <rand_hard+0x4e>
            b = ADCW&0x1;
     6d2:	40 91 78 00 	lds	r20, 0x0078
     6d6:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     6da:	10 92 7c 00 	sts	0x007C, r1
     6de:	10 93 7a 00 	sts	0x007A, r17
     6e2:	d0 93 7b 00 	sts	0x007B, r29
            sei();
     6e6:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     6e8:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     6ea:	a4 13       	cpse	r26, r20
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <rand_hard+0x7c>
     6ee:	21 50       	subi	r18, 0x01	; 1
     6f0:	31 09       	sbc	r19, r1
     6f2:	21 15       	cp	r18, r1
     6f4:	31 05       	cpc	r19, r1
     6f6:	81 f6       	brne	.-96     	; 0x698 <rand_hard+0x1c>
        if (a)
     6f8:	aa 23       	and	r26, r26
     6fa:	39 f0       	breq	.+14     	; 0x70a <rand_hard+0x8e>
            num |= (1<<i);
     6fc:	9f 01       	movw	r18, r30
     6fe:	06 2e       	mov	r0, r22
     700:	01 c0       	rjmp	.+2      	; 0x704 <rand_hard+0x88>
     702:	22 0f       	add	r18, r18
     704:	0a 94       	dec	r0
     706:	ea f7       	brpl	.-6      	; 0x702 <rand_hard+0x86>
     708:	82 2b       	or	r24, r18
     70a:	6f 5f       	subi	r22, 0xFF	; 255
     70c:	7f 4f       	sbci	r23, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     70e:	68 30       	cpi	r22, 0x08	; 8
     710:	71 05       	cpc	r23, r1
     712:	09 f0       	breq	.+2      	; 0x716 <rand_hard+0x9a>
     714:	bf cf       	rjmp	.-130    	; 0x694 <rand_hard+0x18>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	08 95       	ret

0000071e <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     71e:	80 91 00 01 	lds	r24, 0x0100
     722:	98 2f       	mov	r25, r24
     724:	99 0f       	add	r25, r25
     726:	99 0f       	add	r25, r25
     728:	99 0f       	add	r25, r25
     72a:	98 27       	eor	r25, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     72c:	80 91 0e 01 	lds	r24, 0x010E
     730:	21 e0       	ldi	r18, 0x01	; 1
     732:	28 0f       	add	r18, r24
     734:	20 93 0e 01 	sts	0x010E, r18
     738:	86 95       	lsr	r24
     73a:	86 95       	lsr	r24

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     73c:	89 27       	eor	r24, r25
     73e:	92 95       	swap	r25
     740:	96 95       	lsr	r25
     742:	97 70       	andi	r25, 0x07	; 7
    seed ^= accumulator++>>2;
     744:	89 27       	eor	r24, r25
     746:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     74a:	08 95       	ret

0000074c <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     74c:	80 93 00 01 	sts	0x0100, r24
     750:	08 95       	ret

00000752 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     752:	80 91 39 01 	lds	r24, 0x0139
     756:	81 11       	cpse	r24, r1
     758:	16 c0       	rjmp	.+44     	; 0x786 <get_voltage+0x34>
        cli();                                    // disable interrupts
     75a:	f8 94       	cli
        adc_setup_conversion(6);
     75c:	86 e0       	ldi	r24, 0x06	; 6
     75e:	80 93 7c 00 	sts	0x007C, r24
     762:	83 e8       	ldi	r24, 0x83	; 131
     764:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     768:	80 91 7a 00 	lds	r24, 0x007A
     76c:	80 64       	ori	r24, 0x40	; 64
     76e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     772:	80 91 7a 00 	lds	r24, 0x007A
     776:	86 fd       	sbrc	r24, 6
     778:	fc cf       	rjmp	.-8      	; 0x772 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     77a:	80 91 78 00 	lds	r24, 0x0078
     77e:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     782:	78 94       	sei
     784:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     786:	8f ef       	ldi	r24, 0xFF	; 255
     788:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     78a:	08 95       	ret

0000078c <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     78c:	2f 92       	push	r2
     78e:	3f 92       	push	r3
     790:	4f 92       	push	r4
     792:	5f 92       	push	r5
     794:	6f 92       	push	r6
     796:	7f 92       	push	r7
     798:	8f 92       	push	r8
     79a:	9f 92       	push	r9
     79c:	af 92       	push	r10
     79e:	bf 92       	push	r11
     7a0:	cf 92       	push	r12
     7a2:	df 92       	push	r13
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <estimate_distance+0x26>
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <estimate_distance+0x28>
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <estimate_distance+0x2a>
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	8c 01       	movw	r16, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     7bc:	dc 01       	movw	r26, r24
     7be:	12 96       	adiw	r26, 0x02	; 2
     7c0:	0d 90       	ld	r0, X+
     7c2:	bc 91       	ld	r27, X
     7c4:	a0 2d       	mov	r26, r0
     7c6:	be 83       	std	Y+6, r27	; 0x06
     7c8:	ad 83       	std	Y+5, r26	; 0x05
     7ca:	a4 38       	cpi	r26, 0x84	; 132
     7cc:	e3 e0       	ldi	r30, 0x03	; 3
     7ce:	be 07       	cpc	r27, r30
     7d0:	0c f0       	brlt	.+2      	; 0x7d4 <estimate_distance+0x48>
     7d2:	ca c0       	rjmp	.+404    	; 0x968 <__stack+0x69>
        if (dist->high_gain > kilo_irhigh[0]) {
     7d4:	80 91 13 01 	lds	r24, 0x0113
     7d8:	90 91 14 01 	lds	r25, 0x0114
     7dc:	8a 17       	cp	r24, r26
     7de:	9b 07       	cpc	r25, r27
     7e0:	08 f4       	brcc	.+2      	; 0x7e4 <estimate_distance+0x58>
     7e2:	a9 c1       	rjmp	.+850    	; 0xb36 <__stack+0x237>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     7e4:	60 90 15 01 	lds	r6, 0x0115
     7e8:	70 90 16 01 	lds	r7, 0x0116
     7ec:	6a 16       	cp	r6, r26
     7ee:	7b 06       	cpc	r7, r27
     7f0:	08 f4       	brcc	.+2      	; 0x7f4 <estimate_distance+0x68>
     7f2:	27 c2       	rjmp	.+1102   	; 0xc42 <__stack+0x343>
     7f4:	60 90 17 01 	lds	r6, 0x0117
     7f8:	70 90 18 01 	lds	r7, 0x0118
     7fc:	6a 16       	cp	r6, r26
     7fe:	7b 06       	cpc	r7, r27
     800:	08 f4       	brcc	.+2      	; 0x804 <estimate_distance+0x78>
     802:	28 c2       	rjmp	.+1104   	; 0xc54 <__stack+0x355>
     804:	60 90 19 01 	lds	r6, 0x0119
     808:	70 90 1a 01 	lds	r7, 0x011A
     80c:	6a 16       	cp	r6, r26
     80e:	7b 06       	cpc	r7, r27
     810:	08 f4       	brcc	.+2      	; 0x814 <estimate_distance+0x88>
     812:	29 c2       	rjmp	.+1106   	; 0xc66 <__stack+0x367>
     814:	60 90 1b 01 	lds	r6, 0x011B
     818:	70 90 1c 01 	lds	r7, 0x011C
     81c:	6a 16       	cp	r6, r26
     81e:	7b 06       	cpc	r7, r27
     820:	08 f4       	brcc	.+2      	; 0x824 <estimate_distance+0x98>
     822:	2a c2       	rjmp	.+1108   	; 0xc78 <__stack+0x379>
     824:	60 90 1d 01 	lds	r6, 0x011D
     828:	70 90 1e 01 	lds	r7, 0x011E
     82c:	6a 16       	cp	r6, r26
     82e:	7b 06       	cpc	r7, r27
     830:	08 f4       	brcc	.+2      	; 0x834 <estimate_distance+0xa8>
     832:	8b c1       	rjmp	.+790    	; 0xb4a <__stack+0x24b>
     834:	60 90 1f 01 	lds	r6, 0x011F
     838:	70 90 20 01 	lds	r7, 0x0120
     83c:	6a 16       	cp	r6, r26
     83e:	7b 06       	cpc	r7, r27
     840:	08 f4       	brcc	.+2      	; 0x844 <estimate_distance+0xb8>
     842:	23 c2       	rjmp	.+1094   	; 0xc8a <__stack+0x38b>
     844:	60 90 21 01 	lds	r6, 0x0121
     848:	70 90 22 01 	lds	r7, 0x0122
     84c:	6a 16       	cp	r6, r26
     84e:	7b 06       	cpc	r7, r27
     850:	08 f4       	brcc	.+2      	; 0x854 <estimate_distance+0xc8>
     852:	24 c2       	rjmp	.+1096   	; 0xc9c <__stack+0x39d>
     854:	60 90 23 01 	lds	r6, 0x0123
     858:	70 90 24 01 	lds	r7, 0x0124
     85c:	6a 16       	cp	r6, r26
     85e:	7b 06       	cpc	r7, r27
     860:	08 f4       	brcc	.+2      	; 0x864 <estimate_distance+0xd8>
     862:	25 c2       	rjmp	.+1098   	; 0xcae <__stack+0x3af>
     864:	60 90 25 01 	lds	r6, 0x0125
     868:	70 90 26 01 	lds	r7, 0x0126
     86c:	6a 16       	cp	r6, r26
     86e:	7b 06       	cpc	r7, r27
     870:	08 f4       	brcc	.+2      	; 0x874 <estimate_distance+0xe8>
     872:	26 c2       	rjmp	.+1100   	; 0xcc0 <__stack+0x3c1>
     874:	60 90 27 01 	lds	r6, 0x0127
     878:	70 90 28 01 	lds	r7, 0x0128
     87c:	6a 16       	cp	r6, r26
     87e:	7b 06       	cpc	r7, r27
     880:	08 f4       	brcc	.+2      	; 0x884 <estimate_distance+0xf8>
     882:	27 c2       	rjmp	.+1102   	; 0xcd2 <__stack+0x3d3>
     884:	60 90 29 01 	lds	r6, 0x0129
     888:	70 90 2a 01 	lds	r7, 0x012A
     88c:	6a 16       	cp	r6, r26
     88e:	7b 06       	cpc	r7, r27
     890:	08 f4       	brcc	.+2      	; 0x894 <estimate_distance+0x108>
     892:	2d c2       	rjmp	.+1114   	; 0xcee <__stack+0x3ef>
     894:	60 90 2b 01 	lds	r6, 0x012B
     898:	70 90 2c 01 	lds	r7, 0x012C
     89c:	6a 16       	cp	r6, r26
     89e:	7b 06       	cpc	r7, r27
     8a0:	08 f4       	brcc	.+2      	; 0x8a4 <estimate_distance+0x118>
     8a2:	2e c2       	rjmp	.+1116   	; 0xd00 <__stack+0x401>
     8a4:	60 90 2d 01 	lds	r6, 0x012D
     8a8:	70 90 2e 01 	lds	r7, 0x012E
     8ac:	6a 16       	cp	r6, r26
     8ae:	7b 06       	cpc	r7, r27
     8b0:	08 f4       	brcc	.+2      	; 0x8b4 <estimate_distance+0x128>
     8b2:	2f c2       	rjmp	.+1118   	; 0xd12 <__stack+0x413>
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a0 ed       	ldi	r26, 0xD0	; 208
     8ba:	b0 e4       	ldi	r27, 0x40	; 64
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	9a 83       	std	Y+2, r25	; 0x02
     8c0:	ab 83       	std	Y+3, r26	; 0x03
     8c2:	bc 83       	std	Y+4, r27	; 0x04
     8c4:	8c e0       	ldi	r24, 0x0C	; 12
     8c6:	e8 2e       	mov	r14, r24
     8c8:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     8ca:	f7 01       	movw	r30, r14
     8cc:	ee 0f       	add	r30, r30
     8ce:	ff 1f       	adc	r31, r31
     8d0:	ed 5e       	subi	r30, 0xED	; 237
     8d2:	fe 4f       	sbci	r31, 0xFE	; 254
     8d4:	80 81       	ld	r24, Z
     8d6:	91 81       	ldd	r25, Z+1	; 0x01
     8d8:	b3 01       	movw	r22, r6
     8da:	68 1b       	sub	r22, r24
     8dc:	79 0b       	sbc	r23, r25
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatunsisf>
     8e6:	9b 01       	movw	r18, r22
     8e8:	ac 01       	movw	r20, r24
     8ea:	0e 94 9b 09 	call	0x1336	; 0x1336 <__addsf3>
     8ee:	6b 01       	movw	r12, r22
     8f0:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     8f2:	ad 81       	ldd	r26, Y+5	; 0x05
     8f4:	be 81       	ldd	r27, Y+6	; 0x06
     8f6:	bd 01       	movw	r22, r26
     8f8:	88 27       	eor	r24, r24
     8fa:	77 fd       	sbrc	r23, 7
     8fc:	80 95       	com	r24
     8fe:	98 2f       	mov	r25, r24
     900:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__floatsisf>
     904:	4b 01       	movw	r8, r22
     906:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     908:	b3 01       	movw	r22, r6
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatunsisf>
     912:	2b 01       	movw	r4, r22
     914:	3c 01       	movw	r6, r24
     916:	29 81       	ldd	r18, Y+1	; 0x01
     918:	3a 81       	ldd	r19, Y+2	; 0x02
     91a:	4b 81       	ldd	r20, Y+3	; 0x03
     91c:	5c 81       	ldd	r21, Y+4	; 0x04
     91e:	c7 01       	movw	r24, r14
     920:	b6 01       	movw	r22, r12
     922:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsf3>
     926:	9b 01       	movw	r18, r22
     928:	ac 01       	movw	r20, r24
     92a:	c3 01       	movw	r24, r6
     92c:	b2 01       	movw	r22, r4
     92e:	0e 94 9a 09 	call	0x1334	; 0x1334 <__subsf3>
     932:	9b 01       	movw	r18, r22
     934:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     936:	c5 01       	movw	r24, r10
     938:	b4 01       	movw	r22, r8
     93a:	0e 94 9a 09 	call	0x1334	; 0x1334 <__subsf3>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e2       	ldi	r20, 0x20	; 32
     944:	51 e4       	ldi	r21, 0x41	; 65
     946:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsf3>
            b=((int)((int)b/(int)slope));
     94a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__fixsfsi>
     94e:	5b 01       	movw	r10, r22
     950:	c7 01       	movw	r24, r14
     952:	b6 01       	movw	r22, r12
     954:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__fixsfsi>
     958:	ab 01       	movw	r20, r22
     95a:	bc 01       	movw	r22, r24
     95c:	c5 01       	movw	r24, r10
     95e:	ba 01       	movw	r22, r20
     960:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__divmodhi4>
            dist_high=b;
     964:	76 2e       	mov	r7, r22
     966:	e8 c0       	rjmp	.+464    	; 0xb38 <__stack+0x239>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     968:	77 24       	eor	r7, r7
     96a:	7a 94       	dec	r7
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     96c:	d8 01       	movw	r26, r16
     96e:	ad 90       	ld	r10, X+
     970:	bc 90       	ld	r11, X
     972:	80 91 3a 01 	lds	r24, 0x013A
     976:	90 91 3b 01 	lds	r25, 0x013B
     97a:	8a 15       	cp	r24, r10
     97c:	9b 05       	cpc	r25, r11
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x83>
     980:	6f c0       	rjmp	.+222    	; 0xa60 <__stack+0x161>
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     982:	00 91 3c 01 	lds	r16, 0x013C
     986:	10 91 3d 01 	lds	r17, 0x013D
     98a:	0a 15       	cp	r16, r10
     98c:	1b 05       	cpc	r17, r11
     98e:	08 f4       	brcc	.+2      	; 0x992 <__stack+0x93>
     990:	5c c1       	rjmp	.+696    	; 0xc4a <__stack+0x34b>
     992:	00 91 3e 01 	lds	r16, 0x013E
     996:	10 91 3f 01 	lds	r17, 0x013F
     99a:	0a 15       	cp	r16, r10
     99c:	1b 05       	cpc	r17, r11
     99e:	08 f4       	brcc	.+2      	; 0x9a2 <__stack+0xa3>
     9a0:	5d c1       	rjmp	.+698    	; 0xc5c <__stack+0x35d>
     9a2:	00 91 40 01 	lds	r16, 0x0140
     9a6:	10 91 41 01 	lds	r17, 0x0141
     9aa:	0a 15       	cp	r16, r10
     9ac:	1b 05       	cpc	r17, r11
     9ae:	08 f4       	brcc	.+2      	; 0x9b2 <__stack+0xb3>
     9b0:	5e c1       	rjmp	.+700    	; 0xc6e <__stack+0x36f>
     9b2:	00 91 42 01 	lds	r16, 0x0142
     9b6:	10 91 43 01 	lds	r17, 0x0143
     9ba:	0a 15       	cp	r16, r10
     9bc:	1b 05       	cpc	r17, r11
     9be:	08 f4       	brcc	.+2      	; 0x9c2 <__stack+0xc3>
     9c0:	5f c1       	rjmp	.+702    	; 0xc80 <__stack+0x381>
     9c2:	00 91 44 01 	lds	r16, 0x0144
     9c6:	10 91 45 01 	lds	r17, 0x0145
     9ca:	0a 15       	cp	r16, r10
     9cc:	1b 05       	cpc	r17, r11
     9ce:	08 f4       	brcc	.+2      	; 0x9d2 <__stack+0xd3>
     9d0:	d8 c0       	rjmp	.+432    	; 0xb82 <__stack+0x283>
     9d2:	00 91 46 01 	lds	r16, 0x0146
     9d6:	10 91 47 01 	lds	r17, 0x0147
     9da:	0a 15       	cp	r16, r10
     9dc:	1b 05       	cpc	r17, r11
     9de:	08 f4       	brcc	.+2      	; 0x9e2 <__stack+0xe3>
     9e0:	58 c1       	rjmp	.+688    	; 0xc92 <__stack+0x393>
     9e2:	00 91 48 01 	lds	r16, 0x0148
     9e6:	10 91 49 01 	lds	r17, 0x0149
     9ea:	0a 15       	cp	r16, r10
     9ec:	1b 05       	cpc	r17, r11
     9ee:	08 f4       	brcc	.+2      	; 0x9f2 <__stack+0xf3>
     9f0:	59 c1       	rjmp	.+690    	; 0xca4 <__stack+0x3a5>
     9f2:	00 91 4a 01 	lds	r16, 0x014A
     9f6:	10 91 4b 01 	lds	r17, 0x014B
     9fa:	0a 15       	cp	r16, r10
     9fc:	1b 05       	cpc	r17, r11
     9fe:	08 f4       	brcc	.+2      	; 0xa02 <__stack+0x103>
     a00:	5a c1       	rjmp	.+692    	; 0xcb6 <__stack+0x3b7>
     a02:	00 91 4c 01 	lds	r16, 0x014C
     a06:	10 91 4d 01 	lds	r17, 0x014D
     a0a:	0a 15       	cp	r16, r10
     a0c:	1b 05       	cpc	r17, r11
     a0e:	08 f4       	brcc	.+2      	; 0xa12 <__stack+0x113>
     a10:	5b c1       	rjmp	.+694    	; 0xcc8 <__stack+0x3c9>
     a12:	00 91 4e 01 	lds	r16, 0x014E
     a16:	10 91 4f 01 	lds	r17, 0x014F
     a1a:	0a 15       	cp	r16, r10
     a1c:	1b 05       	cpc	r17, r11
     a1e:	08 f4       	brcc	.+2      	; 0xa22 <__stack+0x123>
     a20:	5c c1       	rjmp	.+696    	; 0xcda <__stack+0x3db>
     a22:	00 91 50 01 	lds	r16, 0x0150
     a26:	10 91 51 01 	lds	r17, 0x0151
     a2a:	0a 15       	cp	r16, r10
     a2c:	1b 05       	cpc	r17, r11
     a2e:	08 f4       	brcc	.+2      	; 0xa32 <__stack+0x133>
     a30:	59 c1       	rjmp	.+690    	; 0xce4 <__stack+0x3e5>
     a32:	00 91 52 01 	lds	r16, 0x0152
     a36:	10 91 53 01 	lds	r17, 0x0153
     a3a:	0a 15       	cp	r16, r10
     a3c:	1b 05       	cpc	r17, r11
     a3e:	08 f4       	brcc	.+2      	; 0xa42 <__stack+0x143>
     a40:	5a c1       	rjmp	.+692    	; 0xcf6 <__stack+0x3f7>
     a42:	00 91 54 01 	lds	r16, 0x0154
     a46:	10 91 55 01 	lds	r17, 0x0155
     a4a:	0a 15       	cp	r16, r10
     a4c:	1b 05       	cpc	r17, r11
     a4e:	08 f4       	brcc	.+2      	; 0xa52 <__stack+0x153>
     a50:	5b c1       	rjmp	.+694    	; 0xd08 <__stack+0x409>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     a52:	1a e5       	ldi	r17, 0x5A	; 90
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     a54:	bf ef       	ldi	r27, 0xFF	; 255
     a56:	7b 12       	cpse	r7, r27
     a58:	07 c0       	rjmp	.+14     	; 0xa68 <__stack+0x169>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     a5a:	81 e2       	ldi	r24, 0x21	; 33
     a5c:	81 0f       	add	r24, r17
     a5e:	52 c0       	rjmp	.+164    	; 0xb04 <__stack+0x205>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     a60:	10 e0       	ldi	r17, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     a62:	bf ef       	ldi	r27, 0xFF	; 255
     a64:	7b 16       	cp	r7, r27
     a66:	c9 f3       	breq	.-14     	; 0xa5a <__stack+0x15b>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     a68:	ed 81       	ldd	r30, Y+5	; 0x05
     a6a:	fe 81       	ldd	r31, Y+6	; 0x06
     a6c:	bf 01       	movw	r22, r30
     a6e:	88 27       	eor	r24, r24
     a70:	77 fd       	sbrc	r23, 7
     a72:	80 95       	com	r24
     a74:	98 2f       	mov	r25, r24
     a76:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__floatsisf>
     a7a:	6b 01       	movw	r12, r22
     a7c:	7c 01       	movw	r14, r24
     a7e:	67 2d       	mov	r22, r7
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatunsisf>
     a8a:	4b 01       	movw	r8, r22
     a8c:	5c 01       	movw	r10, r24
     a8e:	a7 01       	movw	r20, r14
     a90:	96 01       	movw	r18, r12
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	81 e6       	ldi	r24, 0x61	; 97
     a98:	94 e4       	ldi	r25, 0x44	; 68
     a9a:	0e 94 9a 09 	call	0x1334	; 0x1334 <__subsf3>
     a9e:	9b 01       	movw	r18, r22
     aa0:	ac 01       	movw	r20, r24
     aa2:	c5 01       	movw	r24, r10
     aa4:	b4 01       	movw	r22, r8
     aa6:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsf3>
     aaa:	4b 01       	movw	r8, r22
     aac:	5c 01       	movw	r10, r24
     aae:	61 2f       	mov	r22, r17
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatunsisf>
     aba:	2b 01       	movw	r4, r22
     abc:	3c 01       	movw	r6, r24
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	4f e2       	ldi	r20, 0x2F	; 47
     ac4:	54 e4       	ldi	r21, 0x44	; 68
     ac6:	c7 01       	movw	r24, r14
     ac8:	b6 01       	movw	r22, r12
     aca:	0e 94 9a 09 	call	0x1334	; 0x1334 <__subsf3>
     ace:	9b 01       	movw	r18, r22
     ad0:	ac 01       	movw	r20, r24
     ad2:	c3 01       	movw	r24, r6
     ad4:	b2 01       	movw	r22, r4
     ad6:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsf3>
     ada:	9b 01       	movw	r18, r22
     adc:	ac 01       	movw	r20, r24
     ade:	c5 01       	movw	r24, r10
     ae0:	b4 01       	movw	r22, r8
     ae2:	0e 94 9b 09 	call	0x1336	; 0x1336 <__addsf3>
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	48 e4       	ldi	r20, 0x48	; 72
     aec:	53 e4       	ldi	r21, 0x43	; 67
     aee:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__divsf3>
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	44 e0       	ldi	r20, 0x04	; 4
     af8:	52 e4       	ldi	r21, 0x42	; 66
     afa:	0e 94 9b 09 	call	0x1336	; 0x1336 <__addsf3>
     afe:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__fixunssfsi>
     b02:	86 2f       	mov	r24, r22
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    }
}
     b04:	26 96       	adiw	r28, 0x06	; 6
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	cf 90       	pop	r12
     b20:	bf 90       	pop	r11
     b22:	af 90       	pop	r10
     b24:	9f 90       	pop	r9
     b26:	8f 90       	pop	r8
     b28:	7f 90       	pop	r7
     b2a:	6f 90       	pop	r6
     b2c:	5f 90       	pop	r5
     b2e:	4f 90       	pop	r4
     b30:	3f 90       	pop	r3
     b32:	2f 90       	pop	r2
     b34:	08 95       	ret
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     b36:	71 2c       	mov	r7, r1
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     b38:	ed 81       	ldd	r30, Y+5	; 0x05
     b3a:	fe 81       	ldd	r31, Y+6	; 0x06
     b3c:	ed 3b       	cpi	r30, 0xBD	; 189
     b3e:	f2 40       	sbci	r31, 0x02	; 2
     b40:	0c f0       	brlt	.+2      	; 0xb44 <__stack+0x245>
     b42:	14 cf       	rjmp	.-472    	; 0x96c <__stack+0x6d>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     b44:	81 e2       	ldi	r24, 0x21	; 33
     b46:	87 0d       	add	r24, r7
     b48:	dd cf       	rjmp	.-70     	; 0xb04 <__stack+0x205>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     b4a:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     b4c:	85 e0       	ldi	r24, 0x05	; 5
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	7c 01       	movw	r14, r24
     b52:	f1 e0       	ldi	r31, 0x01	; 1
     b54:	ef 1a       	sub	r14, r31
     b56:	f1 08       	sbc	r15, r1
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatunsisf>
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	5f e3       	ldi	r21, 0x3F	; 63
     b6a:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsf3>
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	a9 01       	movw	r20, r18
     b74:	0e 94 9b 09 	call	0x1336	; 0x1336 <__addsf3>
     b78:	69 83       	std	Y+1, r22	; 0x01
     b7a:	7a 83       	std	Y+2, r23	; 0x02
     b7c:	8b 83       	std	Y+3, r24	; 0x03
     b7e:	9c 83       	std	Y+4, r25	; 0x04
     b80:	a4 ce       	rjmp	.-696    	; 0x8ca <estimate_distance+0x13e>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     b82:	75 e0       	ldi	r23, 0x05	; 5
     b84:	67 2e       	mov	r6, r23
                if(dist->low_gain > kilo_irlow[i]) {
     b86:	e5 e0       	ldi	r30, 0x05	; 5
     b88:	f0 e0       	ldi	r31, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     b8a:	ee 0f       	add	r30, r30
     b8c:	ff 1f       	adc	r31, r31
     b8e:	e8 5c       	subi	r30, 0xC8	; 200
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	80 81       	ld	r24, Z
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	b8 01       	movw	r22, r16
     b98:	68 1b       	sub	r22, r24
     b9a:	79 0b       	sbc	r23, r25
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatunsisf>
     ba4:	9b 01       	movw	r18, r22
     ba6:	ac 01       	movw	r20, r24
     ba8:	0e 94 9b 09 	call	0x1336	; 0x1336 <__addsf3>
     bac:	6b 01       	movw	r12, r22
     bae:	7c 01       	movw	r14, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     bb0:	b5 01       	movw	r22, r10
     bb2:	88 27       	eor	r24, r24
     bb4:	77 fd       	sbrc	r23, 7
     bb6:	80 95       	com	r24
     bb8:	98 2f       	mov	r25, r24
     bba:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__floatsisf>
     bbe:	4b 01       	movw	r8, r22
     bc0:	5c 01       	movw	r10, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     bc2:	b8 01       	movw	r22, r16
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatunsisf>
     bcc:	1b 01       	movw	r2, r22
     bce:	2c 01       	movw	r4, r24
     bd0:	66 2d       	mov	r22, r6
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatunsisf>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	5f e3       	ldi	r21, 0x3F	; 63
     be4:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsf3>
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	a9 01       	movw	r20, r18
     bee:	0e 94 9b 09 	call	0x1336	; 0x1336 <__addsf3>
     bf2:	a7 01       	movw	r20, r14
     bf4:	96 01       	movw	r18, r12
     bf6:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsf3>
     bfa:	9b 01       	movw	r18, r22
     bfc:	ac 01       	movw	r20, r24
     bfe:	c2 01       	movw	r24, r4
     c00:	b1 01       	movw	r22, r2
     c02:	0e 94 9a 09 	call	0x1334	; 0x1334 <__subsf3>
     c06:	9b 01       	movw	r18, r22
     c08:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c0a:	c5 01       	movw	r24, r10
     c0c:	b4 01       	movw	r22, r8
     c0e:	0e 94 9a 09 	call	0x1334	; 0x1334 <__subsf3>
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e2       	ldi	r20, 0x20	; 32
     c18:	51 e4       	ldi	r21, 0x41	; 65
     c1a:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsf3>
                b=((int)((int)b/(int)slope));
     c1e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__fixsfsi>
     c22:	8b 01       	movw	r16, r22
     c24:	c7 01       	movw	r24, r14
     c26:	b6 01       	movw	r22, r12
     c28:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__fixsfsi>
     c2c:	ab 01       	movw	r20, r22
     c2e:	bc 01       	movw	r22, r24
     c30:	c8 01       	movw	r24, r16
     c32:	ba 01       	movw	r22, r20
     c34:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__divmodhi4>
                dist_low=b;
     c38:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
     c3a:	6f 3f       	cpi	r22, 0xFF	; 255
     c3c:	09 f0       	breq	.+2      	; 0xc40 <__stack+0x341>
     c3e:	11 cf       	rjmp	.-478    	; 0xa62 <__stack+0x163>
     c40:	81 cf       	rjmp	.-254    	; 0xb44 <__stack+0x245>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     c42:	61 e0       	ldi	r22, 0x01	; 1
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	83 cf       	rjmp	.-250    	; 0xb50 <__stack+0x251>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c4a:	66 24       	eor	r6, r6
     c4c:	63 94       	inc	r6
     c4e:	e1 e0       	ldi	r30, 0x01	; 1
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	9b cf       	rjmp	.-202    	; 0xb8a <__stack+0x28b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c54:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	7a cf       	rjmp	.-268    	; 0xb50 <__stack+0x251>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c5c:	a2 e0       	ldi	r26, 0x02	; 2
     c5e:	6a 2e       	mov	r6, r26
                if(dist->low_gain > kilo_irlow[i]) {
     c60:	e2 e0       	ldi	r30, 0x02	; 2
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	92 cf       	rjmp	.-220    	; 0xb8a <__stack+0x28b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c66:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	71 cf       	rjmp	.-286    	; 0xb50 <__stack+0x251>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c6e:	f3 e0       	ldi	r31, 0x03	; 3
     c70:	6f 2e       	mov	r6, r31
                if(dist->low_gain > kilo_irlow[i]) {
     c72:	e3 e0       	ldi	r30, 0x03	; 3
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	89 cf       	rjmp	.-238    	; 0xb8a <__stack+0x28b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c78:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	68 cf       	rjmp	.-304    	; 0xb50 <__stack+0x251>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c80:	e4 e0       	ldi	r30, 0x04	; 4
     c82:	6e 2e       	mov	r6, r30
                if(dist->low_gain > kilo_irlow[i]) {
     c84:	e4 e0       	ldi	r30, 0x04	; 4
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 cf       	rjmp	.-256    	; 0xb8a <__stack+0x28b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c8a:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     c8c:	86 e0       	ldi	r24, 0x06	; 6
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	5f cf       	rjmp	.-322    	; 0xb50 <__stack+0x251>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c92:	66 e0       	ldi	r22, 0x06	; 6
     c94:	66 2e       	mov	r6, r22
                if(dist->low_gain > kilo_irlow[i]) {
     c96:	e6 e0       	ldi	r30, 0x06	; 6
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	77 cf       	rjmp	.-274    	; 0xb8a <__stack+0x28b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c9c:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	56 cf       	rjmp	.-340    	; 0xb50 <__stack+0x251>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ca4:	57 e0       	ldi	r21, 0x07	; 7
     ca6:	65 2e       	mov	r6, r21
                if(dist->low_gain > kilo_irlow[i]) {
     ca8:	e7 e0       	ldi	r30, 0x07	; 7
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	6e cf       	rjmp	.-292    	; 0xb8a <__stack+0x28b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cae:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     cb0:	88 e0       	ldi	r24, 0x08	; 8
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	4d cf       	rjmp	.-358    	; 0xb50 <__stack+0x251>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cb6:	48 e0       	ldi	r20, 0x08	; 8
     cb8:	64 2e       	mov	r6, r20
                if(dist->low_gain > kilo_irlow[i]) {
     cba:	e8 e0       	ldi	r30, 0x08	; 8
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	65 cf       	rjmp	.-310    	; 0xb8a <__stack+0x28b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cc0:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     cc2:	89 e0       	ldi	r24, 0x09	; 9
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	44 cf       	rjmp	.-376    	; 0xb50 <__stack+0x251>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cc8:	39 e0       	ldi	r19, 0x09	; 9
     cca:	63 2e       	mov	r6, r19
                if(dist->low_gain > kilo_irlow[i]) {
     ccc:	e9 e0       	ldi	r30, 0x09	; 9
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	5c cf       	rjmp	.-328    	; 0xb8a <__stack+0x28b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cd2:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     cd4:	8a e0       	ldi	r24, 0x0A	; 10
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	3b cf       	rjmp	.-394    	; 0xb50 <__stack+0x251>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cda:	2a e0       	ldi	r18, 0x0A	; 10
     cdc:	62 2e       	mov	r6, r18
                if(dist->low_gain > kilo_irlow[i]) {
     cde:	ea e0       	ldi	r30, 0x0A	; 10
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	53 cf       	rjmp	.-346    	; 0xb8a <__stack+0x28b>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ce4:	9b e0       	ldi	r25, 0x0B	; 11
     ce6:	69 2e       	mov	r6, r25
                if(dist->low_gain > kilo_irlow[i]) {
     ce8:	eb e0       	ldi	r30, 0x0B	; 11
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	4e cf       	rjmp	.-356    	; 0xb8a <__stack+0x28b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cee:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     cf0:	8b e0       	ldi	r24, 0x0B	; 11
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	2d cf       	rjmp	.-422    	; 0xb50 <__stack+0x251>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cf6:	8c e0       	ldi	r24, 0x0C	; 12
     cf8:	68 2e       	mov	r6, r24
                if(dist->low_gain > kilo_irlow[i]) {
     cfa:	ec e0       	ldi	r30, 0x0C	; 12
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	45 cf       	rjmp	.-374    	; 0xb8a <__stack+0x28b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d00:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     d02:	8c e0       	ldi	r24, 0x0C	; 12
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	24 cf       	rjmp	.-440    	; 0xb50 <__stack+0x251>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d08:	bd e0       	ldi	r27, 0x0D	; 13
     d0a:	6b 2e       	mov	r6, r27
                if(dist->low_gain > kilo_irlow[i]) {
     d0c:	ed e0       	ldi	r30, 0x0D	; 13
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	3c cf       	rjmp	.-392    	; 0xb8a <__stack+0x28b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d12:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     d14:	8d e0       	ldi	r24, 0x0D	; 13
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	1b cf       	rjmp	.-458    	; 0xb50 <__stack+0x251>

00000d1a <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d1a:	1f 92       	push	r1
     d1c:	0f 92       	push	r0
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	0f 92       	push	r0
     d22:	11 24       	eor	r1, r1
     d24:	2f 93       	push	r18
     d26:	8f 93       	push	r24
     d28:	9f 93       	push	r25
     d2a:	ef 93       	push	r30
     d2c:	ff 93       	push	r31
     static int counterio=0;
	static int countersys=0;
	static int counter1sec=0;

	counterio++;
     d2e:	80 91 0c 01 	lds	r24, 0x010C
     d32:	90 91 0d 01 	lds	r25, 0x010D
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	90 93 0d 01 	sts	0x010D, r25
     d3c:	80 93 0c 01 	sts	0x010C, r24
    
    if(counterio==1)
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	09 f4       	brne	.+2      	; 0xd46 <__vector_14+0x2c>
     d44:	3f c0       	rjmp	.+126    	; 0xdc4 <__vector_14+0xaa>
     d46:	80 91 0a 01 	lds	r24, 0x010A
     d4a:	90 91 0b 01 	lds	r25, 0x010B
        counterio=0;
        //whatever code to run
        
    }
    
    if(countersys==100){
     d4e:	84 36       	cpi	r24, 0x64	; 100
     d50:	91 05       	cpc	r25, r1
     d52:	51 f1       	breq	.+84     	; 0xda8 <__vector_14+0x8e>
     d54:	80 91 08 01 	lds	r24, 0x0108
     d58:	90 91 09 01 	lds	r25, 0x0109
        counter1sec++;
        //whatever code to run
        
    }
    
    if(counter1sec==500){
     d5c:	84 3f       	cpi	r24, 0xF4	; 244
     d5e:	91 40       	sbci	r25, 0x01	; 1
     d60:	51 f0       	breq	.+20     	; 0xd76 <__vector_14+0x5c>
	counter1sec=0;
		set_motors(155,155);
        delay(500);
   		set_motors(0,0);        
    }
}
     d62:	ff 91       	pop	r31
     d64:	ef 91       	pop	r30
     d66:	9f 91       	pop	r25
     d68:	8f 91       	pop	r24
     d6a:	2f 91       	pop	r18
     d6c:	0f 90       	pop	r0
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	0f 90       	pop	r0
     d72:	1f 90       	pop	r1
     d74:	18 95       	reti
        //whatever code to run
        
    }
    
    if(counter1sec==500){
	counter1sec=0;
     d76:	10 92 09 01 	sts	0x0109, r1
     d7a:	10 92 08 01 	sts	0x0108, r1
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d7e:	8b e9       	ldi	r24, 0x9B	; 155
     d80:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     d84:	80 93 b4 00 	sts	0x00B4, r24
     d88:	84 ef       	ldi	r24, 0xF4	; 244
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	ef ec       	ldi	r30, 0xCF	; 207
     d8e:	f7 e0       	ldi	r31, 0x07	; 7
     d90:	31 97       	sbiw	r30, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <__vector_14+0x76>
     d94:	00 c0       	rjmp	.+0      	; 0xd96 <__vector_14+0x7c>
     d96:	00 00       	nop
     d98:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	b9 f7       	brne	.-18     	; 0xd8c <__vector_14+0x72>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d9e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     da2:	10 92 b4 00 	sts	0x00B4, r1
     da6:	dd cf       	rjmp	.-70     	; 0xd62 <__vector_14+0x48>
        //whatever code to run
        
    }
    
    if(countersys==100){
        countersys=0;
     da8:	10 92 0b 01 	sts	0x010B, r1
     dac:	10 92 0a 01 	sts	0x010A, r1
        counter1sec++;
     db0:	80 91 08 01 	lds	r24, 0x0108
     db4:	90 91 09 01 	lds	r25, 0x0109
     db8:	01 96       	adiw	r24, 0x01	; 1
     dba:	90 93 09 01 	sts	0x0109, r25
     dbe:	80 93 08 01 	sts	0x0108, r24
     dc2:	cc cf       	rjmp	.-104    	; 0xd5c <__vector_14+0x42>

	counterio++;
    
    if(counterio==1)
    {
        countersys++;
     dc4:	80 91 0a 01 	lds	r24, 0x010A
     dc8:	90 91 0b 01 	lds	r25, 0x010B
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	90 93 0b 01 	sts	0x010B, r25
     dd2:	80 93 0a 01 	sts	0x010A, r24
        counterio=0;
     dd6:	10 92 0d 01 	sts	0x010D, r1
     dda:	10 92 0c 01 	sts	0x010C, r1
     dde:	b7 cf       	rjmp	.-146    	; 0xd4e <__vector_14+0x34>

00000de0 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     de0:	80 ff       	sbrs	r24, 0
     de2:	11 c0       	rjmp	.+34     	; 0xe06 <set_color+0x26>
        DDRD |= (1<<5);
     de4:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     de6:	81 ff       	sbrs	r24, 1
     de8:	11 c0       	rjmp	.+34     	; 0xe0c <set_color+0x2c>
        DDRD |= (1<<4);
     dea:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     dec:	82 ff       	sbrs	r24, 2
     dee:	11 c0       	rjmp	.+34     	; 0xe12 <set_color+0x32>
        DDRC |= (1<<3);
     df0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     df2:	83 ff       	sbrs	r24, 3
     df4:	11 c0       	rjmp	.+34     	; 0xe18 <set_color+0x38>
        DDRC |= (1<<2);
     df6:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     df8:	84 ff       	sbrs	r24, 4
     dfa:	11 c0       	rjmp	.+34     	; 0xe1e <set_color+0x3e>
        DDRC |= (1<<5);
     dfc:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     dfe:	85 fd       	sbrc	r24, 5
     e00:	11 c0       	rjmp	.+34     	; 0xe24 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e02:	3c 98       	cbi	0x07, 4	; 7
     e04:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     e06:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e08:	81 fd       	sbrc	r24, 1
     e0a:	ef cf       	rjmp	.-34     	; 0xdea <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     e0c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e0e:	82 fd       	sbrc	r24, 2
     e10:	ef cf       	rjmp	.-34     	; 0xdf0 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     e12:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     e14:	83 fd       	sbrc	r24, 3
     e16:	ef cf       	rjmp	.-34     	; 0xdf6 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     e18:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     e1a:	84 fd       	sbrc	r24, 4
     e1c:	ef cf       	rjmp	.-34     	; 0xdfc <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     e1e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     e20:	85 ff       	sbrs	r24, 5
     e22:	ef cf       	rjmp	.-34     	; 0xe02 <set_color+0x22>
        DDRC |= (1<<4);
     e24:	3c 9a       	sbi	0x07, 4	; 7
     e26:	08 95       	ret

00000e28 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	8f 93       	push	r24
     e34:	9f 93       	push	r25
    rx_timer_off();
     e36:	10 92 81 00 	sts	0x0081, r1
     e3a:	10 92 85 00 	sts	0x0085, r1
     e3e:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 12 01 	sts	0x0112, r24
    rx_leadingbyte = 1;
     e48:	80 93 56 01 	sts	0x0156, r24
    rx_busy = 0;
     e4c:	10 92 39 01 	sts	0x0139, r1
    adc_trigger_high_gain();
     e50:	10 92 7c 00 	sts	0x007C, r1
     e54:	93 ea       	ldi	r25, 0xA3	; 163
     e56:	90 93 7a 00 	sts	0x007A, r25
     e5a:	80 93 7b 00 	sts	0x007B, r24
}
     e5e:	9f 91       	pop	r25
     e60:	8f 91       	pop	r24
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	0f 90       	pop	r0
     e68:	1f 90       	pop	r1
     e6a:	18 95       	reti

00000e6c <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     e6c:	1f 92       	push	r1
     e6e:	0f 92       	push	r0
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	0f 92       	push	r0
     e74:	11 24       	eor	r1, r1
     e76:	2f 93       	push	r18
     e78:	3f 93       	push	r19
     e7a:	4f 93       	push	r20
     e7c:	5f 93       	push	r21
     e7e:	6f 93       	push	r22
     e80:	7f 93       	push	r23
     e82:	8f 93       	push	r24
     e84:	9f 93       	push	r25
     e86:	af 93       	push	r26
     e88:	bf 93       	push	r27
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	ef 93       	push	r30
     e90:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     e92:	20 91 84 00 	lds	r18, 0x0084
     e96:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     e9a:	41 e0       	ldi	r20, 0x01	; 1
     e9c:	40 93 39 01 	sts	0x0139, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     ea0:	80 91 12 01 	lds	r24, 0x0112
     ea4:	88 23       	and	r24, r24
     ea6:	a9 f1       	breq	.+106    	; 0xf12 <__vector_23+0xa6>
        rx_timer_on();
     ea8:	10 92 85 00 	sts	0x0085, r1
     eac:	10 92 84 00 	sts	0x0084, r1
     eb0:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     eb4:	10 92 6a 01 	sts	0x016A, r1
        rx_leadingbit = 0;
     eb8:	10 92 12 01 	sts	0x0112, r1
        if (rx_leadingbyte) {
     ebc:	80 91 56 01 	lds	r24, 0x0156
     ec0:	88 23       	and	r24, r24
     ec2:	a1 f0       	breq	.+40     	; 0xeec <__vector_23+0x80>
            adc_finish_conversion();
     ec4:	80 91 7a 00 	lds	r24, 0x007A
     ec8:	86 fd       	sbrc	r24, 6
     eca:	fc cf       	rjmp	.-8      	; 0xec4 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     ecc:	80 91 78 00 	lds	r24, 0x0078
     ed0:	90 91 79 00 	lds	r25, 0x0079
     ed4:	90 93 34 01 	sts	0x0134, r25
     ed8:	80 93 33 01 	sts	0x0133, r24
            adc_trigger_low_gain();
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	80 93 7c 00 	sts	0x007C, r24
     ee2:	93 ea       	ldi	r25, 0xA3	; 163
     ee4:	90 93 7a 00 	sts	0x007A, r25
     ee8:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     eec:	ff 91       	pop	r31
     eee:	ef 91       	pop	r30
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	bf 91       	pop	r27
     ef6:	af 91       	pop	r26
     ef8:	9f 91       	pop	r25
     efa:	8f 91       	pop	r24
     efc:	7f 91       	pop	r23
     efe:	6f 91       	pop	r22
     f00:	5f 91       	pop	r21
     f02:	4f 91       	pop	r20
     f04:	3f 91       	pop	r19
     f06:	2f 91       	pop	r18
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	0f 90       	pop	r0
     f0e:	1f 90       	pop	r1
     f10:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     f12:	c9 01       	movw	r24, r18
     f14:	87 58       	subi	r24, 0x87	; 135
     f16:	91 09       	sbc	r25, r1
     f18:	84 37       	cpi	r24, 0x74	; 116
     f1a:	99 40       	sbci	r25, 0x09	; 9
     f1c:	08 f0       	brcs	.+2      	; 0xf20 <__vector_23+0xb4>
     f1e:	4f c0       	rjmp	.+158    	; 0xfbe <__vector_23+0x152>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     f20:	26 58       	subi	r18, 0x86	; 134
     f22:	31 09       	sbc	r19, r1
     f24:	a4 ef       	ldi	r26, 0xF4	; 244
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__umulhisi3>
     f2c:	aa 27       	eor	r26, r26
     f2e:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     f30:	88 30       	cpi	r24, 0x08	; 8
     f32:	08 f4       	brcc	.+2      	; 0xf36 <__vector_23+0xca>
     f34:	7b c0       	rjmp	.+246    	; 0x102c <__vector_23+0x1c0>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     f36:	40 93 12 01 	sts	0x0112, r20
                if (rx_leadingbyte) {
     f3a:	80 91 56 01 	lds	r24, 0x0156
     f3e:	81 11       	cpse	r24, r1
     f40:	52 c0       	rjmp	.+164    	; 0xfe6 <__vector_23+0x17a>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     f42:	80 91 30 01 	lds	r24, 0x0130
     f46:	e8 2f       	mov	r30, r24
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	e4 5a       	subi	r30, 0xA4	; 164
     f4c:	fe 4f       	sbci	r31, 0xFE	; 254
     f4e:	90 91 6a 01 	lds	r25, 0x016A
     f52:	90 83       	st	Z, r25
                    rx_byteindex++;
     f54:	8f 5f       	subi	r24, 0xFF	; 255
     f56:	80 93 30 01 	sts	0x0130, r24
                    if (rx_byteindex == sizeof(message_t)) {
     f5a:	8c 30       	cpi	r24, 0x0C	; 12
     f5c:	39 f6       	brne	.-114    	; 0xeec <__vector_23+0x80>
                        rx_timer_off();
     f5e:	10 92 81 00 	sts	0x0081, r1
     f62:	10 92 85 00 	sts	0x0085, r1
     f66:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
     f6a:	40 93 56 01 	sts	0x0156, r20
                        rx_busy = 0;
     f6e:	10 92 39 01 	sts	0x0139, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
     f72:	c0 91 66 01 	lds	r28, 0x0166
     f76:	d0 91 67 01 	lds	r29, 0x0167
     f7a:	8c e5       	ldi	r24, 0x5C	; 92
     f7c:	91 e0       	ldi	r25, 0x01	; 1
     f7e:	0e 94 39 09 	call	0x1272	; 0x1272 <message_crc>
     f82:	c8 17       	cp	r28, r24
     f84:	d9 07       	cpc	r29, r25
     f86:	09 f0       	breq	.+2      	; 0xf8a <__vector_23+0x11e>
     f88:	b1 cf       	rjmp	.-158    	; 0xeec <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     f8a:	80 91 65 01 	lds	r24, 0x0165
     f8e:	87 ff       	sbrs	r24, 7
     f90:	5e c0       	rjmp	.+188    	; 0x104e <__vector_23+0x1e2>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     f92:	98 e7       	ldi	r25, 0x78	; 120
     f94:	98 0f       	add	r25, r24
     f96:	93 30       	cpi	r25, 0x03	; 3
     f98:	30 f0       	brcs	.+12     	; 0xfa6 <__vector_23+0x13a>
        motors_off();
     f9a:	53 98       	cbi	0x0a, 3	; 10
     f9c:	23 98       	cbi	0x04, 3	; 4
     f9e:	10 92 b4 00 	sts	0x00B4, r1
     fa2:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	fc 01       	movw	r30, r24
     faa:	e0 58       	subi	r30, 0x80	; 128
     fac:	f1 09       	sbc	r31, r1
     fae:	eb 30       	cpi	r30, 0x0B	; 11
     fb0:	f1 05       	cpc	r31, r1
     fb2:	08 f0       	brcs	.+2      	; 0xfb6 <__vector_23+0x14a>
     fb4:	9b cf       	rjmp	.-202    	; 0xeec <__vector_23+0x80>
     fb6:	e5 5c       	subi	r30, 0xC5	; 197
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
     fbe:	10 92 81 00 	sts	0x0081, r1
     fc2:	10 92 85 00 	sts	0x0085, r1
     fc6:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
     fca:	40 93 12 01 	sts	0x0112, r20
            rx_leadingbyte = 1;
     fce:	40 93 56 01 	sts	0x0156, r20
            rx_busy = 0;
     fd2:	10 92 39 01 	sts	0x0139, r1
            adc_trigger_high_gain();
     fd6:	10 92 7c 00 	sts	0x007C, r1
     fda:	83 ea       	ldi	r24, 0xA3	; 163
     fdc:	80 93 7a 00 	sts	0x007A, r24
     fe0:	40 93 7b 00 	sts	0x007B, r20
     fe4:	83 cf       	rjmp	.-250    	; 0xeec <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
     fe6:	80 91 7a 00 	lds	r24, 0x007A
     fea:	86 fd       	sbrc	r24, 6
     fec:	fc cf       	rjmp	.-8      	; 0xfe6 <__vector_23+0x17a>
                    rx_dist.low_gain = ADCW;
     fee:	80 91 78 00 	lds	r24, 0x0078
     ff2:	90 91 79 00 	lds	r25, 0x0079
     ff6:	90 93 32 01 	sts	0x0132, r25
     ffa:	80 93 31 01 	sts	0x0131, r24
                    adc_trigger_high_gain();
     ffe:	10 92 7c 00 	sts	0x007C, r1
    1002:	83 ea       	ldi	r24, 0xA3	; 163
    1004:	80 93 7a 00 	sts	0x007A, r24
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    100e:	90 91 6a 01 	lds	r25, 0x016A
    1012:	99 23       	and	r25, r25
    1014:	b9 f0       	breq	.+46     	; 0x1044 <__vector_23+0x1d8>
                        rx_timer_off();
    1016:	10 92 81 00 	sts	0x0081, r1
    101a:	10 92 85 00 	sts	0x0085, r1
    101e:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1022:	80 93 56 01 	sts	0x0156, r24
                        rx_busy = 0;
    1026:	10 92 39 01 	sts	0x0139, r1
    102a:	60 cf       	rjmp	.-320    	; 0xeec <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    102c:	21 e0       	ldi	r18, 0x01	; 1
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <__vector_23+0x1c8>
    1032:	22 0f       	add	r18, r18
    1034:	8a 95       	dec	r24
    1036:	ea f7       	brpl	.-6      	; 0x1032 <__vector_23+0x1c6>
    1038:	80 91 6a 01 	lds	r24, 0x016A
    103c:	82 2b       	or	r24, r18
    103e:	80 93 6a 01 	sts	0x016A, r24
    1042:	54 cf       	rjmp	.-344    	; 0xeec <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1044:	10 92 56 01 	sts	0x0156, r1
                        rx_byteindex = 0;
    1048:	10 92 30 01 	sts	0x0130, r1
    104c:	4f cf       	rjmp	.-354    	; 0xeec <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    104e:	e0 91 05 01 	lds	r30, 0x0105
    1052:	f0 91 06 01 	lds	r31, 0x0106
    1056:	61 e3       	ldi	r22, 0x31	; 49
    1058:	71 e0       	ldi	r23, 0x01	; 1
    105a:	8c e5       	ldi	r24, 0x5C	; 92
    105c:	91 e0       	ldi	r25, 0x01	; 1
    105e:	09 95       	icall
    1060:	45 cf       	rjmp	.-374    	; 0xeec <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1062:	80 91 5c 01 	lds	r24, 0x015C
    1066:	82 30       	cpi	r24, 0x02	; 2
    1068:	09 f4       	brne	.+2      	; 0x106c <__vector_23+0x200>
    106a:	dc c0       	rjmp	.+440    	; 0x1224 <__vector_23+0x3b8>
    106c:	08 f4       	brcc	.+2      	; 0x1070 <__vector_23+0x204>
    106e:	b9 c0       	rjmp	.+370    	; 0x11e2 <__vector_23+0x376>
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	09 f4       	brne	.+2      	; 0x1076 <__vector_23+0x20a>
    1074:	c5 c0       	rjmp	.+394    	; 0x1200 <__vector_23+0x394>
    1076:	84 30       	cpi	r24, 0x04	; 4
    1078:	09 f0       	breq	.+2      	; 0x107c <__vector_23+0x210>
    107a:	b0 c0       	rjmp	.+352    	; 0x11dc <__vector_23+0x370>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    107c:	80 91 0f 01 	lds	r24, 0x010F
    1080:	90 91 62 01 	lds	r25, 0x0162
    1084:	83 30       	cpi	r24, 0x03	; 3
    1086:	09 f4       	brne	.+2      	; 0x108a <__vector_23+0x21e>
    1088:	e2 c0       	rjmp	.+452    	; 0x124e <__vector_23+0x3e2>
    108a:	80 91 61 01 	lds	r24, 0x0161
                        prev_motion = MOVE_STOP;
    108e:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_STRAIGHT;
    1092:	23 e0       	ldi	r18, 0x03	; 3
    1094:	20 93 0f 01 	sts	0x010F, r18
                        kilo_straight_left = calibmsg->straight_left;
    1098:	80 93 6d 01 	sts	0x016D, r24
                        kilo_straight_right = calibmsg->straight_right;
    109c:	90 93 6e 01 	sts	0x016E, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    10a0:	80 91 11 01 	lds	r24, 0x0111
    10a4:	86 30       	cpi	r24, 0x06	; 6
    10a6:	09 f4       	brne	.+2      	; 0x10aa <__vector_23+0x23e>
    10a8:	21 cf       	rjmp	.-446    	; 0xeec <__vector_23+0x80>
                motors_on();
    10aa:	53 9a       	sbi	0x0a, 3	; 10
    10ac:	23 9a       	sbi	0x04, 3	; 4
    10ae:	10 92 b4 00 	sts	0x00B4, r1
    10b2:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    10b6:	86 e0       	ldi	r24, 0x06	; 6
    10b8:	80 93 11 01 	sts	0x0111, r24
    10bc:	17 cf       	rjmp	.-466    	; 0xeec <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    10be:	80 91 11 01 	lds	r24, 0x0111
    10c2:	86 30       	cpi	r24, 0x06	; 6
    10c4:	99 f0       	breq	.+38     	; 0x10ec <__vector_23+0x280>
                motors_on();
    10c6:	53 9a       	sbi	0x0a, 3	; 10
    10c8:	23 9a       	sbi	0x04, 3	; 4
    10ca:	10 92 b4 00 	sts	0x00B4, r1
    10ce:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    10d2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    10d4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    10d6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    10d8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    10da:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    10dc:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    10de:	10 92 0f 01 	sts	0x010F, r1
    10e2:	10 92 10 01 	sts	0x0110, r1
                kilo_state = MOVING;
    10e6:	86 e0       	ldi	r24, 0x06	; 6
    10e8:	80 93 11 01 	sts	0x0111, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	00 90 5c 01 	lds	r0, 0x015C
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <__vector_23+0x28e>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <__vector_23+0x28a>
    10fe:	20 91 6b 01 	lds	r18, 0x016B
    1102:	30 91 6c 01 	lds	r19, 0x016C
    1106:	82 23       	and	r24, r18
    1108:	93 23       	and	r25, r19
    110a:	89 2b       	or	r24, r25
    110c:	09 f0       	breq	.+2      	; 0x1110 <__vector_23+0x2a4>
    110e:	86 c0       	rjmp	.+268    	; 0x121c <__vector_23+0x3b0>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1110:	10 92 0f 01 	sts	0x010F, r1
    1114:	eb ce       	rjmp	.-554    	; 0xeec <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	80 93 11 01 	sts	0x0111, r24
    111c:	e7 ce       	rjmp	.-562    	; 0xeec <__vector_23+0x80>
        case BOOT:
            OS_timers_off();
            bootload();
            break;
        case RESET:
            reset();
    111e:	e0 e0       	ldi	r30, 0x00	; 0
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            OS_timers_off();
    1124:	80 91 6e 00 	lds	r24, 0x006E
    1128:	8d 7f       	andi	r24, 0xFD	; 253
    112a:	80 93 6e 00 	sts	0x006E, r24
    112e:	16 bc       	out	0x26, r1	; 38
            bootload();
    1130:	e0 e0       	ldi	r30, 0x00	; 0
    1132:	f0 e7       	ldi	r31, 0x70	; 112
    1134:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1136:	10 92 11 01 	sts	0x0111, r1
    113a:	d8 ce       	rjmp	.-592    	; 0xeec <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	80 93 11 01 	sts	0x0111, r24
    1142:	d4 ce       	rjmp	.-600    	; 0xeec <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1144:	85 e0       	ldi	r24, 0x05	; 5
    1146:	80 93 11 01 	sts	0x0111, r24
    114a:	d0 ce       	rjmp	.-608    	; 0xeec <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    114c:	80 91 11 01 	lds	r24, 0x0111
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	09 f4       	brne	.+2      	; 0x1156 <__vector_23+0x2ea>
    1154:	cb ce       	rjmp	.-618    	; 0xeec <__vector_23+0x80>
    1156:	80 91 11 01 	lds	r24, 0x0111
    115a:	84 30       	cpi	r24, 0x04	; 4
    115c:	09 f4       	brne	.+2      	; 0x1160 <__vector_23+0x2f4>
    115e:	c6 ce       	rjmp	.-628    	; 0xeec <__vector_23+0x80>
                motors_on();
    1160:	53 9a       	sbi	0x0a, 3	; 10
    1162:	23 9a       	sbi	0x04, 3	; 4
    1164:	10 92 b4 00 	sts	0x00B4, r1
    1168:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    116c:	83 e0       	ldi	r24, 0x03	; 3
    116e:	80 93 11 01 	sts	0x0111, r24
    1172:	bc ce       	rjmp	.-648    	; 0xeec <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1174:	80 91 11 01 	lds	r24, 0x0111
    1178:	86 30       	cpi	r24, 0x06	; 6
    117a:	09 f0       	breq	.+2      	; 0x117e <__vector_23+0x312>
    117c:	b7 ce       	rjmp	.-658    	; 0xeec <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    117e:	60 91 6b 01 	lds	r22, 0x016B
    1182:	80 eb       	ldi	r24, 0xB0	; 176
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 91 0b 	call	0x1722	; 0x1722 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    118a:	60 91 6c 01 	lds	r22, 0x016C
    118e:	81 eb       	ldi	r24, 0xB1	; 177
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 91 0b 	call	0x1722	; 0x1722 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1196:	60 91 6f 01 	lds	r22, 0x016F
    119a:	85 e0       	ldi	r24, 0x05	; 5
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 91 0b 	call	0x1722	; 0x1722 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    11a2:	60 91 5b 01 	lds	r22, 0x015B
    11a6:	89 e0       	ldi	r24, 0x09	; 9
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 91 0b 	call	0x1722	; 0x1722 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    11ae:	60 91 6d 01 	lds	r22, 0x016D
    11b2:	8c e0       	ldi	r24, 0x0C	; 12
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 91 0b 	call	0x1722	; 0x1722 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    11ba:	60 91 6e 01 	lds	r22, 0x016E
    11be:	84 e1       	ldi	r24, 0x14	; 20
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 91 0b 	call	0x1722	; 0x1722 <__eewr_byte_m328p>
                        motors_off();
    11c6:	53 98       	cbi	0x0a, 3	; 10
    11c8:	23 98       	cbi	0x04, 3	; 4
    11ca:	10 92 b4 00 	sts	0x00B4, r1
    11ce:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	80 93 11 01 	sts	0x0111, r24
    11d8:	80 91 5c 01 	lds	r24, 0x015C
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    11dc:	81 11       	cpse	r24, r1
    11de:	60 cf       	rjmp	.-320    	; 0x10a0 <__vector_23+0x234>
    11e0:	85 ce       	rjmp	.-758    	; 0xeec <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    11e2:	88 23       	and	r24, r24
    11e4:	39 f2       	breq	.-114    	; 0x1174 <__vector_23+0x308>
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	c9 f7       	brne	.-14     	; 0x11dc <__vector_23+0x370>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    11ea:	80 91 5d 01 	lds	r24, 0x015D
    11ee:	90 91 5e 01 	lds	r25, 0x015E
    11f2:	90 93 6c 01 	sts	0x016C, r25
    11f6:	80 93 6b 01 	sts	0x016B, r24
                    cur_motion = MOVE_STOP;
    11fa:	10 92 0f 01 	sts	0x010F, r1
    11fe:	50 cf       	rjmp	.-352    	; 0x10a0 <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1200:	80 91 0f 01 	lds	r24, 0x010F
    1204:	82 30       	cpi	r24, 0x02	; 2
    1206:	71 f1       	breq	.+92     	; 0x1264 <__vector_23+0x3f8>
    1208:	80 91 60 01 	lds	r24, 0x0160
                        prev_motion = MOVE_STOP;
    120c:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_RIGHT;
    1210:	92 e0       	ldi	r25, 0x02	; 2
    1212:	90 93 0f 01 	sts	0x010F, r25
                        kilo_turn_right = calibmsg->turn_right;
    1216:	80 93 5b 01 	sts	0x015B, r24
    121a:	42 cf       	rjmp	.-380    	; 0x10a0 <__vector_23+0x234>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	80 93 0f 01 	sts	0x010F, r24
    1222:	64 ce       	rjmp	.-824    	; 0xeec <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1224:	80 91 0f 01 	lds	r24, 0x010F
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	51 f0       	breq	.+20     	; 0x1240 <__vector_23+0x3d4>
    122c:	80 91 5f 01 	lds	r24, 0x015F
                        prev_motion = MOVE_STOP;
    1230:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_LEFT;
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	90 93 0f 01 	sts	0x010F, r25
                        kilo_turn_left = calibmsg->turn_left;
    123a:	80 93 6f 01 	sts	0x016F, r24
    123e:	30 cf       	rjmp	.-416    	; 0x10a0 <__vector_23+0x234>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1240:	80 91 5f 01 	lds	r24, 0x015F
    1244:	90 91 6f 01 	lds	r25, 0x016F
    1248:	89 13       	cpse	r24, r25
    124a:	f2 cf       	rjmp	.-28     	; 0x1230 <__vector_23+0x3c4>
    124c:	29 cf       	rjmp	.-430    	; 0x10a0 <__vector_23+0x234>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    124e:	80 91 6e 01 	lds	r24, 0x016E
    1252:	98 13       	cpse	r25, r24
    1254:	1a cf       	rjmp	.-460    	; 0x108a <__vector_23+0x21e>
    1256:	80 91 61 01 	lds	r24, 0x0161
    125a:	20 91 6d 01 	lds	r18, 0x016D
    125e:	82 13       	cpse	r24, r18
    1260:	16 cf       	rjmp	.-468    	; 0x108e <__vector_23+0x222>
    1262:	1e cf       	rjmp	.-452    	; 0x10a0 <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1264:	80 91 60 01 	lds	r24, 0x0160
    1268:	90 91 5b 01 	lds	r25, 0x015B
    126c:	89 13       	cpse	r24, r25
    126e:	ce cf       	rjmp	.-100    	; 0x120c <__vector_23+0x3a0>
    1270:	17 cf       	rjmp	.-466    	; 0x10a0 <__vector_23+0x234>

00001272 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1272:	fc 01       	movw	r30, r24
    1274:	2a e0       	ldi	r18, 0x0A	; 10
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    127a:	31 91       	ld	r19, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    127c:	83 27       	eor	r24, r19
    127e:	08 2e       	mov	r0, r24
    1280:	82 95       	swap	r24
    1282:	80 7f       	andi	r24, 0xF0	; 240
    1284:	80 25       	eor	r24, r0
    1286:	09 2e       	mov	r0, r25
    1288:	98 2f       	mov	r25, r24
    128a:	82 95       	swap	r24
    128c:	8f 70       	andi	r24, 0x0F	; 15
    128e:	08 26       	eor	r0, r24
    1290:	86 95       	lsr	r24
    1292:	98 27       	eor	r25, r24
    1294:	89 27       	eor	r24, r25
    1296:	88 0f       	add	r24, r24
    1298:	88 0f       	add	r24, r24
    129a:	88 0f       	add	r24, r24
    129c:	80 25       	eor	r24, r0
    129e:	21 50       	subi	r18, 0x01	; 1

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    12a0:	61 f7       	brne	.-40     	; 0x127a <message_crc+0x8>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    12a2:	08 95       	ret

000012a4 <main>:
}

int main() {
    kilo_init();
    12a4:	0e 94 82 00 	call	0x104	; 0x104 <kilo_init>
    kilo_start(setup, loop);
    12a8:	6f e6       	ldi	r22, 0x6F	; 111
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	8e e6       	ldi	r24, 0x6E	; 110
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <kilo_start>

    return 0;
}
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	08 95       	ret

000012ba <__umulhisi3>:
    12ba:	a2 9f       	mul	r26, r18
    12bc:	b0 01       	movw	r22, r0
    12be:	b3 9f       	mul	r27, r19
    12c0:	c0 01       	movw	r24, r0
    12c2:	a3 9f       	mul	r26, r19
    12c4:	70 0d       	add	r23, r0
    12c6:	81 1d       	adc	r24, r1
    12c8:	11 24       	eor	r1, r1
    12ca:	91 1d       	adc	r25, r1
    12cc:	b2 9f       	mul	r27, r18
    12ce:	70 0d       	add	r23, r0
    12d0:	81 1d       	adc	r24, r1
    12d2:	11 24       	eor	r1, r1
    12d4:	91 1d       	adc	r25, r1
    12d6:	08 95       	ret

000012d8 <__divmodhi4>:
    12d8:	97 fb       	bst	r25, 7
    12da:	07 2e       	mov	r0, r23
    12dc:	16 f4       	brtc	.+4      	; 0x12e2 <__divmodhi4+0xa>
    12de:	00 94       	com	r0
    12e0:	07 d0       	rcall	.+14     	; 0x12f0 <__divmodhi4_neg1>
    12e2:	77 fd       	sbrc	r23, 7
    12e4:	09 d0       	rcall	.+18     	; 0x12f8 <__divmodhi4_neg2>
    12e6:	0e 94 86 09 	call	0x130c	; 0x130c <__udivmodhi4>
    12ea:	07 fc       	sbrc	r0, 7
    12ec:	05 d0       	rcall	.+10     	; 0x12f8 <__divmodhi4_neg2>
    12ee:	3e f4       	brtc	.+14     	; 0x12fe <__divmodhi4_exit>

000012f0 <__divmodhi4_neg1>:
    12f0:	90 95       	com	r25
    12f2:	81 95       	neg	r24
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	08 95       	ret

000012f8 <__divmodhi4_neg2>:
    12f8:	70 95       	com	r23
    12fa:	61 95       	neg	r22
    12fc:	7f 4f       	sbci	r23, 0xFF	; 255

000012fe <__divmodhi4_exit>:
    12fe:	08 95       	ret

00001300 <__tablejump2__>:
    1300:	ee 0f       	add	r30, r30
    1302:	ff 1f       	adc	r31, r31

00001304 <__tablejump__>:
    1304:	05 90       	lpm	r0, Z+
    1306:	f4 91       	lpm	r31, Z
    1308:	e0 2d       	mov	r30, r0
    130a:	09 94       	ijmp

0000130c <__udivmodhi4>:
    130c:	aa 1b       	sub	r26, r26
    130e:	bb 1b       	sub	r27, r27
    1310:	51 e1       	ldi	r21, 0x11	; 17
    1312:	07 c0       	rjmp	.+14     	; 0x1322 <__udivmodhi4_ep>

00001314 <__udivmodhi4_loop>:
    1314:	aa 1f       	adc	r26, r26
    1316:	bb 1f       	adc	r27, r27
    1318:	a6 17       	cp	r26, r22
    131a:	b7 07       	cpc	r27, r23
    131c:	10 f0       	brcs	.+4      	; 0x1322 <__udivmodhi4_ep>
    131e:	a6 1b       	sub	r26, r22
    1320:	b7 0b       	sbc	r27, r23

00001322 <__udivmodhi4_ep>:
    1322:	88 1f       	adc	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	5a 95       	dec	r21
    1328:	a9 f7       	brne	.-22     	; 0x1314 <__udivmodhi4_loop>
    132a:	80 95       	com	r24
    132c:	90 95       	com	r25
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	08 95       	ret

00001334 <__subsf3>:
    1334:	50 58       	subi	r21, 0x80	; 128

00001336 <__addsf3>:
    1336:	bb 27       	eor	r27, r27
    1338:	aa 27       	eor	r26, r26
    133a:	0e d0       	rcall	.+28     	; 0x1358 <__addsf3x>
    133c:	4d c1       	rjmp	.+666    	; 0x15d8 <__fp_round>
    133e:	3e d1       	rcall	.+636    	; 0x15bc <__fp_pscA>
    1340:	30 f0       	brcs	.+12     	; 0x134e <__addsf3+0x18>
    1342:	43 d1       	rcall	.+646    	; 0x15ca <__fp_pscB>
    1344:	20 f0       	brcs	.+8      	; 0x134e <__addsf3+0x18>
    1346:	31 f4       	brne	.+12     	; 0x1354 <__addsf3+0x1e>
    1348:	9f 3f       	cpi	r25, 0xFF	; 255
    134a:	11 f4       	brne	.+4      	; 0x1350 <__addsf3+0x1a>
    134c:	1e f4       	brtc	.+6      	; 0x1354 <__addsf3+0x1e>
    134e:	33 c1       	rjmp	.+614    	; 0x15b6 <__fp_nan>
    1350:	0e f4       	brtc	.+2      	; 0x1354 <__addsf3+0x1e>
    1352:	e0 95       	com	r30
    1354:	e7 fb       	bst	r30, 7
    1356:	29 c1       	rjmp	.+594    	; 0x15aa <__fp_inf>

00001358 <__addsf3x>:
    1358:	e9 2f       	mov	r30, r25
    135a:	4f d1       	rcall	.+670    	; 0x15fa <__fp_split3>
    135c:	80 f3       	brcs	.-32     	; 0x133e <__addsf3+0x8>
    135e:	ba 17       	cp	r27, r26
    1360:	62 07       	cpc	r22, r18
    1362:	73 07       	cpc	r23, r19
    1364:	84 07       	cpc	r24, r20
    1366:	95 07       	cpc	r25, r21
    1368:	18 f0       	brcs	.+6      	; 0x1370 <__addsf3x+0x18>
    136a:	71 f4       	brne	.+28     	; 0x1388 <__addsf3x+0x30>
    136c:	9e f5       	brtc	.+102    	; 0x13d4 <__addsf3x+0x7c>
    136e:	67 c1       	rjmp	.+718    	; 0x163e <__fp_zero>
    1370:	0e f4       	brtc	.+2      	; 0x1374 <__addsf3x+0x1c>
    1372:	e0 95       	com	r30
    1374:	0b 2e       	mov	r0, r27
    1376:	ba 2f       	mov	r27, r26
    1378:	a0 2d       	mov	r26, r0
    137a:	0b 01       	movw	r0, r22
    137c:	b9 01       	movw	r22, r18
    137e:	90 01       	movw	r18, r0
    1380:	0c 01       	movw	r0, r24
    1382:	ca 01       	movw	r24, r20
    1384:	a0 01       	movw	r20, r0
    1386:	11 24       	eor	r1, r1
    1388:	ff 27       	eor	r31, r31
    138a:	59 1b       	sub	r21, r25
    138c:	99 f0       	breq	.+38     	; 0x13b4 <__addsf3x+0x5c>
    138e:	59 3f       	cpi	r21, 0xF9	; 249
    1390:	50 f4       	brcc	.+20     	; 0x13a6 <__addsf3x+0x4e>
    1392:	50 3e       	cpi	r21, 0xE0	; 224
    1394:	68 f1       	brcs	.+90     	; 0x13f0 <__addsf3x+0x98>
    1396:	1a 16       	cp	r1, r26
    1398:	f0 40       	sbci	r31, 0x00	; 0
    139a:	a2 2f       	mov	r26, r18
    139c:	23 2f       	mov	r18, r19
    139e:	34 2f       	mov	r19, r20
    13a0:	44 27       	eor	r20, r20
    13a2:	58 5f       	subi	r21, 0xF8	; 248
    13a4:	f3 cf       	rjmp	.-26     	; 0x138c <__addsf3x+0x34>
    13a6:	46 95       	lsr	r20
    13a8:	37 95       	ror	r19
    13aa:	27 95       	ror	r18
    13ac:	a7 95       	ror	r26
    13ae:	f0 40       	sbci	r31, 0x00	; 0
    13b0:	53 95       	inc	r21
    13b2:	c9 f7       	brne	.-14     	; 0x13a6 <__addsf3x+0x4e>
    13b4:	7e f4       	brtc	.+30     	; 0x13d4 <__addsf3x+0x7c>
    13b6:	1f 16       	cp	r1, r31
    13b8:	ba 0b       	sbc	r27, r26
    13ba:	62 0b       	sbc	r22, r18
    13bc:	73 0b       	sbc	r23, r19
    13be:	84 0b       	sbc	r24, r20
    13c0:	ba f0       	brmi	.+46     	; 0x13f0 <__addsf3x+0x98>
    13c2:	91 50       	subi	r25, 0x01	; 1
    13c4:	a1 f0       	breq	.+40     	; 0x13ee <__addsf3x+0x96>
    13c6:	ff 0f       	add	r31, r31
    13c8:	bb 1f       	adc	r27, r27
    13ca:	66 1f       	adc	r22, r22
    13cc:	77 1f       	adc	r23, r23
    13ce:	88 1f       	adc	r24, r24
    13d0:	c2 f7       	brpl	.-16     	; 0x13c2 <__addsf3x+0x6a>
    13d2:	0e c0       	rjmp	.+28     	; 0x13f0 <__addsf3x+0x98>
    13d4:	ba 0f       	add	r27, r26
    13d6:	62 1f       	adc	r22, r18
    13d8:	73 1f       	adc	r23, r19
    13da:	84 1f       	adc	r24, r20
    13dc:	48 f4       	brcc	.+18     	; 0x13f0 <__addsf3x+0x98>
    13de:	87 95       	ror	r24
    13e0:	77 95       	ror	r23
    13e2:	67 95       	ror	r22
    13e4:	b7 95       	ror	r27
    13e6:	f7 95       	ror	r31
    13e8:	9e 3f       	cpi	r25, 0xFE	; 254
    13ea:	08 f0       	brcs	.+2      	; 0x13ee <__addsf3x+0x96>
    13ec:	b3 cf       	rjmp	.-154    	; 0x1354 <__addsf3+0x1e>
    13ee:	93 95       	inc	r25
    13f0:	88 0f       	add	r24, r24
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <__addsf3x+0x9e>
    13f4:	99 27       	eor	r25, r25
    13f6:	ee 0f       	add	r30, r30
    13f8:	97 95       	ror	r25
    13fa:	87 95       	ror	r24
    13fc:	08 95       	ret

000013fe <__divsf3>:
    13fe:	0c d0       	rcall	.+24     	; 0x1418 <__divsf3x>
    1400:	eb c0       	rjmp	.+470    	; 0x15d8 <__fp_round>
    1402:	e3 d0       	rcall	.+454    	; 0x15ca <__fp_pscB>
    1404:	40 f0       	brcs	.+16     	; 0x1416 <__divsf3+0x18>
    1406:	da d0       	rcall	.+436    	; 0x15bc <__fp_pscA>
    1408:	30 f0       	brcs	.+12     	; 0x1416 <__divsf3+0x18>
    140a:	21 f4       	brne	.+8      	; 0x1414 <__divsf3+0x16>
    140c:	5f 3f       	cpi	r21, 0xFF	; 255
    140e:	19 f0       	breq	.+6      	; 0x1416 <__divsf3+0x18>
    1410:	cc c0       	rjmp	.+408    	; 0x15aa <__fp_inf>
    1412:	51 11       	cpse	r21, r1
    1414:	15 c1       	rjmp	.+554    	; 0x1640 <__fp_szero>
    1416:	cf c0       	rjmp	.+414    	; 0x15b6 <__fp_nan>

00001418 <__divsf3x>:
    1418:	f0 d0       	rcall	.+480    	; 0x15fa <__fp_split3>
    141a:	98 f3       	brcs	.-26     	; 0x1402 <__divsf3+0x4>

0000141c <__divsf3_pse>:
    141c:	99 23       	and	r25, r25
    141e:	c9 f3       	breq	.-14     	; 0x1412 <__divsf3+0x14>
    1420:	55 23       	and	r21, r21
    1422:	b1 f3       	breq	.-20     	; 0x1410 <__divsf3+0x12>
    1424:	95 1b       	sub	r25, r21
    1426:	55 0b       	sbc	r21, r21
    1428:	bb 27       	eor	r27, r27
    142a:	aa 27       	eor	r26, r26
    142c:	62 17       	cp	r22, r18
    142e:	73 07       	cpc	r23, r19
    1430:	84 07       	cpc	r24, r20
    1432:	38 f0       	brcs	.+14     	; 0x1442 <__divsf3_pse+0x26>
    1434:	9f 5f       	subi	r25, 0xFF	; 255
    1436:	5f 4f       	sbci	r21, 0xFF	; 255
    1438:	22 0f       	add	r18, r18
    143a:	33 1f       	adc	r19, r19
    143c:	44 1f       	adc	r20, r20
    143e:	aa 1f       	adc	r26, r26
    1440:	a9 f3       	breq	.-22     	; 0x142c <__divsf3_pse+0x10>
    1442:	33 d0       	rcall	.+102    	; 0x14aa <__divsf3_pse+0x8e>
    1444:	0e 2e       	mov	r0, r30
    1446:	3a f0       	brmi	.+14     	; 0x1456 <__divsf3_pse+0x3a>
    1448:	e0 e8       	ldi	r30, 0x80	; 128
    144a:	30 d0       	rcall	.+96     	; 0x14ac <__divsf3_pse+0x90>
    144c:	91 50       	subi	r25, 0x01	; 1
    144e:	50 40       	sbci	r21, 0x00	; 0
    1450:	e6 95       	lsr	r30
    1452:	00 1c       	adc	r0, r0
    1454:	ca f7       	brpl	.-14     	; 0x1448 <__divsf3_pse+0x2c>
    1456:	29 d0       	rcall	.+82     	; 0x14aa <__divsf3_pse+0x8e>
    1458:	fe 2f       	mov	r31, r30
    145a:	27 d0       	rcall	.+78     	; 0x14aa <__divsf3_pse+0x8e>
    145c:	66 0f       	add	r22, r22
    145e:	77 1f       	adc	r23, r23
    1460:	88 1f       	adc	r24, r24
    1462:	bb 1f       	adc	r27, r27
    1464:	26 17       	cp	r18, r22
    1466:	37 07       	cpc	r19, r23
    1468:	48 07       	cpc	r20, r24
    146a:	ab 07       	cpc	r26, r27
    146c:	b0 e8       	ldi	r27, 0x80	; 128
    146e:	09 f0       	breq	.+2      	; 0x1472 <__divsf3_pse+0x56>
    1470:	bb 0b       	sbc	r27, r27
    1472:	80 2d       	mov	r24, r0
    1474:	bf 01       	movw	r22, r30
    1476:	ff 27       	eor	r31, r31
    1478:	93 58       	subi	r25, 0x83	; 131
    147a:	5f 4f       	sbci	r21, 0xFF	; 255
    147c:	2a f0       	brmi	.+10     	; 0x1488 <__divsf3_pse+0x6c>
    147e:	9e 3f       	cpi	r25, 0xFE	; 254
    1480:	51 05       	cpc	r21, r1
    1482:	68 f0       	brcs	.+26     	; 0x149e <__divsf3_pse+0x82>
    1484:	92 c0       	rjmp	.+292    	; 0x15aa <__fp_inf>
    1486:	dc c0       	rjmp	.+440    	; 0x1640 <__fp_szero>
    1488:	5f 3f       	cpi	r21, 0xFF	; 255
    148a:	ec f3       	brlt	.-6      	; 0x1486 <__divsf3_pse+0x6a>
    148c:	98 3e       	cpi	r25, 0xE8	; 232
    148e:	dc f3       	brlt	.-10     	; 0x1486 <__divsf3_pse+0x6a>
    1490:	86 95       	lsr	r24
    1492:	77 95       	ror	r23
    1494:	67 95       	ror	r22
    1496:	b7 95       	ror	r27
    1498:	f7 95       	ror	r31
    149a:	9f 5f       	subi	r25, 0xFF	; 255
    149c:	c9 f7       	brne	.-14     	; 0x1490 <__divsf3_pse+0x74>
    149e:	88 0f       	add	r24, r24
    14a0:	91 1d       	adc	r25, r1
    14a2:	96 95       	lsr	r25
    14a4:	87 95       	ror	r24
    14a6:	97 f9       	bld	r25, 7
    14a8:	08 95       	ret
    14aa:	e1 e0       	ldi	r30, 0x01	; 1
    14ac:	66 0f       	add	r22, r22
    14ae:	77 1f       	adc	r23, r23
    14b0:	88 1f       	adc	r24, r24
    14b2:	bb 1f       	adc	r27, r27
    14b4:	62 17       	cp	r22, r18
    14b6:	73 07       	cpc	r23, r19
    14b8:	84 07       	cpc	r24, r20
    14ba:	ba 07       	cpc	r27, r26
    14bc:	20 f0       	brcs	.+8      	; 0x14c6 <__divsf3_pse+0xaa>
    14be:	62 1b       	sub	r22, r18
    14c0:	73 0b       	sbc	r23, r19
    14c2:	84 0b       	sbc	r24, r20
    14c4:	ba 0b       	sbc	r27, r26
    14c6:	ee 1f       	adc	r30, r30
    14c8:	88 f7       	brcc	.-30     	; 0x14ac <__divsf3_pse+0x90>
    14ca:	e0 95       	com	r30
    14cc:	08 95       	ret

000014ce <__fixsfsi>:
    14ce:	04 d0       	rcall	.+8      	; 0x14d8 <__fixunssfsi>
    14d0:	68 94       	set
    14d2:	b1 11       	cpse	r27, r1
    14d4:	b5 c0       	rjmp	.+362    	; 0x1640 <__fp_szero>
    14d6:	08 95       	ret

000014d8 <__fixunssfsi>:
    14d8:	98 d0       	rcall	.+304    	; 0x160a <__fp_splitA>
    14da:	88 f0       	brcs	.+34     	; 0x14fe <__fixunssfsi+0x26>
    14dc:	9f 57       	subi	r25, 0x7F	; 127
    14de:	90 f0       	brcs	.+36     	; 0x1504 <__fixunssfsi+0x2c>
    14e0:	b9 2f       	mov	r27, r25
    14e2:	99 27       	eor	r25, r25
    14e4:	b7 51       	subi	r27, 0x17	; 23
    14e6:	a0 f0       	brcs	.+40     	; 0x1510 <__fixunssfsi+0x38>
    14e8:	d1 f0       	breq	.+52     	; 0x151e <__fixunssfsi+0x46>
    14ea:	66 0f       	add	r22, r22
    14ec:	77 1f       	adc	r23, r23
    14ee:	88 1f       	adc	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	1a f0       	brmi	.+6      	; 0x14fa <__fixunssfsi+0x22>
    14f4:	ba 95       	dec	r27
    14f6:	c9 f7       	brne	.-14     	; 0x14ea <__fixunssfsi+0x12>
    14f8:	12 c0       	rjmp	.+36     	; 0x151e <__fixunssfsi+0x46>
    14fa:	b1 30       	cpi	r27, 0x01	; 1
    14fc:	81 f0       	breq	.+32     	; 0x151e <__fixunssfsi+0x46>
    14fe:	9f d0       	rcall	.+318    	; 0x163e <__fp_zero>
    1500:	b1 e0       	ldi	r27, 0x01	; 1
    1502:	08 95       	ret
    1504:	9c c0       	rjmp	.+312    	; 0x163e <__fp_zero>
    1506:	67 2f       	mov	r22, r23
    1508:	78 2f       	mov	r23, r24
    150a:	88 27       	eor	r24, r24
    150c:	b8 5f       	subi	r27, 0xF8	; 248
    150e:	39 f0       	breq	.+14     	; 0x151e <__fixunssfsi+0x46>
    1510:	b9 3f       	cpi	r27, 0xF9	; 249
    1512:	cc f3       	brlt	.-14     	; 0x1506 <__fixunssfsi+0x2e>
    1514:	86 95       	lsr	r24
    1516:	77 95       	ror	r23
    1518:	67 95       	ror	r22
    151a:	b3 95       	inc	r27
    151c:	d9 f7       	brne	.-10     	; 0x1514 <__fixunssfsi+0x3c>
    151e:	3e f4       	brtc	.+14     	; 0x152e <__fixunssfsi+0x56>
    1520:	90 95       	com	r25
    1522:	80 95       	com	r24
    1524:	70 95       	com	r23
    1526:	61 95       	neg	r22
    1528:	7f 4f       	sbci	r23, 0xFF	; 255
    152a:	8f 4f       	sbci	r24, 0xFF	; 255
    152c:	9f 4f       	sbci	r25, 0xFF	; 255
    152e:	08 95       	ret

00001530 <__floatunsisf>:
    1530:	e8 94       	clt
    1532:	09 c0       	rjmp	.+18     	; 0x1546 <__floatsisf+0x12>

00001534 <__floatsisf>:
    1534:	97 fb       	bst	r25, 7
    1536:	3e f4       	brtc	.+14     	; 0x1546 <__floatsisf+0x12>
    1538:	90 95       	com	r25
    153a:	80 95       	com	r24
    153c:	70 95       	com	r23
    153e:	61 95       	neg	r22
    1540:	7f 4f       	sbci	r23, 0xFF	; 255
    1542:	8f 4f       	sbci	r24, 0xFF	; 255
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	99 23       	and	r25, r25
    1548:	a9 f0       	breq	.+42     	; 0x1574 <__floatsisf+0x40>
    154a:	f9 2f       	mov	r31, r25
    154c:	96 e9       	ldi	r25, 0x96	; 150
    154e:	bb 27       	eor	r27, r27
    1550:	93 95       	inc	r25
    1552:	f6 95       	lsr	r31
    1554:	87 95       	ror	r24
    1556:	77 95       	ror	r23
    1558:	67 95       	ror	r22
    155a:	b7 95       	ror	r27
    155c:	f1 11       	cpse	r31, r1
    155e:	f8 cf       	rjmp	.-16     	; 0x1550 <__floatsisf+0x1c>
    1560:	fa f4       	brpl	.+62     	; 0x15a0 <__floatsisf+0x6c>
    1562:	bb 0f       	add	r27, r27
    1564:	11 f4       	brne	.+4      	; 0x156a <__floatsisf+0x36>
    1566:	60 ff       	sbrs	r22, 0
    1568:	1b c0       	rjmp	.+54     	; 0x15a0 <__floatsisf+0x6c>
    156a:	6f 5f       	subi	r22, 0xFF	; 255
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	8f 4f       	sbci	r24, 0xFF	; 255
    1570:	9f 4f       	sbci	r25, 0xFF	; 255
    1572:	16 c0       	rjmp	.+44     	; 0x15a0 <__floatsisf+0x6c>
    1574:	88 23       	and	r24, r24
    1576:	11 f0       	breq	.+4      	; 0x157c <__floatsisf+0x48>
    1578:	96 e9       	ldi	r25, 0x96	; 150
    157a:	11 c0       	rjmp	.+34     	; 0x159e <__floatsisf+0x6a>
    157c:	77 23       	and	r23, r23
    157e:	21 f0       	breq	.+8      	; 0x1588 <__floatsisf+0x54>
    1580:	9e e8       	ldi	r25, 0x8E	; 142
    1582:	87 2f       	mov	r24, r23
    1584:	76 2f       	mov	r23, r22
    1586:	05 c0       	rjmp	.+10     	; 0x1592 <__floatsisf+0x5e>
    1588:	66 23       	and	r22, r22
    158a:	71 f0       	breq	.+28     	; 0x15a8 <__floatsisf+0x74>
    158c:	96 e8       	ldi	r25, 0x86	; 134
    158e:	86 2f       	mov	r24, r22
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	2a f0       	brmi	.+10     	; 0x15a0 <__floatsisf+0x6c>
    1596:	9a 95       	dec	r25
    1598:	66 0f       	add	r22, r22
    159a:	77 1f       	adc	r23, r23
    159c:	88 1f       	adc	r24, r24
    159e:	da f7       	brpl	.-10     	; 0x1596 <__floatsisf+0x62>
    15a0:	88 0f       	add	r24, r24
    15a2:	96 95       	lsr	r25
    15a4:	87 95       	ror	r24
    15a6:	97 f9       	bld	r25, 7
    15a8:	08 95       	ret

000015aa <__fp_inf>:
    15aa:	97 f9       	bld	r25, 7
    15ac:	9f 67       	ori	r25, 0x7F	; 127
    15ae:	80 e8       	ldi	r24, 0x80	; 128
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	08 95       	ret

000015b6 <__fp_nan>:
    15b6:	9f ef       	ldi	r25, 0xFF	; 255
    15b8:	80 ec       	ldi	r24, 0xC0	; 192
    15ba:	08 95       	ret

000015bc <__fp_pscA>:
    15bc:	00 24       	eor	r0, r0
    15be:	0a 94       	dec	r0
    15c0:	16 16       	cp	r1, r22
    15c2:	17 06       	cpc	r1, r23
    15c4:	18 06       	cpc	r1, r24
    15c6:	09 06       	cpc	r0, r25
    15c8:	08 95       	ret

000015ca <__fp_pscB>:
    15ca:	00 24       	eor	r0, r0
    15cc:	0a 94       	dec	r0
    15ce:	12 16       	cp	r1, r18
    15d0:	13 06       	cpc	r1, r19
    15d2:	14 06       	cpc	r1, r20
    15d4:	05 06       	cpc	r0, r21
    15d6:	08 95       	ret

000015d8 <__fp_round>:
    15d8:	09 2e       	mov	r0, r25
    15da:	03 94       	inc	r0
    15dc:	00 0c       	add	r0, r0
    15de:	11 f4       	brne	.+4      	; 0x15e4 <__fp_round+0xc>
    15e0:	88 23       	and	r24, r24
    15e2:	52 f0       	brmi	.+20     	; 0x15f8 <__fp_round+0x20>
    15e4:	bb 0f       	add	r27, r27
    15e6:	40 f4       	brcc	.+16     	; 0x15f8 <__fp_round+0x20>
    15e8:	bf 2b       	or	r27, r31
    15ea:	11 f4       	brne	.+4      	; 0x15f0 <__fp_round+0x18>
    15ec:	60 ff       	sbrs	r22, 0
    15ee:	04 c0       	rjmp	.+8      	; 0x15f8 <__fp_round+0x20>
    15f0:	6f 5f       	subi	r22, 0xFF	; 255
    15f2:	7f 4f       	sbci	r23, 0xFF	; 255
    15f4:	8f 4f       	sbci	r24, 0xFF	; 255
    15f6:	9f 4f       	sbci	r25, 0xFF	; 255
    15f8:	08 95       	ret

000015fa <__fp_split3>:
    15fa:	57 fd       	sbrc	r21, 7
    15fc:	90 58       	subi	r25, 0x80	; 128
    15fe:	44 0f       	add	r20, r20
    1600:	55 1f       	adc	r21, r21
    1602:	59 f0       	breq	.+22     	; 0x161a <__fp_splitA+0x10>
    1604:	5f 3f       	cpi	r21, 0xFF	; 255
    1606:	71 f0       	breq	.+28     	; 0x1624 <__fp_splitA+0x1a>
    1608:	47 95       	ror	r20

0000160a <__fp_splitA>:
    160a:	88 0f       	add	r24, r24
    160c:	97 fb       	bst	r25, 7
    160e:	99 1f       	adc	r25, r25
    1610:	61 f0       	breq	.+24     	; 0x162a <__fp_splitA+0x20>
    1612:	9f 3f       	cpi	r25, 0xFF	; 255
    1614:	79 f0       	breq	.+30     	; 0x1634 <__fp_splitA+0x2a>
    1616:	87 95       	ror	r24
    1618:	08 95       	ret
    161a:	12 16       	cp	r1, r18
    161c:	13 06       	cpc	r1, r19
    161e:	14 06       	cpc	r1, r20
    1620:	55 1f       	adc	r21, r21
    1622:	f2 cf       	rjmp	.-28     	; 0x1608 <__fp_split3+0xe>
    1624:	46 95       	lsr	r20
    1626:	f1 df       	rcall	.-30     	; 0x160a <__fp_splitA>
    1628:	08 c0       	rjmp	.+16     	; 0x163a <__fp_splitA+0x30>
    162a:	16 16       	cp	r1, r22
    162c:	17 06       	cpc	r1, r23
    162e:	18 06       	cpc	r1, r24
    1630:	99 1f       	adc	r25, r25
    1632:	f1 cf       	rjmp	.-30     	; 0x1616 <__fp_splitA+0xc>
    1634:	86 95       	lsr	r24
    1636:	71 05       	cpc	r23, r1
    1638:	61 05       	cpc	r22, r1
    163a:	08 94       	sec
    163c:	08 95       	ret

0000163e <__fp_zero>:
    163e:	e8 94       	clt

00001640 <__fp_szero>:
    1640:	bb 27       	eor	r27, r27
    1642:	66 27       	eor	r22, r22
    1644:	77 27       	eor	r23, r23
    1646:	cb 01       	movw	r24, r22
    1648:	97 f9       	bld	r25, 7
    164a:	08 95       	ret

0000164c <__mulsf3>:
    164c:	0b d0       	rcall	.+22     	; 0x1664 <__mulsf3x>
    164e:	c4 cf       	rjmp	.-120    	; 0x15d8 <__fp_round>
    1650:	b5 df       	rcall	.-150    	; 0x15bc <__fp_pscA>
    1652:	28 f0       	brcs	.+10     	; 0x165e <__mulsf3+0x12>
    1654:	ba df       	rcall	.-140    	; 0x15ca <__fp_pscB>
    1656:	18 f0       	brcs	.+6      	; 0x165e <__mulsf3+0x12>
    1658:	95 23       	and	r25, r21
    165a:	09 f0       	breq	.+2      	; 0x165e <__mulsf3+0x12>
    165c:	a6 cf       	rjmp	.-180    	; 0x15aa <__fp_inf>
    165e:	ab cf       	rjmp	.-170    	; 0x15b6 <__fp_nan>
    1660:	11 24       	eor	r1, r1
    1662:	ee cf       	rjmp	.-36     	; 0x1640 <__fp_szero>

00001664 <__mulsf3x>:
    1664:	ca df       	rcall	.-108    	; 0x15fa <__fp_split3>
    1666:	a0 f3       	brcs	.-24     	; 0x1650 <__mulsf3+0x4>

00001668 <__mulsf3_pse>:
    1668:	95 9f       	mul	r25, r21
    166a:	d1 f3       	breq	.-12     	; 0x1660 <__mulsf3+0x14>
    166c:	95 0f       	add	r25, r21
    166e:	50 e0       	ldi	r21, 0x00	; 0
    1670:	55 1f       	adc	r21, r21
    1672:	62 9f       	mul	r22, r18
    1674:	f0 01       	movw	r30, r0
    1676:	72 9f       	mul	r23, r18
    1678:	bb 27       	eor	r27, r27
    167a:	f0 0d       	add	r31, r0
    167c:	b1 1d       	adc	r27, r1
    167e:	63 9f       	mul	r22, r19
    1680:	aa 27       	eor	r26, r26
    1682:	f0 0d       	add	r31, r0
    1684:	b1 1d       	adc	r27, r1
    1686:	aa 1f       	adc	r26, r26
    1688:	64 9f       	mul	r22, r20
    168a:	66 27       	eor	r22, r22
    168c:	b0 0d       	add	r27, r0
    168e:	a1 1d       	adc	r26, r1
    1690:	66 1f       	adc	r22, r22
    1692:	82 9f       	mul	r24, r18
    1694:	22 27       	eor	r18, r18
    1696:	b0 0d       	add	r27, r0
    1698:	a1 1d       	adc	r26, r1
    169a:	62 1f       	adc	r22, r18
    169c:	73 9f       	mul	r23, r19
    169e:	b0 0d       	add	r27, r0
    16a0:	a1 1d       	adc	r26, r1
    16a2:	62 1f       	adc	r22, r18
    16a4:	83 9f       	mul	r24, r19
    16a6:	a0 0d       	add	r26, r0
    16a8:	61 1d       	adc	r22, r1
    16aa:	22 1f       	adc	r18, r18
    16ac:	74 9f       	mul	r23, r20
    16ae:	33 27       	eor	r19, r19
    16b0:	a0 0d       	add	r26, r0
    16b2:	61 1d       	adc	r22, r1
    16b4:	23 1f       	adc	r18, r19
    16b6:	84 9f       	mul	r24, r20
    16b8:	60 0d       	add	r22, r0
    16ba:	21 1d       	adc	r18, r1
    16bc:	82 2f       	mov	r24, r18
    16be:	76 2f       	mov	r23, r22
    16c0:	6a 2f       	mov	r22, r26
    16c2:	11 24       	eor	r1, r1
    16c4:	9f 57       	subi	r25, 0x7F	; 127
    16c6:	50 40       	sbci	r21, 0x00	; 0
    16c8:	8a f0       	brmi	.+34     	; 0x16ec <__mulsf3_pse+0x84>
    16ca:	e1 f0       	breq	.+56     	; 0x1704 <__mulsf3_pse+0x9c>
    16cc:	88 23       	and	r24, r24
    16ce:	4a f0       	brmi	.+18     	; 0x16e2 <__mulsf3_pse+0x7a>
    16d0:	ee 0f       	add	r30, r30
    16d2:	ff 1f       	adc	r31, r31
    16d4:	bb 1f       	adc	r27, r27
    16d6:	66 1f       	adc	r22, r22
    16d8:	77 1f       	adc	r23, r23
    16da:	88 1f       	adc	r24, r24
    16dc:	91 50       	subi	r25, 0x01	; 1
    16de:	50 40       	sbci	r21, 0x00	; 0
    16e0:	a9 f7       	brne	.-22     	; 0x16cc <__mulsf3_pse+0x64>
    16e2:	9e 3f       	cpi	r25, 0xFE	; 254
    16e4:	51 05       	cpc	r21, r1
    16e6:	70 f0       	brcs	.+28     	; 0x1704 <__mulsf3_pse+0x9c>
    16e8:	60 cf       	rjmp	.-320    	; 0x15aa <__fp_inf>
    16ea:	aa cf       	rjmp	.-172    	; 0x1640 <__fp_szero>
    16ec:	5f 3f       	cpi	r21, 0xFF	; 255
    16ee:	ec f3       	brlt	.-6      	; 0x16ea <__mulsf3_pse+0x82>
    16f0:	98 3e       	cpi	r25, 0xE8	; 232
    16f2:	dc f3       	brlt	.-10     	; 0x16ea <__mulsf3_pse+0x82>
    16f4:	86 95       	lsr	r24
    16f6:	77 95       	ror	r23
    16f8:	67 95       	ror	r22
    16fa:	b7 95       	ror	r27
    16fc:	f7 95       	ror	r31
    16fe:	e7 95       	ror	r30
    1700:	9f 5f       	subi	r25, 0xFF	; 255
    1702:	c1 f7       	brne	.-16     	; 0x16f4 <__mulsf3_pse+0x8c>
    1704:	fe 2b       	or	r31, r30
    1706:	88 0f       	add	r24, r24
    1708:	91 1d       	adc	r25, r1
    170a:	96 95       	lsr	r25
    170c:	87 95       	ror	r24
    170e:	97 f9       	bld	r25, 7
    1710:	08 95       	ret

00001712 <__eerd_byte_m328p>:
    1712:	f9 99       	sbic	0x1f, 1	; 31
    1714:	fe cf       	rjmp	.-4      	; 0x1712 <__eerd_byte_m328p>
    1716:	92 bd       	out	0x22, r25	; 34
    1718:	81 bd       	out	0x21, r24	; 33
    171a:	f8 9a       	sbi	0x1f, 0	; 31
    171c:	99 27       	eor	r25, r25
    171e:	80 b5       	in	r24, 0x20	; 32
    1720:	08 95       	ret

00001722 <__eewr_byte_m328p>:
    1722:	26 2f       	mov	r18, r22

00001724 <__eewr_r18_m328p>:
    1724:	f9 99       	sbic	0x1f, 1	; 31
    1726:	fe cf       	rjmp	.-4      	; 0x1724 <__eewr_r18_m328p>
    1728:	1f ba       	out	0x1f, r1	; 31
    172a:	92 bd       	out	0x22, r25	; 34
    172c:	81 bd       	out	0x21, r24	; 33
    172e:	20 bd       	out	0x20, r18	; 32
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	fa 9a       	sbi	0x1f, 2	; 31
    1736:	f9 9a       	sbi	0x1f, 1	; 31
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	01 96       	adiw	r24, 0x01	; 1
    173c:	08 95       	ret

0000173e <_exit>:
    173e:	f8 94       	cli

00001740 <__stop_program>:
    1740:	ff cf       	rjmp	.-2      	; 0x1740 <__stop_program>
