
build/scheduling.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__vector_6>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__vector_11>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 b3 06 	jmp	0xd66	; 0xd66 <__vector_14>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__vector_23>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	f0 01       	movw	r30, r0
      6a:	6c 02       	muls	r22, r28
      6c:	c4 01       	movw	r24, r8
      6e:	ba 01       	movw	r22, r20
      70:	c1 01       	movw	r24, r2
      72:	4e 02       	muls	r20, r30
      74:	43 02       	muls	r20, r19
      76:	b8 08       	sbc	r11, r8
      78:	9c 07       	cpc	r25, r28
      7a:	9c 07       	cpc	r25, r28
      7c:	b5 08       	sbc	r11, r5
      7e:	c1 08       	sbc	r12, r1
      80:	b1 08       	sbc	r11, r1
      82:	c8 08       	sbc	r12, r8
      84:	c4 08       	sbc	r12, r4
      86:	cc 08       	sbc	r12, r12
      88:	85 08       	sbc	r8, r5
      8a:	57 08       	sbc	r5, r7

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
    wdt_disable();
      9a:	88 e1       	ldi	r24, 0x18	; 24
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	80 93 60 00 	sts	0x0060, r24
      a4:	10 92 60 00 	sts	0x0060, r1
      a8:	0f be       	out	0x3f, r0	; 63

000000aa <__do_copy_data>:
      aa:	11 e0       	ldi	r17, 0x01	; 1
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	ec ed       	ldi	r30, 0xDC	; 220
      b2:	f9 e1       	ldi	r31, 0x19	; 25
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	ae 30       	cpi	r26, 0x0E	; 14
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	ae e0       	ldi	r26, 0x0E	; 14
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	aa 37       	cpi	r26, 0x7A	; 122
      cc:	b1 07       	cpc	r27, r17
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 78 09 	call	0x12f0	; 0x12f0 <main>
      d4:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setup>:
#include <stdlib.h>
#include <util/delay.h>     // delay macros for the delay in infinite loop

void loopfun();

void setup() {
      dc:	08 95       	ret

000000de <loop>:

void loop() {
    // put your main code here, to be run repeatedly
    	// allocate memory for the stack:
	int * p;
	p=malloc(sizeof(int)*64);
      de:	80 e8       	ldi	r24, 0x80	; 128
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	0e 94 af 0b 	call	0x175e	; 0x175e <malloc>
	uint8_t ptrlowC = dum & 0xff;
	uint8_t ptrhighC = (dum >> 8);
	
	//get fake PC
	void *funcptr=loopfun;
	dum=(uint16_t)funcptr;
      e6:	2a e8       	ldi	r18, 0x8A	; 138
      e8:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t pclowC = dum & 0xff;
	uint8_t pchighC = (dum >> 8);
	
	// set stack pointer to allocated memory location -1
	asm(
      ea:	9e bf       	out	0x3e, r25	; 62
      ec:	08 2f       	mov	r16, r24
      ee:	01 50       	subi	r16, 0x01	; 1
      f0:	0d bf       	out	0x3d, r16	; 61
      f2:	c8 2f       	mov	r28, r24
      f4:	d9 2f       	mov	r29, r25
      f6:	2f 93       	push	r18
      f8:	3f 93       	push	r19
      fa:	df 93       	push	r29
      fc:	cf 93       	push	r28
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
	:[ptrhighA]"r" (ptrhighC),[ptrlowA]"r" (ptrlowC), [pclowA] "a" (pclowC),[pchighA]"a"(pchighC)//input operands
	: "r16" //clobbers list
	);
	
	//return;
	asm(
     102:	0f b6       	in	r0, 0x3f	; 63
     104:	f8 94       	cli
     106:	de bf       	out	0x3e, r29	; 62
     108:	0f be       	out	0x3f, r0	; 63
     10a:	cd bf       	out	0x3d, r28	; 61
     10c:	cf 91       	pop	r28
     10e:	df 91       	pop	r29
     110:	08 95       	ret
     112:	ff cf       	rjmp	.-2      	; 0x112 <loop+0x34>

00000114 <loopfun>:

void loopfun()
{
	while(1)
	{
        set_color(RGB(3,0,0));
     114:	83 e0       	ldi	r24, 0x03	; 3
     116:	0e 94 16 07 	call	0xe2c	; 0xe2c <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     11a:	2f ef       	ldi	r18, 0xFF	; 255
     11c:	84 e3       	ldi	r24, 0x34	; 52
     11e:	9c e0       	ldi	r25, 0x0C	; 12
     120:	21 50       	subi	r18, 0x01	; 1
     122:	80 40       	sbci	r24, 0x00	; 0
     124:	90 40       	sbci	r25, 0x00	; 0
     126:	e1 f7       	brne	.-8      	; 0x120 <loopfun+0xc>
     128:	00 c0       	rjmp	.+0      	; 0x12a <loopfun+0x16>
     12a:	00 00       	nop
        _delay_ms(500);
        set_color(RGB(0,0,3));
     12c:	80 e3       	ldi	r24, 0x30	; 48
     12e:	0e 94 16 07 	call	0xe2c	; 0xe2c <set_color>
     132:	2f ef       	ldi	r18, 0xFF	; 255
     134:	84 e3       	ldi	r24, 0x34	; 52
     136:	9c e0       	ldi	r25, 0x0C	; 12
     138:	21 50       	subi	r18, 0x01	; 1
     13a:	80 40       	sbci	r24, 0x00	; 0
     13c:	90 40       	sbci	r25, 0x00	; 0
     13e:	e1 f7       	brne	.-8      	; 0x138 <loopfun+0x24>
     140:	00 c0       	rjmp	.+0      	; 0x142 <loopfun+0x2e>
     142:	00 00       	nop
     144:	e7 cf       	rjmp	.-50     	; 0x114 <loopfun>

00000146 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     146:	08 95       	ret

00000148 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	08 95       	ret

0000014e <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     14e:	08 95       	ret

00000150 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
    cli();
     15e:	f8 94       	cli

    ports_off();
     160:	14 b8       	out	0x04, r1	; 4
     162:	17 b8       	out	0x07, r1	; 7
     164:	1a b8       	out	0x0a, r1	; 10
     166:	15 b8       	out	0x05, r1	; 5
     168:	18 b8       	out	0x08, r1	; 8
     16a:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     16c:	52 9a       	sbi	0x0a, 2	; 10
     16e:	5a 9a       	sbi	0x0b, 2	; 11
    OS_timers_setup();
     170:	14 bc       	out	0x24, r1	; 36
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	85 bd       	out	0x25, r24	; 37
     176:	84 e6       	ldi	r24, 0x64	; 100
     178:	87 bd       	out	0x27, r24	; 39
     17a:	22 e0       	ldi	r18, 0x02	; 2
     17c:	20 93 6e 00 	sts	0x006E, r18
    rx_timer_setup();
     180:	10 92 80 00 	sts	0x0080, r1
     184:	10 92 81 00 	sts	0x0081, r1
     188:	8f e8       	ldi	r24, 0x8F	; 143
     18a:	9b e0       	ldi	r25, 0x0B	; 11
     18c:	90 93 89 00 	sts	0x0089, r25
     190:	80 93 88 00 	sts	0x0088, r24
     194:	20 93 6f 00 	sts	0x006F, r18
    motors_setup();
     198:	53 98       	cbi	0x0a, 3	; 10
     19a:	23 98       	cbi	0x04, 3	; 4
     19c:	81 ea       	ldi	r24, 0xA1	; 161
     19e:	80 93 b0 00 	sts	0x00B0, r24
     1a2:	20 93 b1 00 	sts	0x00B1, r18
     1a6:	10 92 b4 00 	sts	0x00B4, r1
     1aa:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     1ae:	8b e0       	ldi	r24, 0x0B	; 11
     1b0:	80 bf       	out	0x30, r24	; 48
     1b2:	83 e0       	ldi	r24, 0x03	; 3
     1b4:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     1b8:	86 e0       	ldi	r24, 0x06	; 6
     1ba:	80 93 7c 00 	sts	0x007C, r24
     1be:	83 e8       	ldi	r24, 0x83	; 131
     1c0:	80 93 7a 00 	sts	0x007A, r24
     1c4:	80 91 7a 00 	lds	r24, 0x007A
     1c8:	80 64       	ori	r24, 0x40	; 64
     1ca:	80 93 7a 00 	sts	0x007A, r24
     1ce:	80 91 7a 00 	lds	r24, 0x007A
     1d2:	86 fd       	sbrc	r24, 6
     1d4:	fc cf       	rjmp	.-8      	; 0x1ce <kilo_init+0x7e>
    adc_trigger_high_gain();
     1d6:	10 92 7c 00 	sts	0x007C, r1
     1da:	83 ea       	ldi	r24, 0xA3	; 163
     1dc:	80 93 7a 00 	sts	0x007A, r24
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__eerd_byte_m328p>
    if (osccal != 0xFF)
     1ee:	8f 3f       	cpi	r24, 0xFF	; 255
     1f0:	11 f0       	breq	.+4      	; 0x1f6 <kilo_init+0xa6>
        OSCCAL = osccal;
     1f2:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     1f6:	10 92 3f 01 	sts	0x013F, r1
    rx_leadingbit = 1;
     1fa:	c1 e0       	ldi	r28, 0x01	; 1
     1fc:	c0 93 18 01 	sts	0x0118, r28
    rx_leadingbyte = 1;
     200:	c0 93 5c 01 	sts	0x015C, r28
    rx_byteindex = 0;
     204:	10 92 36 01 	sts	0x0136, r1
    rx_bytevalue = 0;
     208:	10 92 70 01 	sts	0x0170, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     20c:	80 e9       	ldi	r24, 0x90	; 144
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__eerd_byte_m328p>
     214:	80 93 35 01 	sts	0x0135, r24
    if (tx_mask & ~TX_MASK_MAX)
     218:	80 91 35 01 	lds	r24, 0x0135
     21c:	88 73       	andi	r24, 0x38	; 56
     21e:	11 f0       	breq	.+4      	; 0x224 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     220:	c0 93 35 01 	sts	0x0135, r28
    tx_clock = 0;
     224:	10 92 60 01 	sts	0x0160, r1
     228:	10 92 5f 01 	sts	0x015F, r1
    tx_increment = 255;
     22c:	8f ef       	ldi	r24, 0xFF	; 255
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	90 93 5e 01 	sts	0x015E, r25
     234:	80 93 5d 01 	sts	0x015D, r24
    kilo_ticks = 0;
     238:	10 92 3b 01 	sts	0x013B, r1
     23c:	10 92 3c 01 	sts	0x013C, r1
     240:	10 92 3d 01 	sts	0x013D, r1
     244:	10 92 3e 01 	sts	0x013E, r1
    kilo_state = IDLE;
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	80 93 17 01 	sts	0x0117, r24
    kilo_tx_period = 3906;
     24e:	82 e4       	ldi	r24, 0x42	; 66
     250:	9f e0       	ldi	r25, 0x0F	; 15
     252:	90 93 6f 01 	sts	0x016F, r25
     256:	80 93 6e 01 	sts	0x016E, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     25a:	80 eb       	ldi	r24, 0xB0	; 176
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__eerd_byte_m328p>
     262:	c8 2f       	mov	r28, r24
     264:	81 eb       	ldi	r24, 0xB1	; 177
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__eerd_byte_m328p>
     26c:	2c 2f       	mov	r18, r28
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	38 2b       	or	r19, r24
     272:	30 93 72 01 	sts	0x0172, r19
     276:	20 93 71 01 	sts	0x0171, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     27a:	85 e0       	ldi	r24, 0x05	; 5
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__eerd_byte_m328p>
     282:	80 93 75 01 	sts	0x0175, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     286:	89 e0       	ldi	r24, 0x09	; 9
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__eerd_byte_m328p>
     28e:	80 93 61 01 	sts	0x0161, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     292:	8c e0       	ldi	r24, 0x0C	; 12
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__eerd_byte_m328p>
     29a:	80 93 73 01 	sts	0x0173, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     29e:	84 e1       	ldi	r24, 0x14	; 20
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__eerd_byte_m328p>
     2a6:	80 93 74 01 	sts	0x0174, r24
     2aa:	50 e4       	ldi	r21, 0x40	; 64
     2ac:	e5 2e       	mov	r14, r21
     2ae:	51 e0       	ldi	r21, 0x01	; 1
     2b0:	f5 2e       	mov	r15, r21
     2b2:	09 e1       	ldi	r16, 0x19	; 25
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	c0 e2       	ldi	r28, 0x20	; 32
     2b8:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     2ba:	ce 01       	movw	r24, r28
     2bc:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__eerd_byte_m328p>
     2c0:	d8 2e       	mov	r13, r24
     2c2:	ce 01       	movw	r24, r28
     2c4:	01 96       	adiw	r24, 0x01	; 1
     2c6:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__eerd_byte_m328p>
     2ca:	2d 2d       	mov	r18, r13
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	32 2f       	mov	r19, r18
     2d0:	22 27       	eor	r18, r18
     2d2:	28 2b       	or	r18, r24
     2d4:	f7 01       	movw	r30, r14
     2d6:	21 93       	st	Z+, r18
     2d8:	31 93       	st	Z+, r19
     2da:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     2dc:	ce 01       	movw	r24, r28
     2de:	c0 96       	adiw	r24, 0x30	; 48
     2e0:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__eerd_byte_m328p>
     2e4:	d8 2e       	mov	r13, r24
     2e6:	ce 01       	movw	r24, r28
     2e8:	c1 96       	adiw	r24, 0x31	; 49
     2ea:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__eerd_byte_m328p>
     2ee:	2d 2d       	mov	r18, r13
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	32 2f       	mov	r19, r18
     2f4:	22 27       	eor	r18, r18
     2f6:	28 2b       	or	r18, r24
     2f8:	f8 01       	movw	r30, r16
     2fa:	21 93       	st	Z+, r18
     2fc:	31 93       	st	Z+, r19
     2fe:	8f 01       	movw	r16, r30
     300:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     302:	cc 33       	cpi	r28, 0x3C	; 60
     304:	d1 05       	cpc	r29, r1
     306:	c9 f6       	brne	.-78     	; 0x2ba <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     308:	78 94       	sei
}
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
     310:	0f 91       	pop	r16
     312:	ff 90       	pop	r15
     314:	ef 90       	pop	r14
     316:	df 90       	pop	r13
     318:	08 95       	ret

0000031a <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     31a:	1f 92       	push	r1
     31c:	0f 92       	push	r0
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	0f 92       	push	r0
     322:	11 24       	eor	r1, r1
     324:	8f 93       	push	r24
    wdt_disable();
     326:	88 e1       	ldi	r24, 0x18	; 24
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	f8 94       	cli
     32c:	80 93 60 00 	sts	0x0060, r24
     330:	10 92 60 00 	sts	0x0060, r1
     334:	0f be       	out	0x3f, r0	; 63
}
     336:	8f 91       	pop	r24
     338:	0f 90       	pop	r0
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	0f 90       	pop	r0
     33e:	1f 90       	pop	r1
     340:	18 95       	reti

00000342 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     342:	7c 01       	movw	r14, r24
     344:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     346:	d1 2c       	mov	r13, r1
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     348:	88 24       	eor	r8, r8
     34a:	8a 94       	dec	r8
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     34c:	64 e0       	ldi	r22, 0x04	; 4
     34e:	b6 2e       	mov	r11, r22

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     350:	76 e0       	ldi	r23, 0x06	; 6
     352:	97 2e       	mov	r9, r23
     354:	e3 e8       	ldi	r30, 0x83	; 131
     356:	ae 2e       	mov	r10, r30
            case SLEEPING:
                cli();
                acomp_off();
                adc_off();
                ports_off();
                wdt_enable(WDTO_8S);
     358:	08 e1       	ldi	r16, 0x18	; 24
     35a:	10 e0       	ldi	r17, 0x00	; 0
     35c:	f9 e2       	ldi	r31, 0x29	; 41
     35e:	cf 2e       	mov	r12, r31

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     360:	e0 91 17 01 	lds	r30, 0x0117
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	e7 30       	cpi	r30, 0x07	; 7
     368:	f1 05       	cpc	r31, r1
     36a:	d0 f7       	brcc	.-12     	; 0x360 <kilo_start+0x1e>
     36c:	ec 5c       	subi	r30, 0xCC	; 204
     36e:	ff 4f       	sbci	r31, 0xFF	; 255
     370:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     374:	dd 20       	and	r13, r13
     376:	09 f4       	brne	.+2      	; 0x37a <kilo_start+0x38>
     378:	fd c0       	rjmp	.+506    	; 0x574 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     37a:	b0 92 17 01 	sts	0x0117, r11
     37e:	dd 24       	eor	r13, r13
     380:	d3 94       	inc	r13
            case RUNNING:
                loop();
     382:	fe 01       	movw	r30, r28
     384:	09 95       	icall
                break;
     386:	ec cf       	rjmp	.-40     	; 0x360 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     388:	80 91 3f 01 	lds	r24, 0x013F
     38c:	81 11       	cpse	r24, r1
     38e:	eb c0       	rjmp	.+470    	; 0x566 <kilo_start+0x224>
        cli();                                    // disable interrupts
     390:	f8 94       	cli
        adc_setup_conversion(6);
     392:	90 92 7c 00 	sts	0x007C, r9
     396:	a0 92 7a 00 	sts	0x007A, r10
        adc_start_conversion();
     39a:	80 91 7a 00 	lds	r24, 0x007A
     39e:	80 64       	ori	r24, 0x40	; 64
     3a0:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     3a4:	80 91 7a 00 	lds	r24, 0x007A
     3a8:	86 fd       	sbrc	r24, 6
     3aa:	fc cf       	rjmp	.-8      	; 0x3a4 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     3ac:	20 91 78 00 	lds	r18, 0x0078
     3b0:	30 91 79 00 	lds	r19, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     3b4:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     3b6:	2b 3a       	cpi	r18, 0xAB	; 171
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	39 07       	cpc	r19, r25
     3bc:	0c f0       	brlt	.+2      	; 0x3c0 <kilo_start+0x7e>
     3be:	ed c0       	rjmp	.+474    	; 0x59a <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     3c0:	29 38       	cpi	r18, 0x89	; 137
     3c2:	e2 e0       	ldi	r30, 0x02	; 2
     3c4:	3e 07       	cpc	r19, r30
     3c6:	0c f0       	brlt	.+2      	; 0x3ca <kilo_start+0x88>
     3c8:	ef c0       	rjmp	.+478    	; 0x5a8 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     3ca:	27 36       	cpi	r18, 0x67	; 103
     3cc:	32 40       	sbci	r19, 0x02	; 2
     3ce:	0c f4       	brge	.+2      	; 0x3d2 <kilo_start+0x90>
     3d0:	ca c0       	rjmp	.+404    	; 0x566 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     3d2:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     3d4:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     3d6:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     3d8:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     3da:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     3dc:	3c 98       	cbi	0x07, 4	; 7
     3de:	c0 cf       	rjmp	.-128    	; 0x360 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     3e0:	f8 94       	cli
                acomp_off();
     3e2:	80 b7       	in	r24, 0x30	; 48
     3e4:	87 7f       	andi	r24, 0xF7	; 247
     3e6:	80 bf       	out	0x30, r24	; 48
                adc_off();
     3e8:	80 91 7a 00 	lds	r24, 0x007A
     3ec:	8f 77       	andi	r24, 0x7F	; 127
     3ee:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     3f2:	14 b8       	out	0x04, r1	; 4
     3f4:	17 b8       	out	0x07, r1	; 7
     3f6:	1a b8       	out	0x0a, r1	; 10
     3f8:	15 b8       	out	0x05, r1	; 5
     3fa:	18 b8       	out	0x08, r1	; 8
     3fc:	1b b8       	out	0x0b, r1	; 11
                wdt_enable(WDTO_8S);
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	a8 95       	wdr
     404:	00 93 60 00 	sts	0x0060, r16
     408:	0f be       	out	0x3f, r0	; 63
     40a:	c0 92 60 00 	sts	0x0060, r12
                WDTCSR |= (1<<WDIE);
     40e:	80 91 60 00 	lds	r24, 0x0060
     412:	80 64       	ori	r24, 0x40	; 64
     414:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     418:	83 b7       	in	r24, 0x33	; 51
     41a:	81 7f       	andi	r24, 0xF1	; 241
     41c:	84 60       	ori	r24, 0x04	; 4
     41e:	83 bf       	out	0x33, r24	; 51
                cli();
     420:	f8 94       	cli
                sleep_enable();
     422:	83 b7       	in	r24, 0x33	; 51
     424:	81 60       	ori	r24, 0x01	; 1
     426:	83 bf       	out	0x33, r24	; 51
                sei();
     428:	78 94       	sei
                sleep_cpu();
     42a:	88 95       	sleep
                sleep_disable();
     42c:	83 b7       	in	r24, 0x33	; 51
     42e:	8e 7f       	andi	r24, 0xFE	; 254
     430:	83 bf       	out	0x33, r24	; 51
                sei();
     432:	78 94       	sei
                rx_busy = 0;
     434:	10 92 3f 01 	sts	0x013F, r1
                ports_on();
     438:	52 9a       	sbi	0x0a, 2	; 10
     43a:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     43c:	80 91 7a 00 	lds	r24, 0x007A
     440:	80 68       	ori	r24, 0x80	; 128
     442:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     446:	87 e5       	ldi	r24, 0x57	; 87
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <kilo_start+0x108>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <kilo_start+0x10e>
     450:	00 00       	nop
                _delay_us(300);
                acomp_on();
     452:	80 b7       	in	r24, 0x30	; 48
     454:	88 61       	ori	r24, 0x18	; 24
     456:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     458:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     45a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     45c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     45e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     460:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     462:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     464:	ef e1       	ldi	r30, 0x1F	; 31
     466:	fe e4       	ldi	r31, 0x4E	; 78
     468:	31 97       	sbiw	r30, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <kilo_start+0x126>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <kilo_start+0x12c>
     46e:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     470:	80 91 3f 01 	lds	r24, 0x013F
     474:	81 11       	cpse	r24, r1
     476:	81 c0       	rjmp	.+258    	; 0x57a <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     478:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     47a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     47c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     47e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     480:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     482:	3c 98       	cbi	0x07, 4	; 7
     484:	6d cf       	rjmp	.-294    	; 0x360 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     486:	80 91 15 01 	lds	r24, 0x0115
     48a:	81 11       	cpse	r24, r1
     48c:	41 c0       	rjmp	.+130    	; 0x510 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     48e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     492:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     496:	10 92 16 01 	sts	0x0116, r1
     49a:	62 cf       	rjmp	.-316    	; 0x360 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     49c:	48 99       	sbic	0x09, 0	; 9
     49e:	ec cf       	rjmp	.-40     	; 0x478 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     4a0:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4a2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4a4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4a6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4a8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4aa:	3c 98       	cbi	0x07, 4	; 7
     4ac:	8f ec       	ldi	r24, 0xCF	; 207
     4ae:	97 e0       	ldi	r25, 0x07	; 7
     4b0:	01 97       	sbiw	r24, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <kilo_start+0x16e>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <kilo_start+0x174>
     4b6:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4b8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4ba:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4bc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4be:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4c0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4c2:	3c 98       	cbi	0x07, 4	; 7
     4c4:	9f ef       	ldi	r25, 0xFF	; 255
     4c6:	e1 ee       	ldi	r30, 0xE1	; 225
     4c8:	f4 e0       	ldi	r31, 0x04	; 4
     4ca:	91 50       	subi	r25, 0x01	; 1
     4cc:	e0 40       	sbci	r30, 0x00	; 0
     4ce:	f0 40       	sbci	r31, 0x00	; 0
     4d0:	e1 f7       	brne	.-8      	; 0x4ca <kilo_start+0x188>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <kilo_start+0x192>
     4d4:	00 00       	nop
     4d6:	44 cf       	rjmp	.-376    	; 0x360 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4d8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4da:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     4dc:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     4de:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4e0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4e2:	3c 98       	cbi	0x07, 4	; 7
     4e4:	ef ec       	ldi	r30, 0xCF	; 207
     4e6:	f7 e0       	ldi	r31, 0x07	; 7
     4e8:	31 97       	sbiw	r30, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <kilo_start+0x1a6>
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <kilo_start+0x1ac>
     4ee:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4f0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4f2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4f4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4f6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4f8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4fa:	3c 98       	cbi	0x07, 4	; 7
     4fc:	ff ef       	ldi	r31, 0xFF	; 255
     4fe:	21 ee       	ldi	r18, 0xE1	; 225
     500:	84 e0       	ldi	r24, 0x04	; 4
     502:	f1 50       	subi	r31, 0x01	; 1
     504:	20 40       	sbci	r18, 0x00	; 0
     506:	80 40       	sbci	r24, 0x00	; 0
     508:	e1 f7       	brne	.-8      	; 0x502 <kilo_start+0x1c0>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <kilo_start+0x1ca>
     50c:	00 00       	nop
     50e:	28 cf       	rjmp	.-432    	; 0x360 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     510:	90 91 15 01 	lds	r25, 0x0115
     514:	80 91 16 01 	lds	r24, 0x0116
     518:	98 17       	cp	r25, r24
     51a:	09 f4       	brne	.+2      	; 0x51e <kilo_start+0x1dc>
     51c:	21 cf       	rjmp	.-446    	; 0x360 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     51e:	80 91 15 01 	lds	r24, 0x0115
     522:	80 93 16 01 	sts	0x0116, r24
                        if (cur_motion == MOVE_LEFT) {
     526:	80 91 15 01 	lds	r24, 0x0115
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	09 f4       	brne	.+2      	; 0x530 <kilo_start+0x1ee>
     52e:	50 c0       	rjmp	.+160    	; 0x5d0 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     530:	80 91 15 01 	lds	r24, 0x0115
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     534:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     538:	80 92 b4 00 	sts	0x00B4, r8
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     53c:	82 30       	cpi	r24, 0x02	; 2
     53e:	d9 f1       	breq	.+118    	; 0x5b6 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     540:	80 92 b3 00 	sts	0x00B3, r8
    OCR2B = cw;
     544:	80 92 b4 00 	sts	0x00B4, r8
     548:	8f e2       	ldi	r24, 0x2F	; 47
     54a:	95 e7       	ldi	r25, 0x75	; 117
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	f1 f7       	brne	.-4      	; 0x54c <kilo_start+0x20a>
     550:	00 c0       	rjmp	.+0      	; 0x552 <kilo_start+0x210>
     552:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     554:	80 91 74 01 	lds	r24, 0x0174
     558:	90 91 73 01 	lds	r25, 0x0173
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     55c:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     560:	80 93 b4 00 	sts	0x00B4, r24
     564:	fd ce       	rjmp	.-518    	; 0x360 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     566:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     568:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     56a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     56c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     56e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     570:	3c 98       	cbi	0x07, 4	; 7
     572:	f6 ce       	rjmp	.-532    	; 0x360 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     574:	f7 01       	movw	r30, r14
     576:	09 95       	icall
     578:	00 cf       	rjmp	.-512    	; 0x37a <kilo_start+0x38>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     57a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     57c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     57e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     580:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     582:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     584:	3c 98       	cbi	0x07, 4	; 7
     586:	ff ef       	ldi	r31, 0xFF	; 255
     588:	20 e7       	ldi	r18, 0x70	; 112
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	f1 50       	subi	r31, 0x01	; 1
     58e:	20 40       	sbci	r18, 0x00	; 0
     590:	80 40       	sbci	r24, 0x00	; 0
     592:	e1 f7       	brne	.-8      	; 0x58c <kilo_start+0x24a>
     594:	00 c0       	rjmp	.+0      	; 0x596 <kilo_start+0x254>
     596:	00 00       	nop
     598:	6f cf       	rjmp	.-290    	; 0x478 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     59a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     59c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     59e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     5a0:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5a2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5a4:	3c 98       	cbi	0x07, 4	; 7
     5a6:	dc ce       	rjmp	.-584    	; 0x360 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5a8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5aa:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5ac:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5ae:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     5b0:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     5b2:	3c 9a       	sbi	0x07, 4	; 7
     5b4:	d5 ce       	rjmp	.-598    	; 0x360 <kilo_start+0x1e>
     5b6:	ef e2       	ldi	r30, 0x2F	; 47
     5b8:	f5 e7       	ldi	r31, 0x75	; 117
     5ba:	31 97       	sbiw	r30, 0x01	; 1
     5bc:	f1 f7       	brne	.-4      	; 0x5ba <kilo_start+0x278>
     5be:	00 c0       	rjmp	.+0      	; 0x5c0 <kilo_start+0x27e>
     5c0:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     5c2:	80 91 61 01 	lds	r24, 0x0161
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5c6:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5ca:	80 93 b4 00 	sts	0x00B4, r24
     5ce:	c8 ce       	rjmp	.-624    	; 0x360 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5d0:	80 92 b3 00 	sts	0x00B3, r8
    OCR2B = cw;
     5d4:	10 92 b4 00 	sts	0x00B4, r1
     5d8:	8f e2       	ldi	r24, 0x2F	; 47
     5da:	95 e7       	ldi	r25, 0x75	; 117
     5dc:	01 97       	sbiw	r24, 0x01	; 1
     5de:	f1 f7       	brne	.-4      	; 0x5dc <kilo_start+0x29a>
     5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <kilo_start+0x2a0>
     5e2:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     5e4:	80 91 75 01 	lds	r24, 0x0175
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5e8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5ec:	10 92 b4 00 	sts	0x00B4, r1
     5f0:	b7 ce       	rjmp	.-658    	; 0x360 <kilo_start+0x1e>

000005f2 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     5f2:	07 c0       	rjmp	.+14     	; 0x602 <delay+0x10>
     5f4:	ef ec       	ldi	r30, 0xCF	; 207
     5f6:	f7 e0       	ldi	r31, 0x07	; 7
     5f8:	31 97       	sbiw	r30, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <delay+0x6>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <delay+0xc>
     5fe:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     600:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     602:	00 97       	sbiw	r24, 0x00	; 0
     604:	b9 f7       	brne	.-18     	; 0x5f4 <delay+0x2>
     606:	08 95       	ret

00000608 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     608:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     60c:	60 93 b4 00 	sts	0x00B4, r22
     610:	08 95       	ret

00000612 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     618:	80 93 b4 00 	sts	0x00B4, r24
     61c:	8f e0       	ldi	r24, 0x0F	; 15
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	ef ec       	ldi	r30, 0xCF	; 207
     622:	f7 e0       	ldi	r31, 0x07	; 7
     624:	31 97       	sbiw	r30, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <spinup_motors+0x12>
     628:	00 c0       	rjmp	.+0      	; 0x62a <spinup_motors+0x18>
     62a:	00 00       	nop
     62c:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     62e:	00 97       	sbiw	r24, 0x00	; 0
     630:	b9 f7       	brne	.-18     	; 0x620 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     632:	08 95       	ret

00000634 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     634:	80 91 3f 01 	lds	r24, 0x013F
     638:	81 11       	cpse	r24, r1
     63a:	1e c0       	rjmp	.+60     	; 0x678 <get_ambientlight+0x44>
        cli();
     63c:	f8 94       	cli
        adc_setup_conversion(7);
     63e:	87 e0       	ldi	r24, 0x07	; 7
     640:	80 93 7c 00 	sts	0x007C, r24
     644:	83 e8       	ldi	r24, 0x83	; 131
     646:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     64a:	80 91 7a 00 	lds	r24, 0x007A
     64e:	80 64       	ori	r24, 0x40	; 64
     650:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     654:	80 91 7a 00 	lds	r24, 0x007A
     658:	86 fd       	sbrc	r24, 6
     65a:	fc cf       	rjmp	.-8      	; 0x654 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     65c:	80 91 78 00 	lds	r24, 0x0078
     660:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     664:	10 92 7c 00 	sts	0x007C, r1
     668:	23 ea       	ldi	r18, 0xA3	; 163
     66a:	20 93 7a 00 	sts	0x007A, r18
     66e:	21 e0       	ldi	r18, 0x01	; 1
     670:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     674:	78 94       	sei
     676:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     67c:	08 95       	ret

0000067e <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     67e:	80 91 3f 01 	lds	r24, 0x013F
     682:	81 11       	cpse	r24, r1
     684:	1e c0       	rjmp	.+60     	; 0x6c2 <get_temperature+0x44>
        cli();
     686:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     688:	88 ec       	ldi	r24, 0xC8	; 200
     68a:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     68e:	87 e8       	ldi	r24, 0x87	; 135
     690:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     694:	80 91 7a 00 	lds	r24, 0x007A
     698:	80 64       	ori	r24, 0x40	; 64
     69a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     69e:	80 91 7a 00 	lds	r24, 0x007A
     6a2:	86 fd       	sbrc	r24, 6
     6a4:	fc cf       	rjmp	.-8      	; 0x69e <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     6a6:	80 91 78 00 	lds	r24, 0x0078
     6aa:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6ae:	10 92 7c 00 	sts	0x007C, r1
     6b2:	23 ea       	ldi	r18, 0xA3	; 163
     6b4:	20 93 7a 00 	sts	0x007A, r18
     6b8:	21 e0       	ldi	r18, 0x01	; 1
     6ba:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     6be:	78 94       	sei
     6c0:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     6c2:	8f ef       	ldi	r24, 0xFF	; 255
     6c4:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     6c6:	08 95       	ret

000006c8 <rand_hard>:

uint8_t rand_hard() {
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t num = 0;
     6d2:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     6d4:	13 ea       	ldi	r17, 0xA3	; 163
     6d6:	d1 e0       	ldi	r29, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     6d8:	c6 e0       	ldi	r28, 0x06	; 6
     6da:	b3 e8       	ldi	r27, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     6dc:	e1 e0       	ldi	r30, 0x01	; 1
     6de:	f0 e0       	ldi	r31, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     6e0:	20 e8       	ldi	r18, 0x80	; 128
     6e2:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     6e4:	f8 94       	cli
            adc_setup_conversion(6);
     6e6:	c0 93 7c 00 	sts	0x007C, r28
     6ea:	b0 93 7a 00 	sts	0x007A, r27
            adc_start_conversion();
     6ee:	90 91 7a 00 	lds	r25, 0x007A
     6f2:	90 64       	ori	r25, 0x40	; 64
     6f4:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     6f8:	90 91 7a 00 	lds	r25, 0x007A
     6fc:	96 fd       	sbrc	r25, 6
     6fe:	fc cf       	rjmp	.-8      	; 0x6f8 <rand_hard+0x30>
            a = ADCW&0x1;
     700:	40 91 78 00 	lds	r20, 0x0078
     704:	50 91 79 00 	lds	r21, 0x0079
     708:	a4 2f       	mov	r26, r20
     70a:	a1 70       	andi	r26, 0x01	; 1
            adc_start_conversion();
     70c:	90 91 7a 00 	lds	r25, 0x007A
     710:	90 64       	ori	r25, 0x40	; 64
     712:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     716:	90 91 7a 00 	lds	r25, 0x007A
     71a:	96 fd       	sbrc	r25, 6
     71c:	fc cf       	rjmp	.-8      	; 0x716 <rand_hard+0x4e>
            b = ADCW&0x1;
     71e:	40 91 78 00 	lds	r20, 0x0078
     722:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     726:	10 92 7c 00 	sts	0x007C, r1
     72a:	10 93 7a 00 	sts	0x007A, r17
     72e:	d0 93 7b 00 	sts	0x007B, r29
            sei();
     732:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     734:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     736:	a4 13       	cpse	r26, r20
     738:	05 c0       	rjmp	.+10     	; 0x744 <rand_hard+0x7c>
     73a:	21 50       	subi	r18, 0x01	; 1
     73c:	31 09       	sbc	r19, r1
     73e:	21 15       	cp	r18, r1
     740:	31 05       	cpc	r19, r1
     742:	81 f6       	brne	.-96     	; 0x6e4 <rand_hard+0x1c>
        if (a)
     744:	aa 23       	and	r26, r26
     746:	39 f0       	breq	.+14     	; 0x756 <rand_hard+0x8e>
            num |= (1<<i);
     748:	9f 01       	movw	r18, r30
     74a:	06 2e       	mov	r0, r22
     74c:	01 c0       	rjmp	.+2      	; 0x750 <rand_hard+0x88>
     74e:	22 0f       	add	r18, r18
     750:	0a 94       	dec	r0
     752:	ea f7       	brpl	.-6      	; 0x74e <rand_hard+0x86>
     754:	82 2b       	or	r24, r18
     756:	6f 5f       	subi	r22, 0xFF	; 255
     758:	7f 4f       	sbci	r23, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     75a:	68 30       	cpi	r22, 0x08	; 8
     75c:	71 05       	cpc	r23, r1
     75e:	09 f0       	breq	.+2      	; 0x762 <rand_hard+0x9a>
     760:	bf cf       	rjmp	.-130    	; 0x6e0 <rand_hard+0x18>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	08 95       	ret

0000076a <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     76a:	80 91 00 01 	lds	r24, 0x0100
     76e:	98 2f       	mov	r25, r24
     770:	99 0f       	add	r25, r25
     772:	99 0f       	add	r25, r25
     774:	99 0f       	add	r25, r25
     776:	98 27       	eor	r25, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     778:	80 91 14 01 	lds	r24, 0x0114
     77c:	21 e0       	ldi	r18, 0x01	; 1
     77e:	28 0f       	add	r18, r24
     780:	20 93 14 01 	sts	0x0114, r18
     784:	86 95       	lsr	r24
     786:	86 95       	lsr	r24

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     788:	89 27       	eor	r24, r25
     78a:	92 95       	swap	r25
     78c:	96 95       	lsr	r25
     78e:	97 70       	andi	r25, 0x07	; 7
    seed ^= accumulator++>>2;
     790:	89 27       	eor	r24, r25
     792:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     796:	08 95       	ret

00000798 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     798:	80 93 00 01 	sts	0x0100, r24
     79c:	08 95       	ret

0000079e <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     79e:	80 91 3f 01 	lds	r24, 0x013F
     7a2:	81 11       	cpse	r24, r1
     7a4:	16 c0       	rjmp	.+44     	; 0x7d2 <get_voltage+0x34>
        cli();                                    // disable interrupts
     7a6:	f8 94       	cli
        adc_setup_conversion(6);
     7a8:	86 e0       	ldi	r24, 0x06	; 6
     7aa:	80 93 7c 00 	sts	0x007C, r24
     7ae:	83 e8       	ldi	r24, 0x83	; 131
     7b0:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     7b4:	80 91 7a 00 	lds	r24, 0x007A
     7b8:	80 64       	ori	r24, 0x40	; 64
     7ba:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     7be:	80 91 7a 00 	lds	r24, 0x007A
     7c2:	86 fd       	sbrc	r24, 6
     7c4:	fc cf       	rjmp	.-8      	; 0x7be <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     7c6:	80 91 78 00 	lds	r24, 0x0078
     7ca:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     7ce:	78 94       	sei
     7d0:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     7d2:	8f ef       	ldi	r24, 0xFF	; 255
     7d4:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     7d6:	08 95       	ret

000007d8 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     7d8:	2f 92       	push	r2
     7da:	3f 92       	push	r3
     7dc:	4f 92       	push	r4
     7de:	5f 92       	push	r5
     7e0:	6f 92       	push	r6
     7e2:	7f 92       	push	r7
     7e4:	8f 92       	push	r8
     7e6:	9f 92       	push	r9
     7e8:	af 92       	push	r10
     7ea:	bf 92       	push	r11
     7ec:	cf 92       	push	r12
     7ee:	df 92       	push	r13
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <estimate_distance+0x26>
     7fe:	00 d0       	rcall	.+0      	; 0x800 <estimate_distance+0x28>
     800:	00 d0       	rcall	.+0      	; 0x802 <estimate_distance+0x2a>
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
     806:	8c 01       	movw	r16, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     808:	dc 01       	movw	r26, r24
     80a:	12 96       	adiw	r26, 0x02	; 2
     80c:	0d 90       	ld	r0, X+
     80e:	bc 91       	ld	r27, X
     810:	a0 2d       	mov	r26, r0
     812:	be 83       	std	Y+6, r27	; 0x06
     814:	ad 83       	std	Y+5, r26	; 0x05
     816:	a4 38       	cpi	r26, 0x84	; 132
     818:	e3 e0       	ldi	r30, 0x03	; 3
     81a:	be 07       	cpc	r27, r30
     81c:	0c f0       	brlt	.+2      	; 0x820 <estimate_distance+0x48>
     81e:	ca c0       	rjmp	.+404    	; 0x9b4 <__stack+0xb5>
        if (dist->high_gain > kilo_irhigh[0]) {
     820:	80 91 19 01 	lds	r24, 0x0119
     824:	90 91 1a 01 	lds	r25, 0x011A
     828:	8a 17       	cp	r24, r26
     82a:	9b 07       	cpc	r25, r27
     82c:	08 f4       	brcc	.+2      	; 0x830 <estimate_distance+0x58>
     82e:	a9 c1       	rjmp	.+850    	; 0xb82 <__stack+0x283>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     830:	60 90 1b 01 	lds	r6, 0x011B
     834:	70 90 1c 01 	lds	r7, 0x011C
     838:	6a 16       	cp	r6, r26
     83a:	7b 06       	cpc	r7, r27
     83c:	08 f4       	brcc	.+2      	; 0x840 <estimate_distance+0x68>
     83e:	27 c2       	rjmp	.+1102   	; 0xc8e <__stack+0x38f>
     840:	60 90 1d 01 	lds	r6, 0x011D
     844:	70 90 1e 01 	lds	r7, 0x011E
     848:	6a 16       	cp	r6, r26
     84a:	7b 06       	cpc	r7, r27
     84c:	08 f4       	brcc	.+2      	; 0x850 <estimate_distance+0x78>
     84e:	28 c2       	rjmp	.+1104   	; 0xca0 <__stack+0x3a1>
     850:	60 90 1f 01 	lds	r6, 0x011F
     854:	70 90 20 01 	lds	r7, 0x0120
     858:	6a 16       	cp	r6, r26
     85a:	7b 06       	cpc	r7, r27
     85c:	08 f4       	brcc	.+2      	; 0x860 <estimate_distance+0x88>
     85e:	29 c2       	rjmp	.+1106   	; 0xcb2 <__stack+0x3b3>
     860:	60 90 21 01 	lds	r6, 0x0121
     864:	70 90 22 01 	lds	r7, 0x0122
     868:	6a 16       	cp	r6, r26
     86a:	7b 06       	cpc	r7, r27
     86c:	08 f4       	brcc	.+2      	; 0x870 <estimate_distance+0x98>
     86e:	2a c2       	rjmp	.+1108   	; 0xcc4 <__stack+0x3c5>
     870:	60 90 23 01 	lds	r6, 0x0123
     874:	70 90 24 01 	lds	r7, 0x0124
     878:	6a 16       	cp	r6, r26
     87a:	7b 06       	cpc	r7, r27
     87c:	08 f4       	brcc	.+2      	; 0x880 <estimate_distance+0xa8>
     87e:	8b c1       	rjmp	.+790    	; 0xb96 <__stack+0x297>
     880:	60 90 25 01 	lds	r6, 0x0125
     884:	70 90 26 01 	lds	r7, 0x0126
     888:	6a 16       	cp	r6, r26
     88a:	7b 06       	cpc	r7, r27
     88c:	08 f4       	brcc	.+2      	; 0x890 <estimate_distance+0xb8>
     88e:	23 c2       	rjmp	.+1094   	; 0xcd6 <__stack+0x3d7>
     890:	60 90 27 01 	lds	r6, 0x0127
     894:	70 90 28 01 	lds	r7, 0x0128
     898:	6a 16       	cp	r6, r26
     89a:	7b 06       	cpc	r7, r27
     89c:	08 f4       	brcc	.+2      	; 0x8a0 <estimate_distance+0xc8>
     89e:	24 c2       	rjmp	.+1096   	; 0xce8 <__stack+0x3e9>
     8a0:	60 90 29 01 	lds	r6, 0x0129
     8a4:	70 90 2a 01 	lds	r7, 0x012A
     8a8:	6a 16       	cp	r6, r26
     8aa:	7b 06       	cpc	r7, r27
     8ac:	08 f4       	brcc	.+2      	; 0x8b0 <estimate_distance+0xd8>
     8ae:	25 c2       	rjmp	.+1098   	; 0xcfa <__stack+0x3fb>
     8b0:	60 90 2b 01 	lds	r6, 0x012B
     8b4:	70 90 2c 01 	lds	r7, 0x012C
     8b8:	6a 16       	cp	r6, r26
     8ba:	7b 06       	cpc	r7, r27
     8bc:	08 f4       	brcc	.+2      	; 0x8c0 <estimate_distance+0xe8>
     8be:	26 c2       	rjmp	.+1100   	; 0xd0c <__stack+0x40d>
     8c0:	60 90 2d 01 	lds	r6, 0x012D
     8c4:	70 90 2e 01 	lds	r7, 0x012E
     8c8:	6a 16       	cp	r6, r26
     8ca:	7b 06       	cpc	r7, r27
     8cc:	08 f4       	brcc	.+2      	; 0x8d0 <estimate_distance+0xf8>
     8ce:	27 c2       	rjmp	.+1102   	; 0xd1e <__stack+0x41f>
     8d0:	60 90 2f 01 	lds	r6, 0x012F
     8d4:	70 90 30 01 	lds	r7, 0x0130
     8d8:	6a 16       	cp	r6, r26
     8da:	7b 06       	cpc	r7, r27
     8dc:	08 f4       	brcc	.+2      	; 0x8e0 <estimate_distance+0x108>
     8de:	2d c2       	rjmp	.+1114   	; 0xd3a <__stack+0x43b>
     8e0:	60 90 31 01 	lds	r6, 0x0131
     8e4:	70 90 32 01 	lds	r7, 0x0132
     8e8:	6a 16       	cp	r6, r26
     8ea:	7b 06       	cpc	r7, r27
     8ec:	08 f4       	brcc	.+2      	; 0x8f0 <estimate_distance+0x118>
     8ee:	2e c2       	rjmp	.+1116   	; 0xd4c <__stack+0x44d>
     8f0:	60 90 33 01 	lds	r6, 0x0133
     8f4:	70 90 34 01 	lds	r7, 0x0134
     8f8:	6a 16       	cp	r6, r26
     8fa:	7b 06       	cpc	r7, r27
     8fc:	08 f4       	brcc	.+2      	; 0x900 <__stack+0x1>
     8fe:	2f c2       	rjmp	.+1118   	; 0xd5e <__stack+0x45f>
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	a0 ed       	ldi	r26, 0xD0	; 208
     906:	b0 e4       	ldi	r27, 0x40	; 64
     908:	89 83       	std	Y+1, r24	; 0x01
     90a:	9a 83       	std	Y+2, r25	; 0x02
     90c:	ab 83       	std	Y+3, r26	; 0x03
     90e:	bc 83       	std	Y+4, r27	; 0x04
     910:	8c e0       	ldi	r24, 0x0C	; 12
     912:	e8 2e       	mov	r14, r24
     914:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     916:	f7 01       	movw	r30, r14
     918:	ee 0f       	add	r30, r30
     91a:	ff 1f       	adc	r31, r31
     91c:	e7 5e       	subi	r30, 0xE7	; 231
     91e:	fe 4f       	sbci	r31, 0xFE	; 254
     920:	80 81       	ld	r24, Z
     922:	91 81       	ldd	r25, Z+1	; 0x01
     924:	b3 01       	movw	r22, r6
     926:	68 1b       	sub	r22, r24
     928:	79 0b       	sbc	r23, r25
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatunsisf>
     932:	9b 01       	movw	r18, r22
     934:	ac 01       	movw	r20, r24
     936:	0e 94 c1 09 	call	0x1382	; 0x1382 <__addsf3>
     93a:	6b 01       	movw	r12, r22
     93c:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     93e:	ad 81       	ldd	r26, Y+5	; 0x05
     940:	be 81       	ldd	r27, Y+6	; 0x06
     942:	bd 01       	movw	r22, r26
     944:	88 27       	eor	r24, r24
     946:	77 fd       	sbrc	r23, 7
     948:	80 95       	com	r24
     94a:	98 2f       	mov	r25, r24
     94c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__floatsisf>
     950:	4b 01       	movw	r8, r22
     952:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     954:	b3 01       	movw	r22, r6
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatunsisf>
     95e:	2b 01       	movw	r4, r22
     960:	3c 01       	movw	r6, r24
     962:	29 81       	ldd	r18, Y+1	; 0x01
     964:	3a 81       	ldd	r19, Y+2	; 0x02
     966:	4b 81       	ldd	r20, Y+3	; 0x03
     968:	5c 81       	ldd	r21, Y+4	; 0x04
     96a:	c7 01       	movw	r24, r14
     96c:	b6 01       	movw	r22, r12
     96e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__mulsf3>
     972:	9b 01       	movw	r18, r22
     974:	ac 01       	movw	r20, r24
     976:	c3 01       	movw	r24, r6
     978:	b2 01       	movw	r22, r4
     97a:	0e 94 c0 09 	call	0x1380	; 0x1380 <__subsf3>
     97e:	9b 01       	movw	r18, r22
     980:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     982:	c5 01       	movw	r24, r10
     984:	b4 01       	movw	r22, r8
     986:	0e 94 c0 09 	call	0x1380	; 0x1380 <__subsf3>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e2       	ldi	r20, 0x20	; 32
     990:	51 e4       	ldi	r21, 0x41	; 65
     992:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__mulsf3>
            b=((int)((int)b/(int)slope));
     996:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixsfsi>
     99a:	5b 01       	movw	r10, r22
     99c:	c7 01       	movw	r24, r14
     99e:	b6 01       	movw	r22, r12
     9a0:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixsfsi>
     9a4:	ab 01       	movw	r20, r22
     9a6:	bc 01       	movw	r22, r24
     9a8:	c5 01       	movw	r24, r10
     9aa:	ba 01       	movw	r22, r20
     9ac:	0e 94 92 09 	call	0x1324	; 0x1324 <__divmodhi4>
            dist_high=b;
     9b0:	76 2e       	mov	r7, r22
     9b2:	e8 c0       	rjmp	.+464    	; 0xb84 <__stack+0x285>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     9b4:	77 24       	eor	r7, r7
     9b6:	7a 94       	dec	r7
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     9b8:	d8 01       	movw	r26, r16
     9ba:	ad 90       	ld	r10, X+
     9bc:	bc 90       	ld	r11, X
     9be:	80 91 40 01 	lds	r24, 0x0140
     9c2:	90 91 41 01 	lds	r25, 0x0141
     9c6:	8a 15       	cp	r24, r10
     9c8:	9b 05       	cpc	r25, r11
     9ca:	08 f4       	brcc	.+2      	; 0x9ce <__stack+0xcf>
     9cc:	6f c0       	rjmp	.+222    	; 0xaac <__stack+0x1ad>
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     9ce:	00 91 42 01 	lds	r16, 0x0142
     9d2:	10 91 43 01 	lds	r17, 0x0143
     9d6:	0a 15       	cp	r16, r10
     9d8:	1b 05       	cpc	r17, r11
     9da:	08 f4       	brcc	.+2      	; 0x9de <__stack+0xdf>
     9dc:	5c c1       	rjmp	.+696    	; 0xc96 <__stack+0x397>
     9de:	00 91 44 01 	lds	r16, 0x0144
     9e2:	10 91 45 01 	lds	r17, 0x0145
     9e6:	0a 15       	cp	r16, r10
     9e8:	1b 05       	cpc	r17, r11
     9ea:	08 f4       	brcc	.+2      	; 0x9ee <__stack+0xef>
     9ec:	5d c1       	rjmp	.+698    	; 0xca8 <__stack+0x3a9>
     9ee:	00 91 46 01 	lds	r16, 0x0146
     9f2:	10 91 47 01 	lds	r17, 0x0147
     9f6:	0a 15       	cp	r16, r10
     9f8:	1b 05       	cpc	r17, r11
     9fa:	08 f4       	brcc	.+2      	; 0x9fe <__stack+0xff>
     9fc:	5e c1       	rjmp	.+700    	; 0xcba <__stack+0x3bb>
     9fe:	00 91 48 01 	lds	r16, 0x0148
     a02:	10 91 49 01 	lds	r17, 0x0149
     a06:	0a 15       	cp	r16, r10
     a08:	1b 05       	cpc	r17, r11
     a0a:	08 f4       	brcc	.+2      	; 0xa0e <__stack+0x10f>
     a0c:	5f c1       	rjmp	.+702    	; 0xccc <__stack+0x3cd>
     a0e:	00 91 4a 01 	lds	r16, 0x014A
     a12:	10 91 4b 01 	lds	r17, 0x014B
     a16:	0a 15       	cp	r16, r10
     a18:	1b 05       	cpc	r17, r11
     a1a:	08 f4       	brcc	.+2      	; 0xa1e <__stack+0x11f>
     a1c:	d8 c0       	rjmp	.+432    	; 0xbce <__stack+0x2cf>
     a1e:	00 91 4c 01 	lds	r16, 0x014C
     a22:	10 91 4d 01 	lds	r17, 0x014D
     a26:	0a 15       	cp	r16, r10
     a28:	1b 05       	cpc	r17, r11
     a2a:	08 f4       	brcc	.+2      	; 0xa2e <__stack+0x12f>
     a2c:	58 c1       	rjmp	.+688    	; 0xcde <__stack+0x3df>
     a2e:	00 91 4e 01 	lds	r16, 0x014E
     a32:	10 91 4f 01 	lds	r17, 0x014F
     a36:	0a 15       	cp	r16, r10
     a38:	1b 05       	cpc	r17, r11
     a3a:	08 f4       	brcc	.+2      	; 0xa3e <__stack+0x13f>
     a3c:	59 c1       	rjmp	.+690    	; 0xcf0 <__stack+0x3f1>
     a3e:	00 91 50 01 	lds	r16, 0x0150
     a42:	10 91 51 01 	lds	r17, 0x0151
     a46:	0a 15       	cp	r16, r10
     a48:	1b 05       	cpc	r17, r11
     a4a:	08 f4       	brcc	.+2      	; 0xa4e <__stack+0x14f>
     a4c:	5a c1       	rjmp	.+692    	; 0xd02 <__stack+0x403>
     a4e:	00 91 52 01 	lds	r16, 0x0152
     a52:	10 91 53 01 	lds	r17, 0x0153
     a56:	0a 15       	cp	r16, r10
     a58:	1b 05       	cpc	r17, r11
     a5a:	08 f4       	brcc	.+2      	; 0xa5e <__stack+0x15f>
     a5c:	5b c1       	rjmp	.+694    	; 0xd14 <__stack+0x415>
     a5e:	00 91 54 01 	lds	r16, 0x0154
     a62:	10 91 55 01 	lds	r17, 0x0155
     a66:	0a 15       	cp	r16, r10
     a68:	1b 05       	cpc	r17, r11
     a6a:	08 f4       	brcc	.+2      	; 0xa6e <__stack+0x16f>
     a6c:	5c c1       	rjmp	.+696    	; 0xd26 <__stack+0x427>
     a6e:	00 91 56 01 	lds	r16, 0x0156
     a72:	10 91 57 01 	lds	r17, 0x0157
     a76:	0a 15       	cp	r16, r10
     a78:	1b 05       	cpc	r17, r11
     a7a:	08 f4       	brcc	.+2      	; 0xa7e <__stack+0x17f>
     a7c:	59 c1       	rjmp	.+690    	; 0xd30 <__stack+0x431>
     a7e:	00 91 58 01 	lds	r16, 0x0158
     a82:	10 91 59 01 	lds	r17, 0x0159
     a86:	0a 15       	cp	r16, r10
     a88:	1b 05       	cpc	r17, r11
     a8a:	08 f4       	brcc	.+2      	; 0xa8e <__stack+0x18f>
     a8c:	5a c1       	rjmp	.+692    	; 0xd42 <__stack+0x443>
     a8e:	00 91 5a 01 	lds	r16, 0x015A
     a92:	10 91 5b 01 	lds	r17, 0x015B
     a96:	0a 15       	cp	r16, r10
     a98:	1b 05       	cpc	r17, r11
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <__stack+0x19f>
     a9c:	5b c1       	rjmp	.+694    	; 0xd54 <__stack+0x455>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     a9e:	1a e5       	ldi	r17, 0x5A	; 90
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     aa0:	bf ef       	ldi	r27, 0xFF	; 255
     aa2:	7b 12       	cpse	r7, r27
     aa4:	07 c0       	rjmp	.+14     	; 0xab4 <__stack+0x1b5>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     aa6:	81 e2       	ldi	r24, 0x21	; 33
     aa8:	81 0f       	add	r24, r17
     aaa:	52 c0       	rjmp	.+164    	; 0xb50 <__stack+0x251>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     aac:	10 e0       	ldi	r17, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     aae:	bf ef       	ldi	r27, 0xFF	; 255
     ab0:	7b 16       	cp	r7, r27
     ab2:	c9 f3       	breq	.-14     	; 0xaa6 <__stack+0x1a7>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     ab4:	ed 81       	ldd	r30, Y+5	; 0x05
     ab6:	fe 81       	ldd	r31, Y+6	; 0x06
     ab8:	bf 01       	movw	r22, r30
     aba:	88 27       	eor	r24, r24
     abc:	77 fd       	sbrc	r23, 7
     abe:	80 95       	com	r24
     ac0:	98 2f       	mov	r25, r24
     ac2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__floatsisf>
     ac6:	6b 01       	movw	r12, r22
     ac8:	7c 01       	movw	r14, r24
     aca:	67 2d       	mov	r22, r7
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatunsisf>
     ad6:	4b 01       	movw	r8, r22
     ad8:	5c 01       	movw	r10, r24
     ada:	a7 01       	movw	r20, r14
     adc:	96 01       	movw	r18, r12
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	81 e6       	ldi	r24, 0x61	; 97
     ae4:	94 e4       	ldi	r25, 0x44	; 68
     ae6:	0e 94 c0 09 	call	0x1380	; 0x1380 <__subsf3>
     aea:	9b 01       	movw	r18, r22
     aec:	ac 01       	movw	r20, r24
     aee:	c5 01       	movw	r24, r10
     af0:	b4 01       	movw	r22, r8
     af2:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__mulsf3>
     af6:	4b 01       	movw	r8, r22
     af8:	5c 01       	movw	r10, r24
     afa:	61 2f       	mov	r22, r17
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatunsisf>
     b06:	2b 01       	movw	r4, r22
     b08:	3c 01       	movw	r6, r24
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	4f e2       	ldi	r20, 0x2F	; 47
     b10:	54 e4       	ldi	r21, 0x44	; 68
     b12:	c7 01       	movw	r24, r14
     b14:	b6 01       	movw	r22, r12
     b16:	0e 94 c0 09 	call	0x1380	; 0x1380 <__subsf3>
     b1a:	9b 01       	movw	r18, r22
     b1c:	ac 01       	movw	r20, r24
     b1e:	c3 01       	movw	r24, r6
     b20:	b2 01       	movw	r22, r4
     b22:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__mulsf3>
     b26:	9b 01       	movw	r18, r22
     b28:	ac 01       	movw	r20, r24
     b2a:	c5 01       	movw	r24, r10
     b2c:	b4 01       	movw	r22, r8
     b2e:	0e 94 c1 09 	call	0x1382	; 0x1382 <__addsf3>
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	48 e4       	ldi	r20, 0x48	; 72
     b38:	53 e4       	ldi	r21, 0x43	; 67
     b3a:	0e 94 25 0a 	call	0x144a	; 0x144a <__divsf3>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	44 e0       	ldi	r20, 0x04	; 4
     b44:	52 e4       	ldi	r21, 0x42	; 66
     b46:	0e 94 c1 09 	call	0x1382	; 0x1382 <__addsf3>
     b4a:	0e 94 92 0a 	call	0x1524	; 0x1524 <__fixunssfsi>
     b4e:	86 2f       	mov	r24, r22
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    }
}
     b50:	26 96       	adiw	r28, 0x06	; 6
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	df 90       	pop	r13
     b6a:	cf 90       	pop	r12
     b6c:	bf 90       	pop	r11
     b6e:	af 90       	pop	r10
     b70:	9f 90       	pop	r9
     b72:	8f 90       	pop	r8
     b74:	7f 90       	pop	r7
     b76:	6f 90       	pop	r6
     b78:	5f 90       	pop	r5
     b7a:	4f 90       	pop	r4
     b7c:	3f 90       	pop	r3
     b7e:	2f 90       	pop	r2
     b80:	08 95       	ret
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     b82:	71 2c       	mov	r7, r1
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     b84:	ed 81       	ldd	r30, Y+5	; 0x05
     b86:	fe 81       	ldd	r31, Y+6	; 0x06
     b88:	ed 3b       	cpi	r30, 0xBD	; 189
     b8a:	f2 40       	sbci	r31, 0x02	; 2
     b8c:	0c f0       	brlt	.+2      	; 0xb90 <__stack+0x291>
     b8e:	14 cf       	rjmp	.-472    	; 0x9b8 <__stack+0xb9>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     b90:	81 e2       	ldi	r24, 0x21	; 33
     b92:	87 0d       	add	r24, r7
     b94:	dd cf       	rjmp	.-70     	; 0xb50 <__stack+0x251>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     b96:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     b98:	85 e0       	ldi	r24, 0x05	; 5
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	7c 01       	movw	r14, r24
     b9e:	f1 e0       	ldi	r31, 0x01	; 1
     ba0:	ef 1a       	sub	r14, r31
     ba2:	f1 08       	sbc	r15, r1
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatunsisf>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	5f e3       	ldi	r21, 0x3F	; 63
     bb6:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__mulsf3>
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	a9 01       	movw	r20, r18
     bc0:	0e 94 c1 09 	call	0x1382	; 0x1382 <__addsf3>
     bc4:	69 83       	std	Y+1, r22	; 0x01
     bc6:	7a 83       	std	Y+2, r23	; 0x02
     bc8:	8b 83       	std	Y+3, r24	; 0x03
     bca:	9c 83       	std	Y+4, r25	; 0x04
     bcc:	a4 ce       	rjmp	.-696    	; 0x916 <__stack+0x17>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     bce:	75 e0       	ldi	r23, 0x05	; 5
     bd0:	67 2e       	mov	r6, r23
                if(dist->low_gain > kilo_irlow[i]) {
     bd2:	e5 e0       	ldi	r30, 0x05	; 5
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     bd6:	ee 0f       	add	r30, r30
     bd8:	ff 1f       	adc	r31, r31
     bda:	e2 5c       	subi	r30, 0xC2	; 194
     bdc:	fe 4f       	sbci	r31, 0xFE	; 254
     bde:	80 81       	ld	r24, Z
     be0:	91 81       	ldd	r25, Z+1	; 0x01
     be2:	b8 01       	movw	r22, r16
     be4:	68 1b       	sub	r22, r24
     be6:	79 0b       	sbc	r23, r25
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatunsisf>
     bf0:	9b 01       	movw	r18, r22
     bf2:	ac 01       	movw	r20, r24
     bf4:	0e 94 c1 09 	call	0x1382	; 0x1382 <__addsf3>
     bf8:	6b 01       	movw	r12, r22
     bfa:	7c 01       	movw	r14, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     bfc:	b5 01       	movw	r22, r10
     bfe:	88 27       	eor	r24, r24
     c00:	77 fd       	sbrc	r23, 7
     c02:	80 95       	com	r24
     c04:	98 2f       	mov	r25, r24
     c06:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__floatsisf>
     c0a:	4b 01       	movw	r8, r22
     c0c:	5c 01       	movw	r10, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     c0e:	b8 01       	movw	r22, r16
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatunsisf>
     c18:	1b 01       	movw	r2, r22
     c1a:	2c 01       	movw	r4, r24
     c1c:	66 2d       	mov	r22, r6
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatunsisf>
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	5f e3       	ldi	r21, 0x3F	; 63
     c30:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__mulsf3>
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	a9 01       	movw	r20, r18
     c3a:	0e 94 c1 09 	call	0x1382	; 0x1382 <__addsf3>
     c3e:	a7 01       	movw	r20, r14
     c40:	96 01       	movw	r18, r12
     c42:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__mulsf3>
     c46:	9b 01       	movw	r18, r22
     c48:	ac 01       	movw	r20, r24
     c4a:	c2 01       	movw	r24, r4
     c4c:	b1 01       	movw	r22, r2
     c4e:	0e 94 c0 09 	call	0x1380	; 0x1380 <__subsf3>
     c52:	9b 01       	movw	r18, r22
     c54:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c56:	c5 01       	movw	r24, r10
     c58:	b4 01       	movw	r22, r8
     c5a:	0e 94 c0 09 	call	0x1380	; 0x1380 <__subsf3>
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e2       	ldi	r20, 0x20	; 32
     c64:	51 e4       	ldi	r21, 0x41	; 65
     c66:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__mulsf3>
                b=((int)((int)b/(int)slope));
     c6a:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixsfsi>
     c6e:	8b 01       	movw	r16, r22
     c70:	c7 01       	movw	r24, r14
     c72:	b6 01       	movw	r22, r12
     c74:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixsfsi>
     c78:	ab 01       	movw	r20, r22
     c7a:	bc 01       	movw	r22, r24
     c7c:	c8 01       	movw	r24, r16
     c7e:	ba 01       	movw	r22, r20
     c80:	0e 94 92 09 	call	0x1324	; 0x1324 <__divmodhi4>
                dist_low=b;
     c84:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
     c86:	6f 3f       	cpi	r22, 0xFF	; 255
     c88:	09 f0       	breq	.+2      	; 0xc8c <__stack+0x38d>
     c8a:	11 cf       	rjmp	.-478    	; 0xaae <__stack+0x1af>
     c8c:	81 cf       	rjmp	.-254    	; 0xb90 <__stack+0x291>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     c8e:	61 e0       	ldi	r22, 0x01	; 1
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	83 cf       	rjmp	.-250    	; 0xb9c <__stack+0x29d>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c96:	66 24       	eor	r6, r6
     c98:	63 94       	inc	r6
     c9a:	e1 e0       	ldi	r30, 0x01	; 1
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	9b cf       	rjmp	.-202    	; 0xbd6 <__stack+0x2d7>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ca0:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	7a cf       	rjmp	.-268    	; 0xb9c <__stack+0x29d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ca8:	a2 e0       	ldi	r26, 0x02	; 2
     caa:	6a 2e       	mov	r6, r26
                if(dist->low_gain > kilo_irlow[i]) {
     cac:	e2 e0       	ldi	r30, 0x02	; 2
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	92 cf       	rjmp	.-220    	; 0xbd6 <__stack+0x2d7>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cb2:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	71 cf       	rjmp	.-286    	; 0xb9c <__stack+0x29d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cba:	f3 e0       	ldi	r31, 0x03	; 3
     cbc:	6f 2e       	mov	r6, r31
                if(dist->low_gain > kilo_irlow[i]) {
     cbe:	e3 e0       	ldi	r30, 0x03	; 3
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	89 cf       	rjmp	.-238    	; 0xbd6 <__stack+0x2d7>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cc4:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     cc6:	84 e0       	ldi	r24, 0x04	; 4
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	68 cf       	rjmp	.-304    	; 0xb9c <__stack+0x29d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ccc:	e4 e0       	ldi	r30, 0x04	; 4
     cce:	6e 2e       	mov	r6, r30
                if(dist->low_gain > kilo_irlow[i]) {
     cd0:	e4 e0       	ldi	r30, 0x04	; 4
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 cf       	rjmp	.-256    	; 0xbd6 <__stack+0x2d7>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cd6:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     cd8:	86 e0       	ldi	r24, 0x06	; 6
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	5f cf       	rjmp	.-322    	; 0xb9c <__stack+0x29d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cde:	66 e0       	ldi	r22, 0x06	; 6
     ce0:	66 2e       	mov	r6, r22
                if(dist->low_gain > kilo_irlow[i]) {
     ce2:	e6 e0       	ldi	r30, 0x06	; 6
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	77 cf       	rjmp	.-274    	; 0xbd6 <__stack+0x2d7>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ce8:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     cea:	87 e0       	ldi	r24, 0x07	; 7
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	56 cf       	rjmp	.-340    	; 0xb9c <__stack+0x29d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cf0:	57 e0       	ldi	r21, 0x07	; 7
     cf2:	65 2e       	mov	r6, r21
                if(dist->low_gain > kilo_irlow[i]) {
     cf4:	e7 e0       	ldi	r30, 0x07	; 7
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	6e cf       	rjmp	.-292    	; 0xbd6 <__stack+0x2d7>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cfa:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     cfc:	88 e0       	ldi	r24, 0x08	; 8
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	4d cf       	rjmp	.-358    	; 0xb9c <__stack+0x29d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d02:	48 e0       	ldi	r20, 0x08	; 8
     d04:	64 2e       	mov	r6, r20
                if(dist->low_gain > kilo_irlow[i]) {
     d06:	e8 e0       	ldi	r30, 0x08	; 8
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	65 cf       	rjmp	.-310    	; 0xbd6 <__stack+0x2d7>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d0c:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     d0e:	89 e0       	ldi	r24, 0x09	; 9
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	44 cf       	rjmp	.-376    	; 0xb9c <__stack+0x29d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d14:	39 e0       	ldi	r19, 0x09	; 9
     d16:	63 2e       	mov	r6, r19
                if(dist->low_gain > kilo_irlow[i]) {
     d18:	e9 e0       	ldi	r30, 0x09	; 9
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	5c cf       	rjmp	.-328    	; 0xbd6 <__stack+0x2d7>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d1e:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     d20:	8a e0       	ldi	r24, 0x0A	; 10
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	3b cf       	rjmp	.-394    	; 0xb9c <__stack+0x29d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d26:	2a e0       	ldi	r18, 0x0A	; 10
     d28:	62 2e       	mov	r6, r18
                if(dist->low_gain > kilo_irlow[i]) {
     d2a:	ea e0       	ldi	r30, 0x0A	; 10
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	53 cf       	rjmp	.-346    	; 0xbd6 <__stack+0x2d7>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d30:	9b e0       	ldi	r25, 0x0B	; 11
     d32:	69 2e       	mov	r6, r25
                if(dist->low_gain > kilo_irlow[i]) {
     d34:	eb e0       	ldi	r30, 0x0B	; 11
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	4e cf       	rjmp	.-356    	; 0xbd6 <__stack+0x2d7>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d3a:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     d3c:	8b e0       	ldi	r24, 0x0B	; 11
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	2d cf       	rjmp	.-422    	; 0xb9c <__stack+0x29d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d42:	8c e0       	ldi	r24, 0x0C	; 12
     d44:	68 2e       	mov	r6, r24
                if(dist->low_gain > kilo_irlow[i]) {
     d46:	ec e0       	ldi	r30, 0x0C	; 12
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	45 cf       	rjmp	.-374    	; 0xbd6 <__stack+0x2d7>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d4c:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     d4e:	8c e0       	ldi	r24, 0x0C	; 12
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	24 cf       	rjmp	.-440    	; 0xb9c <__stack+0x29d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d54:	bd e0       	ldi	r27, 0x0D	; 13
     d56:	6b 2e       	mov	r6, r27
                if(dist->low_gain > kilo_irlow[i]) {
     d58:	ed e0       	ldi	r30, 0x0D	; 13
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	3c cf       	rjmp	.-392    	; 0xbd6 <__stack+0x2d7>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d5e:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     d60:	8d e0       	ldi	r24, 0x0D	; 13
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	1b cf       	rjmp	.-458    	; 0xb9c <__stack+0x29d>

00000d66 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d66:	1f 92       	push	r1
     d68:	0f 92       	push	r0
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	0f 92       	push	r0
     d6e:	11 24       	eor	r1, r1
     d70:	2f 93       	push	r18
     d72:	8f 93       	push	r24
     d74:	9f 93       	push	r25
     d76:	ef 93       	push	r30
     d78:	ff 93       	push	r31
     static int counterio=0;
	static int countersys=0;
	static int counter1sec=0;

	counterio++;
     d7a:	80 91 12 01 	lds	r24, 0x0112
     d7e:	90 91 13 01 	lds	r25, 0x0113
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	90 93 13 01 	sts	0x0113, r25
     d88:	80 93 12 01 	sts	0x0112, r24
    
    if(counterio==1)
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	09 f4       	brne	.+2      	; 0xd92 <__vector_14+0x2c>
     d90:	3f c0       	rjmp	.+126    	; 0xe10 <__vector_14+0xaa>
     d92:	80 91 10 01 	lds	r24, 0x0110
     d96:	90 91 11 01 	lds	r25, 0x0111
        counterio=0;
        //whatever code to run
        
    }
    
    if(countersys==100){
     d9a:	84 36       	cpi	r24, 0x64	; 100
     d9c:	91 05       	cpc	r25, r1
     d9e:	51 f1       	breq	.+84     	; 0xdf4 <__vector_14+0x8e>
     da0:	80 91 0e 01 	lds	r24, 0x010E
     da4:	90 91 0f 01 	lds	r25, 0x010F
        counter1sec++;
        //whatever code to run
        
    }
    
    if(counter1sec==500){
     da8:	84 3f       	cpi	r24, 0xF4	; 244
     daa:	91 40       	sbci	r25, 0x01	; 1
     dac:	51 f0       	breq	.+20     	; 0xdc2 <__vector_14+0x5c>
	counter1sec=0;
		set_motors(155,155);
        delay(500);
   		set_motors(0,0);        
    }
}
     dae:	ff 91       	pop	r31
     db0:	ef 91       	pop	r30
     db2:	9f 91       	pop	r25
     db4:	8f 91       	pop	r24
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti
        //whatever code to run
        
    }
    
    if(counter1sec==500){
	counter1sec=0;
     dc2:	10 92 0f 01 	sts	0x010F, r1
     dc6:	10 92 0e 01 	sts	0x010E, r1
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     dca:	8b e9       	ldi	r24, 0x9B	; 155
     dcc:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     dd0:	80 93 b4 00 	sts	0x00B4, r24
     dd4:	84 ef       	ldi	r24, 0xF4	; 244
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	ef ec       	ldi	r30, 0xCF	; 207
     dda:	f7 e0       	ldi	r31, 0x07	; 7
     ddc:	31 97       	sbiw	r30, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <__vector_14+0x76>
     de0:	00 c0       	rjmp	.+0      	; 0xde2 <__vector_14+0x7c>
     de2:	00 00       	nop
     de4:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	b9 f7       	brne	.-18     	; 0xdd8 <__vector_14+0x72>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     dea:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     dee:	10 92 b4 00 	sts	0x00B4, r1
     df2:	dd cf       	rjmp	.-70     	; 0xdae <__vector_14+0x48>
        //whatever code to run
        
    }
    
    if(countersys==100){
        countersys=0;
     df4:	10 92 11 01 	sts	0x0111, r1
     df8:	10 92 10 01 	sts	0x0110, r1
        counter1sec++;
     dfc:	80 91 0e 01 	lds	r24, 0x010E
     e00:	90 91 0f 01 	lds	r25, 0x010F
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	90 93 0f 01 	sts	0x010F, r25
     e0a:	80 93 0e 01 	sts	0x010E, r24
     e0e:	cc cf       	rjmp	.-104    	; 0xda8 <__vector_14+0x42>

	counterio++;
    
    if(counterio==1)
    {
        countersys++;
     e10:	80 91 10 01 	lds	r24, 0x0110
     e14:	90 91 11 01 	lds	r25, 0x0111
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	90 93 11 01 	sts	0x0111, r25
     e1e:	80 93 10 01 	sts	0x0110, r24
        counterio=0;
     e22:	10 92 13 01 	sts	0x0113, r1
     e26:	10 92 12 01 	sts	0x0112, r1
     e2a:	b7 cf       	rjmp	.-146    	; 0xd9a <__vector_14+0x34>

00000e2c <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e2c:	80 ff       	sbrs	r24, 0
     e2e:	11 c0       	rjmp	.+34     	; 0xe52 <set_color+0x26>
        DDRD |= (1<<5);
     e30:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     e32:	81 ff       	sbrs	r24, 1
     e34:	11 c0       	rjmp	.+34     	; 0xe58 <set_color+0x2c>
        DDRD |= (1<<4);
     e36:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     e38:	82 ff       	sbrs	r24, 2
     e3a:	11 c0       	rjmp	.+34     	; 0xe5e <set_color+0x32>
        DDRC |= (1<<3);
     e3c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     e3e:	83 ff       	sbrs	r24, 3
     e40:	11 c0       	rjmp	.+34     	; 0xe64 <set_color+0x38>
        DDRC |= (1<<2);
     e42:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     e44:	84 ff       	sbrs	r24, 4
     e46:	11 c0       	rjmp	.+34     	; 0xe6a <set_color+0x3e>
        DDRC |= (1<<5);
     e48:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     e4a:	85 fd       	sbrc	r24, 5
     e4c:	11 c0       	rjmp	.+34     	; 0xe70 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e4e:	3c 98       	cbi	0x07, 4	; 7
     e50:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     e52:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e54:	81 fd       	sbrc	r24, 1
     e56:	ef cf       	rjmp	.-34     	; 0xe36 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     e58:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e5a:	82 fd       	sbrc	r24, 2
     e5c:	ef cf       	rjmp	.-34     	; 0xe3c <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     e5e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     e60:	83 fd       	sbrc	r24, 3
     e62:	ef cf       	rjmp	.-34     	; 0xe42 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     e64:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     e66:	84 fd       	sbrc	r24, 4
     e68:	ef cf       	rjmp	.-34     	; 0xe48 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     e6a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     e6c:	85 ff       	sbrs	r24, 5
     e6e:	ef cf       	rjmp	.-34     	; 0xe4e <set_color+0x22>
        DDRC |= (1<<4);
     e70:	3c 9a       	sbi	0x07, 4	; 7
     e72:	08 95       	ret

00000e74 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     e74:	1f 92       	push	r1
     e76:	0f 92       	push	r0
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	0f 92       	push	r0
     e7c:	11 24       	eor	r1, r1
     e7e:	8f 93       	push	r24
     e80:	9f 93       	push	r25
    rx_timer_off();
     e82:	10 92 81 00 	sts	0x0081, r1
     e86:	10 92 85 00 	sts	0x0085, r1
     e8a:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	80 93 18 01 	sts	0x0118, r24
    rx_leadingbyte = 1;
     e94:	80 93 5c 01 	sts	0x015C, r24
    rx_busy = 0;
     e98:	10 92 3f 01 	sts	0x013F, r1
    adc_trigger_high_gain();
     e9c:	10 92 7c 00 	sts	0x007C, r1
     ea0:	93 ea       	ldi	r25, 0xA3	; 163
     ea2:	90 93 7a 00 	sts	0x007A, r25
     ea6:	80 93 7b 00 	sts	0x007B, r24
}
     eaa:	9f 91       	pop	r25
     eac:	8f 91       	pop	r24
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	0f 90       	pop	r0
     eb4:	1f 90       	pop	r1
     eb6:	18 95       	reti

00000eb8 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	2f 93       	push	r18
     ec4:	3f 93       	push	r19
     ec6:	4f 93       	push	r20
     ec8:	5f 93       	push	r21
     eca:	6f 93       	push	r22
     ecc:	7f 93       	push	r23
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
     ed2:	af 93       	push	r26
     ed4:	bf 93       	push	r27
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	ef 93       	push	r30
     edc:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     ede:	20 91 84 00 	lds	r18, 0x0084
     ee2:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     ee6:	41 e0       	ldi	r20, 0x01	; 1
     ee8:	40 93 3f 01 	sts	0x013F, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     eec:	80 91 18 01 	lds	r24, 0x0118
     ef0:	88 23       	and	r24, r24
     ef2:	a9 f1       	breq	.+106    	; 0xf5e <__vector_23+0xa6>
        rx_timer_on();
     ef4:	10 92 85 00 	sts	0x0085, r1
     ef8:	10 92 84 00 	sts	0x0084, r1
     efc:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     f00:	10 92 70 01 	sts	0x0170, r1
        rx_leadingbit = 0;
     f04:	10 92 18 01 	sts	0x0118, r1
        if (rx_leadingbyte) {
     f08:	80 91 5c 01 	lds	r24, 0x015C
     f0c:	88 23       	and	r24, r24
     f0e:	a1 f0       	breq	.+40     	; 0xf38 <__vector_23+0x80>
            adc_finish_conversion();
     f10:	80 91 7a 00 	lds	r24, 0x007A
     f14:	86 fd       	sbrc	r24, 6
     f16:	fc cf       	rjmp	.-8      	; 0xf10 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     f18:	80 91 78 00 	lds	r24, 0x0078
     f1c:	90 91 79 00 	lds	r25, 0x0079
     f20:	90 93 3a 01 	sts	0x013A, r25
     f24:	80 93 39 01 	sts	0x0139, r24
            adc_trigger_low_gain();
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	80 93 7c 00 	sts	0x007C, r24
     f2e:	93 ea       	ldi	r25, 0xA3	; 163
     f30:	90 93 7a 00 	sts	0x007A, r25
     f34:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     f38:	ff 91       	pop	r31
     f3a:	ef 91       	pop	r30
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	bf 91       	pop	r27
     f42:	af 91       	pop	r26
     f44:	9f 91       	pop	r25
     f46:	8f 91       	pop	r24
     f48:	7f 91       	pop	r23
     f4a:	6f 91       	pop	r22
     f4c:	5f 91       	pop	r21
     f4e:	4f 91       	pop	r20
     f50:	3f 91       	pop	r19
     f52:	2f 91       	pop	r18
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	0f 90       	pop	r0
     f5a:	1f 90       	pop	r1
     f5c:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     f5e:	c9 01       	movw	r24, r18
     f60:	87 58       	subi	r24, 0x87	; 135
     f62:	91 09       	sbc	r25, r1
     f64:	84 37       	cpi	r24, 0x74	; 116
     f66:	99 40       	sbci	r25, 0x09	; 9
     f68:	08 f0       	brcs	.+2      	; 0xf6c <__vector_23+0xb4>
     f6a:	4f c0       	rjmp	.+158    	; 0x100a <__vector_23+0x152>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     f6c:	26 58       	subi	r18, 0x86	; 134
     f6e:	31 09       	sbc	r19, r1
     f70:	a4 ef       	ldi	r26, 0xF4	; 244
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	0e 94 83 09 	call	0x1306	; 0x1306 <__umulhisi3>
     f78:	aa 27       	eor	r26, r26
     f7a:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     f7c:	88 30       	cpi	r24, 0x08	; 8
     f7e:	08 f4       	brcc	.+2      	; 0xf82 <__vector_23+0xca>
     f80:	7b c0       	rjmp	.+246    	; 0x1078 <__vector_23+0x1c0>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     f82:	40 93 18 01 	sts	0x0118, r20
                if (rx_leadingbyte) {
     f86:	80 91 5c 01 	lds	r24, 0x015C
     f8a:	81 11       	cpse	r24, r1
     f8c:	52 c0       	rjmp	.+164    	; 0x1032 <__vector_23+0x17a>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     f8e:	80 91 36 01 	lds	r24, 0x0136
     f92:	e8 2f       	mov	r30, r24
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	ee 59       	subi	r30, 0x9E	; 158
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	90 91 70 01 	lds	r25, 0x0170
     f9e:	90 83       	st	Z, r25
                    rx_byteindex++;
     fa0:	8f 5f       	subi	r24, 0xFF	; 255
     fa2:	80 93 36 01 	sts	0x0136, r24
                    if (rx_byteindex == sizeof(message_t)) {
     fa6:	8c 30       	cpi	r24, 0x0C	; 12
     fa8:	39 f6       	brne	.-114    	; 0xf38 <__vector_23+0x80>
                        rx_timer_off();
     faa:	10 92 81 00 	sts	0x0081, r1
     fae:	10 92 85 00 	sts	0x0085, r1
     fb2:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
     fb6:	40 93 5c 01 	sts	0x015C, r20
                        rx_busy = 0;
     fba:	10 92 3f 01 	sts	0x013F, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
     fbe:	c0 91 6c 01 	lds	r28, 0x016C
     fc2:	d0 91 6d 01 	lds	r29, 0x016D
     fc6:	82 e6       	ldi	r24, 0x62	; 98
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	0e 94 5f 09 	call	0x12be	; 0x12be <message_crc>
     fce:	c8 17       	cp	r28, r24
     fd0:	d9 07       	cpc	r29, r25
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <__vector_23+0x11e>
     fd4:	b1 cf       	rjmp	.-158    	; 0xf38 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     fd6:	80 91 6b 01 	lds	r24, 0x016B
     fda:	87 ff       	sbrs	r24, 7
     fdc:	5e c0       	rjmp	.+188    	; 0x109a <__vector_23+0x1e2>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     fde:	98 e7       	ldi	r25, 0x78	; 120
     fe0:	98 0f       	add	r25, r24
     fe2:	93 30       	cpi	r25, 0x03	; 3
     fe4:	30 f0       	brcs	.+12     	; 0xff2 <__vector_23+0x13a>
        motors_off();
     fe6:	53 98       	cbi	0x0a, 3	; 10
     fe8:	23 98       	cbi	0x04, 3	; 4
     fea:	10 92 b4 00 	sts	0x00B4, r1
     fee:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	fc 01       	movw	r30, r24
     ff6:	e0 58       	subi	r30, 0x80	; 128
     ff8:	f1 09       	sbc	r31, r1
     ffa:	eb 30       	cpi	r30, 0x0B	; 11
     ffc:	f1 05       	cpc	r31, r1
     ffe:	08 f0       	brcs	.+2      	; 0x1002 <__vector_23+0x14a>
    1000:	9b cf       	rjmp	.-202    	; 0xf38 <__vector_23+0x80>
    1002:	e5 5c       	subi	r30, 0xC5	; 197
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    100a:	10 92 81 00 	sts	0x0081, r1
    100e:	10 92 85 00 	sts	0x0085, r1
    1012:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1016:	40 93 18 01 	sts	0x0118, r20
            rx_leadingbyte = 1;
    101a:	40 93 5c 01 	sts	0x015C, r20
            rx_busy = 0;
    101e:	10 92 3f 01 	sts	0x013F, r1
            adc_trigger_high_gain();
    1022:	10 92 7c 00 	sts	0x007C, r1
    1026:	83 ea       	ldi	r24, 0xA3	; 163
    1028:	80 93 7a 00 	sts	0x007A, r24
    102c:	40 93 7b 00 	sts	0x007B, r20
    1030:	83 cf       	rjmp	.-250    	; 0xf38 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1032:	80 91 7a 00 	lds	r24, 0x007A
    1036:	86 fd       	sbrc	r24, 6
    1038:	fc cf       	rjmp	.-8      	; 0x1032 <__vector_23+0x17a>
                    rx_dist.low_gain = ADCW;
    103a:	80 91 78 00 	lds	r24, 0x0078
    103e:	90 91 79 00 	lds	r25, 0x0079
    1042:	90 93 38 01 	sts	0x0138, r25
    1046:	80 93 37 01 	sts	0x0137, r24
                    adc_trigger_high_gain();
    104a:	10 92 7c 00 	sts	0x007C, r1
    104e:	83 ea       	ldi	r24, 0xA3	; 163
    1050:	80 93 7a 00 	sts	0x007A, r24
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    105a:	90 91 70 01 	lds	r25, 0x0170
    105e:	99 23       	and	r25, r25
    1060:	b9 f0       	breq	.+46     	; 0x1090 <__vector_23+0x1d8>
                        rx_timer_off();
    1062:	10 92 81 00 	sts	0x0081, r1
    1066:	10 92 85 00 	sts	0x0085, r1
    106a:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    106e:	80 93 5c 01 	sts	0x015C, r24
                        rx_busy = 0;
    1072:	10 92 3f 01 	sts	0x013F, r1
    1076:	60 cf       	rjmp	.-320    	; 0xf38 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1078:	21 e0       	ldi	r18, 0x01	; 1
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <__vector_23+0x1c8>
    107e:	22 0f       	add	r18, r18
    1080:	8a 95       	dec	r24
    1082:	ea f7       	brpl	.-6      	; 0x107e <__vector_23+0x1c6>
    1084:	80 91 70 01 	lds	r24, 0x0170
    1088:	82 2b       	or	r24, r18
    108a:	80 93 70 01 	sts	0x0170, r24
    108e:	54 cf       	rjmp	.-344    	; 0xf38 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1090:	10 92 5c 01 	sts	0x015C, r1
                        rx_byteindex = 0;
    1094:	10 92 36 01 	sts	0x0136, r1
    1098:	4f cf       	rjmp	.-354    	; 0xf38 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    109a:	e0 91 05 01 	lds	r30, 0x0105
    109e:	f0 91 06 01 	lds	r31, 0x0106
    10a2:	67 e3       	ldi	r22, 0x37	; 55
    10a4:	71 e0       	ldi	r23, 0x01	; 1
    10a6:	82 e6       	ldi	r24, 0x62	; 98
    10a8:	91 e0       	ldi	r25, 0x01	; 1
    10aa:	09 95       	icall
    10ac:	45 cf       	rjmp	.-374    	; 0xf38 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    10ae:	80 91 62 01 	lds	r24, 0x0162
    10b2:	82 30       	cpi	r24, 0x02	; 2
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <__vector_23+0x200>
    10b6:	dc c0       	rjmp	.+440    	; 0x1270 <__vector_23+0x3b8>
    10b8:	08 f4       	brcc	.+2      	; 0x10bc <__vector_23+0x204>
    10ba:	b9 c0       	rjmp	.+370    	; 0x122e <__vector_23+0x376>
    10bc:	83 30       	cpi	r24, 0x03	; 3
    10be:	09 f4       	brne	.+2      	; 0x10c2 <__vector_23+0x20a>
    10c0:	c5 c0       	rjmp	.+394    	; 0x124c <__vector_23+0x394>
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <__vector_23+0x210>
    10c6:	b0 c0       	rjmp	.+352    	; 0x1228 <__vector_23+0x370>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    10c8:	80 91 15 01 	lds	r24, 0x0115
    10cc:	90 91 68 01 	lds	r25, 0x0168
    10d0:	83 30       	cpi	r24, 0x03	; 3
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <__vector_23+0x21e>
    10d4:	e2 c0       	rjmp	.+452    	; 0x129a <__vector_23+0x3e2>
    10d6:	80 91 67 01 	lds	r24, 0x0167
                        prev_motion = MOVE_STOP;
    10da:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_STRAIGHT;
    10de:	23 e0       	ldi	r18, 0x03	; 3
    10e0:	20 93 15 01 	sts	0x0115, r18
                        kilo_straight_left = calibmsg->straight_left;
    10e4:	80 93 73 01 	sts	0x0173, r24
                        kilo_straight_right = calibmsg->straight_right;
    10e8:	90 93 74 01 	sts	0x0174, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    10ec:	80 91 17 01 	lds	r24, 0x0117
    10f0:	86 30       	cpi	r24, 0x06	; 6
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <__vector_23+0x23e>
    10f4:	21 cf       	rjmp	.-446    	; 0xf38 <__vector_23+0x80>
                motors_on();
    10f6:	53 9a       	sbi	0x0a, 3	; 10
    10f8:	23 9a       	sbi	0x04, 3	; 4
    10fa:	10 92 b4 00 	sts	0x00B4, r1
    10fe:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1102:	86 e0       	ldi	r24, 0x06	; 6
    1104:	80 93 17 01 	sts	0x0117, r24
    1108:	17 cf       	rjmp	.-466    	; 0xf38 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    110a:	80 91 17 01 	lds	r24, 0x0117
    110e:	86 30       	cpi	r24, 0x06	; 6
    1110:	99 f0       	breq	.+38     	; 0x1138 <__vector_23+0x280>
                motors_on();
    1112:	53 9a       	sbi	0x0a, 3	; 10
    1114:	23 9a       	sbi	0x04, 3	; 4
    1116:	10 92 b4 00 	sts	0x00B4, r1
    111a:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    111e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1120:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1122:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1124:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1126:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1128:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    112a:	10 92 15 01 	sts	0x0115, r1
    112e:	10 92 16 01 	sts	0x0116, r1
                kilo_state = MOVING;
    1132:	86 e0       	ldi	r24, 0x06	; 6
    1134:	80 93 17 01 	sts	0x0117, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	00 90 62 01 	lds	r0, 0x0162
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <__vector_23+0x28e>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <__vector_23+0x28a>
    114a:	20 91 71 01 	lds	r18, 0x0171
    114e:	30 91 72 01 	lds	r19, 0x0172
    1152:	82 23       	and	r24, r18
    1154:	93 23       	and	r25, r19
    1156:	89 2b       	or	r24, r25
    1158:	09 f0       	breq	.+2      	; 0x115c <__vector_23+0x2a4>
    115a:	86 c0       	rjmp	.+268    	; 0x1268 <__vector_23+0x3b0>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    115c:	10 92 15 01 	sts	0x0115, r1
    1160:	eb ce       	rjmp	.-554    	; 0xf38 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	80 93 17 01 	sts	0x0117, r24
    1168:	e7 ce       	rjmp	.-562    	; 0xf38 <__vector_23+0x80>
        case BOOT:
            OS_timers_off();
            bootload();
            break;
        case RESET:
            reset();
    116a:	e0 e0       	ldi	r30, 0x00	; 0
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            OS_timers_off();
    1170:	80 91 6e 00 	lds	r24, 0x006E
    1174:	8d 7f       	andi	r24, 0xFD	; 253
    1176:	80 93 6e 00 	sts	0x006E, r24
    117a:	16 bc       	out	0x26, r1	; 38
            bootload();
    117c:	e0 e0       	ldi	r30, 0x00	; 0
    117e:	f0 e7       	ldi	r31, 0x70	; 112
    1180:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1182:	10 92 17 01 	sts	0x0117, r1
    1186:	d8 ce       	rjmp	.-592    	; 0xf38 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1188:	82 e0       	ldi	r24, 0x02	; 2
    118a:	80 93 17 01 	sts	0x0117, r24
    118e:	d4 ce       	rjmp	.-600    	; 0xf38 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1190:	85 e0       	ldi	r24, 0x05	; 5
    1192:	80 93 17 01 	sts	0x0117, r24
    1196:	d0 ce       	rjmp	.-608    	; 0xf38 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1198:	80 91 17 01 	lds	r24, 0x0117
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	09 f4       	brne	.+2      	; 0x11a2 <__vector_23+0x2ea>
    11a0:	cb ce       	rjmp	.-618    	; 0xf38 <__vector_23+0x80>
    11a2:	80 91 17 01 	lds	r24, 0x0117
    11a6:	84 30       	cpi	r24, 0x04	; 4
    11a8:	09 f4       	brne	.+2      	; 0x11ac <__vector_23+0x2f4>
    11aa:	c6 ce       	rjmp	.-628    	; 0xf38 <__vector_23+0x80>
                motors_on();
    11ac:	53 9a       	sbi	0x0a, 3	; 10
    11ae:	23 9a       	sbi	0x04, 3	; 4
    11b0:	10 92 b4 00 	sts	0x00B4, r1
    11b4:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	80 93 17 01 	sts	0x0117, r24
    11be:	bc ce       	rjmp	.-648    	; 0xf38 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    11c0:	80 91 17 01 	lds	r24, 0x0117
    11c4:	86 30       	cpi	r24, 0x06	; 6
    11c6:	09 f0       	breq	.+2      	; 0x11ca <__vector_23+0x312>
    11c8:	b7 ce       	rjmp	.-658    	; 0xf38 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    11ca:	60 91 71 01 	lds	r22, 0x0171
    11ce:	80 eb       	ldi	r24, 0xB0	; 176
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    11d6:	60 91 72 01 	lds	r22, 0x0172
    11da:	81 eb       	ldi	r24, 0xB1	; 177
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    11e2:	60 91 75 01 	lds	r22, 0x0175
    11e6:	85 e0       	ldi	r24, 0x05	; 5
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    11ee:	60 91 61 01 	lds	r22, 0x0161
    11f2:	89 e0       	ldi	r24, 0x09	; 9
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    11fa:	60 91 73 01 	lds	r22, 0x0173
    11fe:	8c e0       	ldi	r24, 0x0C	; 12
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1206:	60 91 74 01 	lds	r22, 0x0174
    120a:	84 e1       	ldi	r24, 0x14	; 20
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__eewr_byte_m328p>
                        motors_off();
    1212:	53 98       	cbi	0x0a, 3	; 10
    1214:	23 98       	cbi	0x04, 3	; 4
    1216:	10 92 b4 00 	sts	0x00B4, r1
    121a:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	80 93 17 01 	sts	0x0117, r24
    1224:	80 91 62 01 	lds	r24, 0x0162
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1228:	81 11       	cpse	r24, r1
    122a:	60 cf       	rjmp	.-320    	; 0x10ec <__vector_23+0x234>
    122c:	85 ce       	rjmp	.-758    	; 0xf38 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    122e:	88 23       	and	r24, r24
    1230:	39 f2       	breq	.-114    	; 0x11c0 <__vector_23+0x308>
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	c9 f7       	brne	.-14     	; 0x1228 <__vector_23+0x370>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1236:	80 91 63 01 	lds	r24, 0x0163
    123a:	90 91 64 01 	lds	r25, 0x0164
    123e:	90 93 72 01 	sts	0x0172, r25
    1242:	80 93 71 01 	sts	0x0171, r24
                    cur_motion = MOVE_STOP;
    1246:	10 92 15 01 	sts	0x0115, r1
    124a:	50 cf       	rjmp	.-352    	; 0x10ec <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    124c:	80 91 15 01 	lds	r24, 0x0115
    1250:	82 30       	cpi	r24, 0x02	; 2
    1252:	71 f1       	breq	.+92     	; 0x12b0 <__vector_23+0x3f8>
    1254:	80 91 66 01 	lds	r24, 0x0166
                        prev_motion = MOVE_STOP;
    1258:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_RIGHT;
    125c:	92 e0       	ldi	r25, 0x02	; 2
    125e:	90 93 15 01 	sts	0x0115, r25
                        kilo_turn_right = calibmsg->turn_right;
    1262:	80 93 61 01 	sts	0x0161, r24
    1266:	42 cf       	rjmp	.-380    	; 0x10ec <__vector_23+0x234>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	80 93 15 01 	sts	0x0115, r24
    126e:	64 ce       	rjmp	.-824    	; 0xf38 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1270:	80 91 15 01 	lds	r24, 0x0115
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	51 f0       	breq	.+20     	; 0x128c <__vector_23+0x3d4>
    1278:	80 91 65 01 	lds	r24, 0x0165
                        prev_motion = MOVE_STOP;
    127c:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_LEFT;
    1280:	91 e0       	ldi	r25, 0x01	; 1
    1282:	90 93 15 01 	sts	0x0115, r25
                        kilo_turn_left = calibmsg->turn_left;
    1286:	80 93 75 01 	sts	0x0175, r24
    128a:	30 cf       	rjmp	.-416    	; 0x10ec <__vector_23+0x234>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    128c:	80 91 65 01 	lds	r24, 0x0165
    1290:	90 91 75 01 	lds	r25, 0x0175
    1294:	89 13       	cpse	r24, r25
    1296:	f2 cf       	rjmp	.-28     	; 0x127c <__vector_23+0x3c4>
    1298:	29 cf       	rjmp	.-430    	; 0x10ec <__vector_23+0x234>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    129a:	80 91 74 01 	lds	r24, 0x0174
    129e:	98 13       	cpse	r25, r24
    12a0:	1a cf       	rjmp	.-460    	; 0x10d6 <__vector_23+0x21e>
    12a2:	80 91 67 01 	lds	r24, 0x0167
    12a6:	20 91 73 01 	lds	r18, 0x0173
    12aa:	82 13       	cpse	r24, r18
    12ac:	16 cf       	rjmp	.-468    	; 0x10da <__vector_23+0x222>
    12ae:	1e cf       	rjmp	.-452    	; 0x10ec <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    12b0:	80 91 66 01 	lds	r24, 0x0166
    12b4:	90 91 61 01 	lds	r25, 0x0161
    12b8:	89 13       	cpse	r24, r25
    12ba:	ce cf       	rjmp	.-100    	; 0x1258 <__vector_23+0x3a0>
    12bc:	17 cf       	rjmp	.-466    	; 0x10ec <__vector_23+0x234>

000012be <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    12be:	fc 01       	movw	r30, r24
    12c0:	2a e0       	ldi	r18, 0x0A	; 10
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    12c6:	31 91       	ld	r19, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    12c8:	83 27       	eor	r24, r19
    12ca:	08 2e       	mov	r0, r24
    12cc:	82 95       	swap	r24
    12ce:	80 7f       	andi	r24, 0xF0	; 240
    12d0:	80 25       	eor	r24, r0
    12d2:	09 2e       	mov	r0, r25
    12d4:	98 2f       	mov	r25, r24
    12d6:	82 95       	swap	r24
    12d8:	8f 70       	andi	r24, 0x0F	; 15
    12da:	08 26       	eor	r0, r24
    12dc:	86 95       	lsr	r24
    12de:	98 27       	eor	r25, r24
    12e0:	89 27       	eor	r24, r25
    12e2:	88 0f       	add	r24, r24
    12e4:	88 0f       	add	r24, r24
    12e6:	88 0f       	add	r24, r24
    12e8:	80 25       	eor	r24, r0
    12ea:	21 50       	subi	r18, 0x01	; 1

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    12ec:	61 f7       	brne	.-40     	; 0x12c6 <message_crc+0x8>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    12ee:	08 95       	ret

000012f0 <main>:
	loopfun();
}

int main() {
    // initialize hardware
    kilo_init();
    12f0:	0e 94 a8 00 	call	0x150	; 0x150 <kilo_init>
    // start program
    kilo_start(setup, loop);
    12f4:	6f e6       	ldi	r22, 0x6F	; 111
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	8e e6       	ldi	r24, 0x6E	; 110
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 a1 01 	call	0x342	; 0x342 <kilo_start>

    return 0;
}
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	08 95       	ret

00001306 <__umulhisi3>:
    1306:	a2 9f       	mul	r26, r18
    1308:	b0 01       	movw	r22, r0
    130a:	b3 9f       	mul	r27, r19
    130c:	c0 01       	movw	r24, r0
    130e:	a3 9f       	mul	r26, r19
    1310:	70 0d       	add	r23, r0
    1312:	81 1d       	adc	r24, r1
    1314:	11 24       	eor	r1, r1
    1316:	91 1d       	adc	r25, r1
    1318:	b2 9f       	mul	r27, r18
    131a:	70 0d       	add	r23, r0
    131c:	81 1d       	adc	r24, r1
    131e:	11 24       	eor	r1, r1
    1320:	91 1d       	adc	r25, r1
    1322:	08 95       	ret

00001324 <__divmodhi4>:
    1324:	97 fb       	bst	r25, 7
    1326:	07 2e       	mov	r0, r23
    1328:	16 f4       	brtc	.+4      	; 0x132e <__divmodhi4+0xa>
    132a:	00 94       	com	r0
    132c:	07 d0       	rcall	.+14     	; 0x133c <__divmodhi4_neg1>
    132e:	77 fd       	sbrc	r23, 7
    1330:	09 d0       	rcall	.+18     	; 0x1344 <__divmodhi4_neg2>
    1332:	0e 94 ac 09 	call	0x1358	; 0x1358 <__udivmodhi4>
    1336:	07 fc       	sbrc	r0, 7
    1338:	05 d0       	rcall	.+10     	; 0x1344 <__divmodhi4_neg2>
    133a:	3e f4       	brtc	.+14     	; 0x134a <__divmodhi4_exit>

0000133c <__divmodhi4_neg1>:
    133c:	90 95       	com	r25
    133e:	81 95       	neg	r24
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	08 95       	ret

00001344 <__divmodhi4_neg2>:
    1344:	70 95       	com	r23
    1346:	61 95       	neg	r22
    1348:	7f 4f       	sbci	r23, 0xFF	; 255

0000134a <__divmodhi4_exit>:
    134a:	08 95       	ret

0000134c <__tablejump2__>:
    134c:	ee 0f       	add	r30, r30
    134e:	ff 1f       	adc	r31, r31

00001350 <__tablejump__>:
    1350:	05 90       	lpm	r0, Z+
    1352:	f4 91       	lpm	r31, Z
    1354:	e0 2d       	mov	r30, r0
    1356:	09 94       	ijmp

00001358 <__udivmodhi4>:
    1358:	aa 1b       	sub	r26, r26
    135a:	bb 1b       	sub	r27, r27
    135c:	51 e1       	ldi	r21, 0x11	; 17
    135e:	07 c0       	rjmp	.+14     	; 0x136e <__udivmodhi4_ep>

00001360 <__udivmodhi4_loop>:
    1360:	aa 1f       	adc	r26, r26
    1362:	bb 1f       	adc	r27, r27
    1364:	a6 17       	cp	r26, r22
    1366:	b7 07       	cpc	r27, r23
    1368:	10 f0       	brcs	.+4      	; 0x136e <__udivmodhi4_ep>
    136a:	a6 1b       	sub	r26, r22
    136c:	b7 0b       	sbc	r27, r23

0000136e <__udivmodhi4_ep>:
    136e:	88 1f       	adc	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	5a 95       	dec	r21
    1374:	a9 f7       	brne	.-22     	; 0x1360 <__udivmodhi4_loop>
    1376:	80 95       	com	r24
    1378:	90 95       	com	r25
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	08 95       	ret

00001380 <__subsf3>:
    1380:	50 58       	subi	r21, 0x80	; 128

00001382 <__addsf3>:
    1382:	bb 27       	eor	r27, r27
    1384:	aa 27       	eor	r26, r26
    1386:	0e d0       	rcall	.+28     	; 0x13a4 <__addsf3x>
    1388:	4d c1       	rjmp	.+666    	; 0x1624 <__fp_round>
    138a:	3e d1       	rcall	.+636    	; 0x1608 <__fp_pscA>
    138c:	30 f0       	brcs	.+12     	; 0x139a <__addsf3+0x18>
    138e:	43 d1       	rcall	.+646    	; 0x1616 <__fp_pscB>
    1390:	20 f0       	brcs	.+8      	; 0x139a <__addsf3+0x18>
    1392:	31 f4       	brne	.+12     	; 0x13a0 <__addsf3+0x1e>
    1394:	9f 3f       	cpi	r25, 0xFF	; 255
    1396:	11 f4       	brne	.+4      	; 0x139c <__addsf3+0x1a>
    1398:	1e f4       	brtc	.+6      	; 0x13a0 <__addsf3+0x1e>
    139a:	33 c1       	rjmp	.+614    	; 0x1602 <__fp_nan>
    139c:	0e f4       	brtc	.+2      	; 0x13a0 <__addsf3+0x1e>
    139e:	e0 95       	com	r30
    13a0:	e7 fb       	bst	r30, 7
    13a2:	29 c1       	rjmp	.+594    	; 0x15f6 <__fp_inf>

000013a4 <__addsf3x>:
    13a4:	e9 2f       	mov	r30, r25
    13a6:	4f d1       	rcall	.+670    	; 0x1646 <__fp_split3>
    13a8:	80 f3       	brcs	.-32     	; 0x138a <__addsf3+0x8>
    13aa:	ba 17       	cp	r27, r26
    13ac:	62 07       	cpc	r22, r18
    13ae:	73 07       	cpc	r23, r19
    13b0:	84 07       	cpc	r24, r20
    13b2:	95 07       	cpc	r25, r21
    13b4:	18 f0       	brcs	.+6      	; 0x13bc <__addsf3x+0x18>
    13b6:	71 f4       	brne	.+28     	; 0x13d4 <__addsf3x+0x30>
    13b8:	9e f5       	brtc	.+102    	; 0x1420 <__addsf3x+0x7c>
    13ba:	67 c1       	rjmp	.+718    	; 0x168a <__fp_zero>
    13bc:	0e f4       	brtc	.+2      	; 0x13c0 <__addsf3x+0x1c>
    13be:	e0 95       	com	r30
    13c0:	0b 2e       	mov	r0, r27
    13c2:	ba 2f       	mov	r27, r26
    13c4:	a0 2d       	mov	r26, r0
    13c6:	0b 01       	movw	r0, r22
    13c8:	b9 01       	movw	r22, r18
    13ca:	90 01       	movw	r18, r0
    13cc:	0c 01       	movw	r0, r24
    13ce:	ca 01       	movw	r24, r20
    13d0:	a0 01       	movw	r20, r0
    13d2:	11 24       	eor	r1, r1
    13d4:	ff 27       	eor	r31, r31
    13d6:	59 1b       	sub	r21, r25
    13d8:	99 f0       	breq	.+38     	; 0x1400 <__addsf3x+0x5c>
    13da:	59 3f       	cpi	r21, 0xF9	; 249
    13dc:	50 f4       	brcc	.+20     	; 0x13f2 <__addsf3x+0x4e>
    13de:	50 3e       	cpi	r21, 0xE0	; 224
    13e0:	68 f1       	brcs	.+90     	; 0x143c <__addsf3x+0x98>
    13e2:	1a 16       	cp	r1, r26
    13e4:	f0 40       	sbci	r31, 0x00	; 0
    13e6:	a2 2f       	mov	r26, r18
    13e8:	23 2f       	mov	r18, r19
    13ea:	34 2f       	mov	r19, r20
    13ec:	44 27       	eor	r20, r20
    13ee:	58 5f       	subi	r21, 0xF8	; 248
    13f0:	f3 cf       	rjmp	.-26     	; 0x13d8 <__addsf3x+0x34>
    13f2:	46 95       	lsr	r20
    13f4:	37 95       	ror	r19
    13f6:	27 95       	ror	r18
    13f8:	a7 95       	ror	r26
    13fa:	f0 40       	sbci	r31, 0x00	; 0
    13fc:	53 95       	inc	r21
    13fe:	c9 f7       	brne	.-14     	; 0x13f2 <__addsf3x+0x4e>
    1400:	7e f4       	brtc	.+30     	; 0x1420 <__addsf3x+0x7c>
    1402:	1f 16       	cp	r1, r31
    1404:	ba 0b       	sbc	r27, r26
    1406:	62 0b       	sbc	r22, r18
    1408:	73 0b       	sbc	r23, r19
    140a:	84 0b       	sbc	r24, r20
    140c:	ba f0       	brmi	.+46     	; 0x143c <__addsf3x+0x98>
    140e:	91 50       	subi	r25, 0x01	; 1
    1410:	a1 f0       	breq	.+40     	; 0x143a <__addsf3x+0x96>
    1412:	ff 0f       	add	r31, r31
    1414:	bb 1f       	adc	r27, r27
    1416:	66 1f       	adc	r22, r22
    1418:	77 1f       	adc	r23, r23
    141a:	88 1f       	adc	r24, r24
    141c:	c2 f7       	brpl	.-16     	; 0x140e <__addsf3x+0x6a>
    141e:	0e c0       	rjmp	.+28     	; 0x143c <__addsf3x+0x98>
    1420:	ba 0f       	add	r27, r26
    1422:	62 1f       	adc	r22, r18
    1424:	73 1f       	adc	r23, r19
    1426:	84 1f       	adc	r24, r20
    1428:	48 f4       	brcc	.+18     	; 0x143c <__addsf3x+0x98>
    142a:	87 95       	ror	r24
    142c:	77 95       	ror	r23
    142e:	67 95       	ror	r22
    1430:	b7 95       	ror	r27
    1432:	f7 95       	ror	r31
    1434:	9e 3f       	cpi	r25, 0xFE	; 254
    1436:	08 f0       	brcs	.+2      	; 0x143a <__addsf3x+0x96>
    1438:	b3 cf       	rjmp	.-154    	; 0x13a0 <__addsf3+0x1e>
    143a:	93 95       	inc	r25
    143c:	88 0f       	add	r24, r24
    143e:	08 f0       	brcs	.+2      	; 0x1442 <__addsf3x+0x9e>
    1440:	99 27       	eor	r25, r25
    1442:	ee 0f       	add	r30, r30
    1444:	97 95       	ror	r25
    1446:	87 95       	ror	r24
    1448:	08 95       	ret

0000144a <__divsf3>:
    144a:	0c d0       	rcall	.+24     	; 0x1464 <__divsf3x>
    144c:	eb c0       	rjmp	.+470    	; 0x1624 <__fp_round>
    144e:	e3 d0       	rcall	.+454    	; 0x1616 <__fp_pscB>
    1450:	40 f0       	brcs	.+16     	; 0x1462 <__divsf3+0x18>
    1452:	da d0       	rcall	.+436    	; 0x1608 <__fp_pscA>
    1454:	30 f0       	brcs	.+12     	; 0x1462 <__divsf3+0x18>
    1456:	21 f4       	brne	.+8      	; 0x1460 <__divsf3+0x16>
    1458:	5f 3f       	cpi	r21, 0xFF	; 255
    145a:	19 f0       	breq	.+6      	; 0x1462 <__divsf3+0x18>
    145c:	cc c0       	rjmp	.+408    	; 0x15f6 <__fp_inf>
    145e:	51 11       	cpse	r21, r1
    1460:	15 c1       	rjmp	.+554    	; 0x168c <__fp_szero>
    1462:	cf c0       	rjmp	.+414    	; 0x1602 <__fp_nan>

00001464 <__divsf3x>:
    1464:	f0 d0       	rcall	.+480    	; 0x1646 <__fp_split3>
    1466:	98 f3       	brcs	.-26     	; 0x144e <__divsf3+0x4>

00001468 <__divsf3_pse>:
    1468:	99 23       	and	r25, r25
    146a:	c9 f3       	breq	.-14     	; 0x145e <__divsf3+0x14>
    146c:	55 23       	and	r21, r21
    146e:	b1 f3       	breq	.-20     	; 0x145c <__divsf3+0x12>
    1470:	95 1b       	sub	r25, r21
    1472:	55 0b       	sbc	r21, r21
    1474:	bb 27       	eor	r27, r27
    1476:	aa 27       	eor	r26, r26
    1478:	62 17       	cp	r22, r18
    147a:	73 07       	cpc	r23, r19
    147c:	84 07       	cpc	r24, r20
    147e:	38 f0       	brcs	.+14     	; 0x148e <__divsf3_pse+0x26>
    1480:	9f 5f       	subi	r25, 0xFF	; 255
    1482:	5f 4f       	sbci	r21, 0xFF	; 255
    1484:	22 0f       	add	r18, r18
    1486:	33 1f       	adc	r19, r19
    1488:	44 1f       	adc	r20, r20
    148a:	aa 1f       	adc	r26, r26
    148c:	a9 f3       	breq	.-22     	; 0x1478 <__divsf3_pse+0x10>
    148e:	33 d0       	rcall	.+102    	; 0x14f6 <__divsf3_pse+0x8e>
    1490:	0e 2e       	mov	r0, r30
    1492:	3a f0       	brmi	.+14     	; 0x14a2 <__divsf3_pse+0x3a>
    1494:	e0 e8       	ldi	r30, 0x80	; 128
    1496:	30 d0       	rcall	.+96     	; 0x14f8 <__divsf3_pse+0x90>
    1498:	91 50       	subi	r25, 0x01	; 1
    149a:	50 40       	sbci	r21, 0x00	; 0
    149c:	e6 95       	lsr	r30
    149e:	00 1c       	adc	r0, r0
    14a0:	ca f7       	brpl	.-14     	; 0x1494 <__divsf3_pse+0x2c>
    14a2:	29 d0       	rcall	.+82     	; 0x14f6 <__divsf3_pse+0x8e>
    14a4:	fe 2f       	mov	r31, r30
    14a6:	27 d0       	rcall	.+78     	; 0x14f6 <__divsf3_pse+0x8e>
    14a8:	66 0f       	add	r22, r22
    14aa:	77 1f       	adc	r23, r23
    14ac:	88 1f       	adc	r24, r24
    14ae:	bb 1f       	adc	r27, r27
    14b0:	26 17       	cp	r18, r22
    14b2:	37 07       	cpc	r19, r23
    14b4:	48 07       	cpc	r20, r24
    14b6:	ab 07       	cpc	r26, r27
    14b8:	b0 e8       	ldi	r27, 0x80	; 128
    14ba:	09 f0       	breq	.+2      	; 0x14be <__divsf3_pse+0x56>
    14bc:	bb 0b       	sbc	r27, r27
    14be:	80 2d       	mov	r24, r0
    14c0:	bf 01       	movw	r22, r30
    14c2:	ff 27       	eor	r31, r31
    14c4:	93 58       	subi	r25, 0x83	; 131
    14c6:	5f 4f       	sbci	r21, 0xFF	; 255
    14c8:	2a f0       	brmi	.+10     	; 0x14d4 <__divsf3_pse+0x6c>
    14ca:	9e 3f       	cpi	r25, 0xFE	; 254
    14cc:	51 05       	cpc	r21, r1
    14ce:	68 f0       	brcs	.+26     	; 0x14ea <__divsf3_pse+0x82>
    14d0:	92 c0       	rjmp	.+292    	; 0x15f6 <__fp_inf>
    14d2:	dc c0       	rjmp	.+440    	; 0x168c <__fp_szero>
    14d4:	5f 3f       	cpi	r21, 0xFF	; 255
    14d6:	ec f3       	brlt	.-6      	; 0x14d2 <__divsf3_pse+0x6a>
    14d8:	98 3e       	cpi	r25, 0xE8	; 232
    14da:	dc f3       	brlt	.-10     	; 0x14d2 <__divsf3_pse+0x6a>
    14dc:	86 95       	lsr	r24
    14de:	77 95       	ror	r23
    14e0:	67 95       	ror	r22
    14e2:	b7 95       	ror	r27
    14e4:	f7 95       	ror	r31
    14e6:	9f 5f       	subi	r25, 0xFF	; 255
    14e8:	c9 f7       	brne	.-14     	; 0x14dc <__divsf3_pse+0x74>
    14ea:	88 0f       	add	r24, r24
    14ec:	91 1d       	adc	r25, r1
    14ee:	96 95       	lsr	r25
    14f0:	87 95       	ror	r24
    14f2:	97 f9       	bld	r25, 7
    14f4:	08 95       	ret
    14f6:	e1 e0       	ldi	r30, 0x01	; 1
    14f8:	66 0f       	add	r22, r22
    14fa:	77 1f       	adc	r23, r23
    14fc:	88 1f       	adc	r24, r24
    14fe:	bb 1f       	adc	r27, r27
    1500:	62 17       	cp	r22, r18
    1502:	73 07       	cpc	r23, r19
    1504:	84 07       	cpc	r24, r20
    1506:	ba 07       	cpc	r27, r26
    1508:	20 f0       	brcs	.+8      	; 0x1512 <__divsf3_pse+0xaa>
    150a:	62 1b       	sub	r22, r18
    150c:	73 0b       	sbc	r23, r19
    150e:	84 0b       	sbc	r24, r20
    1510:	ba 0b       	sbc	r27, r26
    1512:	ee 1f       	adc	r30, r30
    1514:	88 f7       	brcc	.-30     	; 0x14f8 <__divsf3_pse+0x90>
    1516:	e0 95       	com	r30
    1518:	08 95       	ret

0000151a <__fixsfsi>:
    151a:	04 d0       	rcall	.+8      	; 0x1524 <__fixunssfsi>
    151c:	68 94       	set
    151e:	b1 11       	cpse	r27, r1
    1520:	b5 c0       	rjmp	.+362    	; 0x168c <__fp_szero>
    1522:	08 95       	ret

00001524 <__fixunssfsi>:
    1524:	98 d0       	rcall	.+304    	; 0x1656 <__fp_splitA>
    1526:	88 f0       	brcs	.+34     	; 0x154a <__fixunssfsi+0x26>
    1528:	9f 57       	subi	r25, 0x7F	; 127
    152a:	90 f0       	brcs	.+36     	; 0x1550 <__fixunssfsi+0x2c>
    152c:	b9 2f       	mov	r27, r25
    152e:	99 27       	eor	r25, r25
    1530:	b7 51       	subi	r27, 0x17	; 23
    1532:	a0 f0       	brcs	.+40     	; 0x155c <__fixunssfsi+0x38>
    1534:	d1 f0       	breq	.+52     	; 0x156a <__fixunssfsi+0x46>
    1536:	66 0f       	add	r22, r22
    1538:	77 1f       	adc	r23, r23
    153a:	88 1f       	adc	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	1a f0       	brmi	.+6      	; 0x1546 <__fixunssfsi+0x22>
    1540:	ba 95       	dec	r27
    1542:	c9 f7       	brne	.-14     	; 0x1536 <__fixunssfsi+0x12>
    1544:	12 c0       	rjmp	.+36     	; 0x156a <__fixunssfsi+0x46>
    1546:	b1 30       	cpi	r27, 0x01	; 1
    1548:	81 f0       	breq	.+32     	; 0x156a <__fixunssfsi+0x46>
    154a:	9f d0       	rcall	.+318    	; 0x168a <__fp_zero>
    154c:	b1 e0       	ldi	r27, 0x01	; 1
    154e:	08 95       	ret
    1550:	9c c0       	rjmp	.+312    	; 0x168a <__fp_zero>
    1552:	67 2f       	mov	r22, r23
    1554:	78 2f       	mov	r23, r24
    1556:	88 27       	eor	r24, r24
    1558:	b8 5f       	subi	r27, 0xF8	; 248
    155a:	39 f0       	breq	.+14     	; 0x156a <__fixunssfsi+0x46>
    155c:	b9 3f       	cpi	r27, 0xF9	; 249
    155e:	cc f3       	brlt	.-14     	; 0x1552 <__fixunssfsi+0x2e>
    1560:	86 95       	lsr	r24
    1562:	77 95       	ror	r23
    1564:	67 95       	ror	r22
    1566:	b3 95       	inc	r27
    1568:	d9 f7       	brne	.-10     	; 0x1560 <__fixunssfsi+0x3c>
    156a:	3e f4       	brtc	.+14     	; 0x157a <__fixunssfsi+0x56>
    156c:	90 95       	com	r25
    156e:	80 95       	com	r24
    1570:	70 95       	com	r23
    1572:	61 95       	neg	r22
    1574:	7f 4f       	sbci	r23, 0xFF	; 255
    1576:	8f 4f       	sbci	r24, 0xFF	; 255
    1578:	9f 4f       	sbci	r25, 0xFF	; 255
    157a:	08 95       	ret

0000157c <__floatunsisf>:
    157c:	e8 94       	clt
    157e:	09 c0       	rjmp	.+18     	; 0x1592 <__floatsisf+0x12>

00001580 <__floatsisf>:
    1580:	97 fb       	bst	r25, 7
    1582:	3e f4       	brtc	.+14     	; 0x1592 <__floatsisf+0x12>
    1584:	90 95       	com	r25
    1586:	80 95       	com	r24
    1588:	70 95       	com	r23
    158a:	61 95       	neg	r22
    158c:	7f 4f       	sbci	r23, 0xFF	; 255
    158e:	8f 4f       	sbci	r24, 0xFF	; 255
    1590:	9f 4f       	sbci	r25, 0xFF	; 255
    1592:	99 23       	and	r25, r25
    1594:	a9 f0       	breq	.+42     	; 0x15c0 <__floatsisf+0x40>
    1596:	f9 2f       	mov	r31, r25
    1598:	96 e9       	ldi	r25, 0x96	; 150
    159a:	bb 27       	eor	r27, r27
    159c:	93 95       	inc	r25
    159e:	f6 95       	lsr	r31
    15a0:	87 95       	ror	r24
    15a2:	77 95       	ror	r23
    15a4:	67 95       	ror	r22
    15a6:	b7 95       	ror	r27
    15a8:	f1 11       	cpse	r31, r1
    15aa:	f8 cf       	rjmp	.-16     	; 0x159c <__floatsisf+0x1c>
    15ac:	fa f4       	brpl	.+62     	; 0x15ec <__floatsisf+0x6c>
    15ae:	bb 0f       	add	r27, r27
    15b0:	11 f4       	brne	.+4      	; 0x15b6 <__floatsisf+0x36>
    15b2:	60 ff       	sbrs	r22, 0
    15b4:	1b c0       	rjmp	.+54     	; 0x15ec <__floatsisf+0x6c>
    15b6:	6f 5f       	subi	r22, 0xFF	; 255
    15b8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ba:	8f 4f       	sbci	r24, 0xFF	; 255
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	16 c0       	rjmp	.+44     	; 0x15ec <__floatsisf+0x6c>
    15c0:	88 23       	and	r24, r24
    15c2:	11 f0       	breq	.+4      	; 0x15c8 <__floatsisf+0x48>
    15c4:	96 e9       	ldi	r25, 0x96	; 150
    15c6:	11 c0       	rjmp	.+34     	; 0x15ea <__floatsisf+0x6a>
    15c8:	77 23       	and	r23, r23
    15ca:	21 f0       	breq	.+8      	; 0x15d4 <__floatsisf+0x54>
    15cc:	9e e8       	ldi	r25, 0x8E	; 142
    15ce:	87 2f       	mov	r24, r23
    15d0:	76 2f       	mov	r23, r22
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <__floatsisf+0x5e>
    15d4:	66 23       	and	r22, r22
    15d6:	71 f0       	breq	.+28     	; 0x15f4 <__floatsisf+0x74>
    15d8:	96 e8       	ldi	r25, 0x86	; 134
    15da:	86 2f       	mov	r24, r22
    15dc:	70 e0       	ldi	r23, 0x00	; 0
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	2a f0       	brmi	.+10     	; 0x15ec <__floatsisf+0x6c>
    15e2:	9a 95       	dec	r25
    15e4:	66 0f       	add	r22, r22
    15e6:	77 1f       	adc	r23, r23
    15e8:	88 1f       	adc	r24, r24
    15ea:	da f7       	brpl	.-10     	; 0x15e2 <__floatsisf+0x62>
    15ec:	88 0f       	add	r24, r24
    15ee:	96 95       	lsr	r25
    15f0:	87 95       	ror	r24
    15f2:	97 f9       	bld	r25, 7
    15f4:	08 95       	ret

000015f6 <__fp_inf>:
    15f6:	97 f9       	bld	r25, 7
    15f8:	9f 67       	ori	r25, 0x7F	; 127
    15fa:	80 e8       	ldi	r24, 0x80	; 128
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	08 95       	ret

00001602 <__fp_nan>:
    1602:	9f ef       	ldi	r25, 0xFF	; 255
    1604:	80 ec       	ldi	r24, 0xC0	; 192
    1606:	08 95       	ret

00001608 <__fp_pscA>:
    1608:	00 24       	eor	r0, r0
    160a:	0a 94       	dec	r0
    160c:	16 16       	cp	r1, r22
    160e:	17 06       	cpc	r1, r23
    1610:	18 06       	cpc	r1, r24
    1612:	09 06       	cpc	r0, r25
    1614:	08 95       	ret

00001616 <__fp_pscB>:
    1616:	00 24       	eor	r0, r0
    1618:	0a 94       	dec	r0
    161a:	12 16       	cp	r1, r18
    161c:	13 06       	cpc	r1, r19
    161e:	14 06       	cpc	r1, r20
    1620:	05 06       	cpc	r0, r21
    1622:	08 95       	ret

00001624 <__fp_round>:
    1624:	09 2e       	mov	r0, r25
    1626:	03 94       	inc	r0
    1628:	00 0c       	add	r0, r0
    162a:	11 f4       	brne	.+4      	; 0x1630 <__fp_round+0xc>
    162c:	88 23       	and	r24, r24
    162e:	52 f0       	brmi	.+20     	; 0x1644 <__fp_round+0x20>
    1630:	bb 0f       	add	r27, r27
    1632:	40 f4       	brcc	.+16     	; 0x1644 <__fp_round+0x20>
    1634:	bf 2b       	or	r27, r31
    1636:	11 f4       	brne	.+4      	; 0x163c <__fp_round+0x18>
    1638:	60 ff       	sbrs	r22, 0
    163a:	04 c0       	rjmp	.+8      	; 0x1644 <__fp_round+0x20>
    163c:	6f 5f       	subi	r22, 0xFF	; 255
    163e:	7f 4f       	sbci	r23, 0xFF	; 255
    1640:	8f 4f       	sbci	r24, 0xFF	; 255
    1642:	9f 4f       	sbci	r25, 0xFF	; 255
    1644:	08 95       	ret

00001646 <__fp_split3>:
    1646:	57 fd       	sbrc	r21, 7
    1648:	90 58       	subi	r25, 0x80	; 128
    164a:	44 0f       	add	r20, r20
    164c:	55 1f       	adc	r21, r21
    164e:	59 f0       	breq	.+22     	; 0x1666 <__fp_splitA+0x10>
    1650:	5f 3f       	cpi	r21, 0xFF	; 255
    1652:	71 f0       	breq	.+28     	; 0x1670 <__fp_splitA+0x1a>
    1654:	47 95       	ror	r20

00001656 <__fp_splitA>:
    1656:	88 0f       	add	r24, r24
    1658:	97 fb       	bst	r25, 7
    165a:	99 1f       	adc	r25, r25
    165c:	61 f0       	breq	.+24     	; 0x1676 <__fp_splitA+0x20>
    165e:	9f 3f       	cpi	r25, 0xFF	; 255
    1660:	79 f0       	breq	.+30     	; 0x1680 <__fp_splitA+0x2a>
    1662:	87 95       	ror	r24
    1664:	08 95       	ret
    1666:	12 16       	cp	r1, r18
    1668:	13 06       	cpc	r1, r19
    166a:	14 06       	cpc	r1, r20
    166c:	55 1f       	adc	r21, r21
    166e:	f2 cf       	rjmp	.-28     	; 0x1654 <__fp_split3+0xe>
    1670:	46 95       	lsr	r20
    1672:	f1 df       	rcall	.-30     	; 0x1656 <__fp_splitA>
    1674:	08 c0       	rjmp	.+16     	; 0x1686 <__fp_splitA+0x30>
    1676:	16 16       	cp	r1, r22
    1678:	17 06       	cpc	r1, r23
    167a:	18 06       	cpc	r1, r24
    167c:	99 1f       	adc	r25, r25
    167e:	f1 cf       	rjmp	.-30     	; 0x1662 <__fp_splitA+0xc>
    1680:	86 95       	lsr	r24
    1682:	71 05       	cpc	r23, r1
    1684:	61 05       	cpc	r22, r1
    1686:	08 94       	sec
    1688:	08 95       	ret

0000168a <__fp_zero>:
    168a:	e8 94       	clt

0000168c <__fp_szero>:
    168c:	bb 27       	eor	r27, r27
    168e:	66 27       	eor	r22, r22
    1690:	77 27       	eor	r23, r23
    1692:	cb 01       	movw	r24, r22
    1694:	97 f9       	bld	r25, 7
    1696:	08 95       	ret

00001698 <__mulsf3>:
    1698:	0b d0       	rcall	.+22     	; 0x16b0 <__mulsf3x>
    169a:	c4 cf       	rjmp	.-120    	; 0x1624 <__fp_round>
    169c:	b5 df       	rcall	.-150    	; 0x1608 <__fp_pscA>
    169e:	28 f0       	brcs	.+10     	; 0x16aa <__mulsf3+0x12>
    16a0:	ba df       	rcall	.-140    	; 0x1616 <__fp_pscB>
    16a2:	18 f0       	brcs	.+6      	; 0x16aa <__mulsf3+0x12>
    16a4:	95 23       	and	r25, r21
    16a6:	09 f0       	breq	.+2      	; 0x16aa <__mulsf3+0x12>
    16a8:	a6 cf       	rjmp	.-180    	; 0x15f6 <__fp_inf>
    16aa:	ab cf       	rjmp	.-170    	; 0x1602 <__fp_nan>
    16ac:	11 24       	eor	r1, r1
    16ae:	ee cf       	rjmp	.-36     	; 0x168c <__fp_szero>

000016b0 <__mulsf3x>:
    16b0:	ca df       	rcall	.-108    	; 0x1646 <__fp_split3>
    16b2:	a0 f3       	brcs	.-24     	; 0x169c <__mulsf3+0x4>

000016b4 <__mulsf3_pse>:
    16b4:	95 9f       	mul	r25, r21
    16b6:	d1 f3       	breq	.-12     	; 0x16ac <__mulsf3+0x14>
    16b8:	95 0f       	add	r25, r21
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	55 1f       	adc	r21, r21
    16be:	62 9f       	mul	r22, r18
    16c0:	f0 01       	movw	r30, r0
    16c2:	72 9f       	mul	r23, r18
    16c4:	bb 27       	eor	r27, r27
    16c6:	f0 0d       	add	r31, r0
    16c8:	b1 1d       	adc	r27, r1
    16ca:	63 9f       	mul	r22, r19
    16cc:	aa 27       	eor	r26, r26
    16ce:	f0 0d       	add	r31, r0
    16d0:	b1 1d       	adc	r27, r1
    16d2:	aa 1f       	adc	r26, r26
    16d4:	64 9f       	mul	r22, r20
    16d6:	66 27       	eor	r22, r22
    16d8:	b0 0d       	add	r27, r0
    16da:	a1 1d       	adc	r26, r1
    16dc:	66 1f       	adc	r22, r22
    16de:	82 9f       	mul	r24, r18
    16e0:	22 27       	eor	r18, r18
    16e2:	b0 0d       	add	r27, r0
    16e4:	a1 1d       	adc	r26, r1
    16e6:	62 1f       	adc	r22, r18
    16e8:	73 9f       	mul	r23, r19
    16ea:	b0 0d       	add	r27, r0
    16ec:	a1 1d       	adc	r26, r1
    16ee:	62 1f       	adc	r22, r18
    16f0:	83 9f       	mul	r24, r19
    16f2:	a0 0d       	add	r26, r0
    16f4:	61 1d       	adc	r22, r1
    16f6:	22 1f       	adc	r18, r18
    16f8:	74 9f       	mul	r23, r20
    16fa:	33 27       	eor	r19, r19
    16fc:	a0 0d       	add	r26, r0
    16fe:	61 1d       	adc	r22, r1
    1700:	23 1f       	adc	r18, r19
    1702:	84 9f       	mul	r24, r20
    1704:	60 0d       	add	r22, r0
    1706:	21 1d       	adc	r18, r1
    1708:	82 2f       	mov	r24, r18
    170a:	76 2f       	mov	r23, r22
    170c:	6a 2f       	mov	r22, r26
    170e:	11 24       	eor	r1, r1
    1710:	9f 57       	subi	r25, 0x7F	; 127
    1712:	50 40       	sbci	r21, 0x00	; 0
    1714:	8a f0       	brmi	.+34     	; 0x1738 <__mulsf3_pse+0x84>
    1716:	e1 f0       	breq	.+56     	; 0x1750 <__mulsf3_pse+0x9c>
    1718:	88 23       	and	r24, r24
    171a:	4a f0       	brmi	.+18     	; 0x172e <__mulsf3_pse+0x7a>
    171c:	ee 0f       	add	r30, r30
    171e:	ff 1f       	adc	r31, r31
    1720:	bb 1f       	adc	r27, r27
    1722:	66 1f       	adc	r22, r22
    1724:	77 1f       	adc	r23, r23
    1726:	88 1f       	adc	r24, r24
    1728:	91 50       	subi	r25, 0x01	; 1
    172a:	50 40       	sbci	r21, 0x00	; 0
    172c:	a9 f7       	brne	.-22     	; 0x1718 <__mulsf3_pse+0x64>
    172e:	9e 3f       	cpi	r25, 0xFE	; 254
    1730:	51 05       	cpc	r21, r1
    1732:	70 f0       	brcs	.+28     	; 0x1750 <__mulsf3_pse+0x9c>
    1734:	60 cf       	rjmp	.-320    	; 0x15f6 <__fp_inf>
    1736:	aa cf       	rjmp	.-172    	; 0x168c <__fp_szero>
    1738:	5f 3f       	cpi	r21, 0xFF	; 255
    173a:	ec f3       	brlt	.-6      	; 0x1736 <__mulsf3_pse+0x82>
    173c:	98 3e       	cpi	r25, 0xE8	; 232
    173e:	dc f3       	brlt	.-10     	; 0x1736 <__mulsf3_pse+0x82>
    1740:	86 95       	lsr	r24
    1742:	77 95       	ror	r23
    1744:	67 95       	ror	r22
    1746:	b7 95       	ror	r27
    1748:	f7 95       	ror	r31
    174a:	e7 95       	ror	r30
    174c:	9f 5f       	subi	r25, 0xFF	; 255
    174e:	c1 f7       	brne	.-16     	; 0x1740 <__mulsf3_pse+0x8c>
    1750:	fe 2b       	or	r31, r30
    1752:	88 0f       	add	r24, r24
    1754:	91 1d       	adc	r25, r1
    1756:	96 95       	lsr	r25
    1758:	87 95       	ror	r24
    175a:	97 f9       	bld	r25, 7
    175c:	08 95       	ret

0000175e <malloc>:
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	82 30       	cpi	r24, 0x02	; 2
    1764:	91 05       	cpc	r25, r1
    1766:	10 f4       	brcc	.+4      	; 0x176c <malloc+0xe>
    1768:	82 e0       	ldi	r24, 0x02	; 2
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	e0 91 78 01 	lds	r30, 0x0178
    1770:	f0 91 79 01 	lds	r31, 0x0179
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	a0 e0       	ldi	r26, 0x00	; 0
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	30 97       	sbiw	r30, 0x00	; 0
    177e:	39 f1       	breq	.+78     	; 0x17ce <malloc+0x70>
    1780:	40 81       	ld	r20, Z
    1782:	51 81       	ldd	r21, Z+1	; 0x01
    1784:	48 17       	cp	r20, r24
    1786:	59 07       	cpc	r21, r25
    1788:	b8 f0       	brcs	.+46     	; 0x17b8 <malloc+0x5a>
    178a:	48 17       	cp	r20, r24
    178c:	59 07       	cpc	r21, r25
    178e:	71 f4       	brne	.+28     	; 0x17ac <malloc+0x4e>
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	93 81       	ldd	r25, Z+3	; 0x03
    1794:	10 97       	sbiw	r26, 0x00	; 0
    1796:	29 f0       	breq	.+10     	; 0x17a2 <malloc+0x44>
    1798:	13 96       	adiw	r26, 0x03	; 3
    179a:	9c 93       	st	X, r25
    179c:	8e 93       	st	-X, r24
    179e:	12 97       	sbiw	r26, 0x02	; 2
    17a0:	2c c0       	rjmp	.+88     	; 0x17fa <malloc+0x9c>
    17a2:	90 93 79 01 	sts	0x0179, r25
    17a6:	80 93 78 01 	sts	0x0178, r24
    17aa:	27 c0       	rjmp	.+78     	; 0x17fa <malloc+0x9c>
    17ac:	21 15       	cp	r18, r1
    17ae:	31 05       	cpc	r19, r1
    17b0:	31 f0       	breq	.+12     	; 0x17be <malloc+0x60>
    17b2:	42 17       	cp	r20, r18
    17b4:	53 07       	cpc	r21, r19
    17b6:	18 f0       	brcs	.+6      	; 0x17be <malloc+0x60>
    17b8:	a9 01       	movw	r20, r18
    17ba:	db 01       	movw	r26, r22
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <malloc+0x62>
    17be:	ef 01       	movw	r28, r30
    17c0:	9a 01       	movw	r18, r20
    17c2:	bd 01       	movw	r22, r26
    17c4:	df 01       	movw	r26, r30
    17c6:	02 80       	ldd	r0, Z+2	; 0x02
    17c8:	f3 81       	ldd	r31, Z+3	; 0x03
    17ca:	e0 2d       	mov	r30, r0
    17cc:	d7 cf       	rjmp	.-82     	; 0x177c <malloc+0x1e>
    17ce:	21 15       	cp	r18, r1
    17d0:	31 05       	cpc	r19, r1
    17d2:	f9 f0       	breq	.+62     	; 0x1812 <malloc+0xb4>
    17d4:	28 1b       	sub	r18, r24
    17d6:	39 0b       	sbc	r19, r25
    17d8:	24 30       	cpi	r18, 0x04	; 4
    17da:	31 05       	cpc	r19, r1
    17dc:	80 f4       	brcc	.+32     	; 0x17fe <malloc+0xa0>
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	9b 81       	ldd	r25, Y+3	; 0x03
    17e2:	61 15       	cp	r22, r1
    17e4:	71 05       	cpc	r23, r1
    17e6:	21 f0       	breq	.+8      	; 0x17f0 <malloc+0x92>
    17e8:	fb 01       	movw	r30, r22
    17ea:	93 83       	std	Z+3, r25	; 0x03
    17ec:	82 83       	std	Z+2, r24	; 0x02
    17ee:	04 c0       	rjmp	.+8      	; 0x17f8 <malloc+0x9a>
    17f0:	90 93 79 01 	sts	0x0179, r25
    17f4:	80 93 78 01 	sts	0x0178, r24
    17f8:	fe 01       	movw	r30, r28
    17fa:	32 96       	adiw	r30, 0x02	; 2
    17fc:	44 c0       	rjmp	.+136    	; 0x1886 <malloc+0x128>
    17fe:	fe 01       	movw	r30, r28
    1800:	e2 0f       	add	r30, r18
    1802:	f3 1f       	adc	r31, r19
    1804:	81 93       	st	Z+, r24
    1806:	91 93       	st	Z+, r25
    1808:	22 50       	subi	r18, 0x02	; 2
    180a:	31 09       	sbc	r19, r1
    180c:	39 83       	std	Y+1, r19	; 0x01
    180e:	28 83       	st	Y, r18
    1810:	3a c0       	rjmp	.+116    	; 0x1886 <malloc+0x128>
    1812:	20 91 76 01 	lds	r18, 0x0176
    1816:	30 91 77 01 	lds	r19, 0x0177
    181a:	23 2b       	or	r18, r19
    181c:	41 f4       	brne	.+16     	; 0x182e <malloc+0xd0>
    181e:	20 91 09 01 	lds	r18, 0x0109
    1822:	30 91 0a 01 	lds	r19, 0x010A
    1826:	30 93 77 01 	sts	0x0177, r19
    182a:	20 93 76 01 	sts	0x0176, r18
    182e:	20 91 07 01 	lds	r18, 0x0107
    1832:	30 91 08 01 	lds	r19, 0x0108
    1836:	21 15       	cp	r18, r1
    1838:	31 05       	cpc	r19, r1
    183a:	41 f4       	brne	.+16     	; 0x184c <malloc+0xee>
    183c:	2d b7       	in	r18, 0x3d	; 61
    183e:	3e b7       	in	r19, 0x3e	; 62
    1840:	40 91 0b 01 	lds	r20, 0x010B
    1844:	50 91 0c 01 	lds	r21, 0x010C
    1848:	24 1b       	sub	r18, r20
    184a:	35 0b       	sbc	r19, r21
    184c:	e0 91 76 01 	lds	r30, 0x0176
    1850:	f0 91 77 01 	lds	r31, 0x0177
    1854:	e2 17       	cp	r30, r18
    1856:	f3 07       	cpc	r31, r19
    1858:	a0 f4       	brcc	.+40     	; 0x1882 <malloc+0x124>
    185a:	2e 1b       	sub	r18, r30
    185c:	3f 0b       	sbc	r19, r31
    185e:	28 17       	cp	r18, r24
    1860:	39 07       	cpc	r19, r25
    1862:	78 f0       	brcs	.+30     	; 0x1882 <malloc+0x124>
    1864:	ac 01       	movw	r20, r24
    1866:	4e 5f       	subi	r20, 0xFE	; 254
    1868:	5f 4f       	sbci	r21, 0xFF	; 255
    186a:	24 17       	cp	r18, r20
    186c:	35 07       	cpc	r19, r21
    186e:	48 f0       	brcs	.+18     	; 0x1882 <malloc+0x124>
    1870:	4e 0f       	add	r20, r30
    1872:	5f 1f       	adc	r21, r31
    1874:	50 93 77 01 	sts	0x0177, r21
    1878:	40 93 76 01 	sts	0x0176, r20
    187c:	81 93       	st	Z+, r24
    187e:	91 93       	st	Z+, r25
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <malloc+0x128>
    1882:	e0 e0       	ldi	r30, 0x00	; 0
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	cf 01       	movw	r24, r30
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	08 95       	ret

0000188e <free>:
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	09 f4       	brne	.+2      	; 0x1898 <free+0xa>
    1896:	87 c0       	rjmp	.+270    	; 0x19a6 <free+0x118>
    1898:	fc 01       	movw	r30, r24
    189a:	32 97       	sbiw	r30, 0x02	; 2
    189c:	13 82       	std	Z+3, r1	; 0x03
    189e:	12 82       	std	Z+2, r1	; 0x02
    18a0:	c0 91 78 01 	lds	r28, 0x0178
    18a4:	d0 91 79 01 	lds	r29, 0x0179
    18a8:	20 97       	sbiw	r28, 0x00	; 0
    18aa:	81 f4       	brne	.+32     	; 0x18cc <free+0x3e>
    18ac:	20 81       	ld	r18, Z
    18ae:	31 81       	ldd	r19, Z+1	; 0x01
    18b0:	28 0f       	add	r18, r24
    18b2:	39 1f       	adc	r19, r25
    18b4:	80 91 76 01 	lds	r24, 0x0176
    18b8:	90 91 77 01 	lds	r25, 0x0177
    18bc:	82 17       	cp	r24, r18
    18be:	93 07       	cpc	r25, r19
    18c0:	79 f5       	brne	.+94     	; 0x1920 <free+0x92>
    18c2:	f0 93 77 01 	sts	0x0177, r31
    18c6:	e0 93 76 01 	sts	0x0176, r30
    18ca:	6d c0       	rjmp	.+218    	; 0x19a6 <free+0x118>
    18cc:	de 01       	movw	r26, r28
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	ae 17       	cp	r26, r30
    18d4:	bf 07       	cpc	r27, r31
    18d6:	50 f4       	brcc	.+20     	; 0x18ec <free+0x5e>
    18d8:	12 96       	adiw	r26, 0x02	; 2
    18da:	4d 91       	ld	r20, X+
    18dc:	5c 91       	ld	r21, X
    18de:	13 97       	sbiw	r26, 0x03	; 3
    18e0:	9d 01       	movw	r18, r26
    18e2:	41 15       	cp	r20, r1
    18e4:	51 05       	cpc	r21, r1
    18e6:	09 f1       	breq	.+66     	; 0x192a <free+0x9c>
    18e8:	da 01       	movw	r26, r20
    18ea:	f3 cf       	rjmp	.-26     	; 0x18d2 <free+0x44>
    18ec:	b3 83       	std	Z+3, r27	; 0x03
    18ee:	a2 83       	std	Z+2, r26	; 0x02
    18f0:	40 81       	ld	r20, Z
    18f2:	51 81       	ldd	r21, Z+1	; 0x01
    18f4:	84 0f       	add	r24, r20
    18f6:	95 1f       	adc	r25, r21
    18f8:	8a 17       	cp	r24, r26
    18fa:	9b 07       	cpc	r25, r27
    18fc:	71 f4       	brne	.+28     	; 0x191a <free+0x8c>
    18fe:	8d 91       	ld	r24, X+
    1900:	9c 91       	ld	r25, X
    1902:	11 97       	sbiw	r26, 0x01	; 1
    1904:	84 0f       	add	r24, r20
    1906:	95 1f       	adc	r25, r21
    1908:	02 96       	adiw	r24, 0x02	; 2
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	80 83       	st	Z, r24
    190e:	12 96       	adiw	r26, 0x02	; 2
    1910:	8d 91       	ld	r24, X+
    1912:	9c 91       	ld	r25, X
    1914:	13 97       	sbiw	r26, 0x03	; 3
    1916:	93 83       	std	Z+3, r25	; 0x03
    1918:	82 83       	std	Z+2, r24	; 0x02
    191a:	21 15       	cp	r18, r1
    191c:	31 05       	cpc	r19, r1
    191e:	29 f4       	brne	.+10     	; 0x192a <free+0x9c>
    1920:	f0 93 79 01 	sts	0x0179, r31
    1924:	e0 93 78 01 	sts	0x0178, r30
    1928:	3e c0       	rjmp	.+124    	; 0x19a6 <free+0x118>
    192a:	d9 01       	movw	r26, r18
    192c:	13 96       	adiw	r26, 0x03	; 3
    192e:	fc 93       	st	X, r31
    1930:	ee 93       	st	-X, r30
    1932:	12 97       	sbiw	r26, 0x02	; 2
    1934:	4d 91       	ld	r20, X+
    1936:	5d 91       	ld	r21, X+
    1938:	a4 0f       	add	r26, r20
    193a:	b5 1f       	adc	r27, r21
    193c:	ea 17       	cp	r30, r26
    193e:	fb 07       	cpc	r31, r27
    1940:	79 f4       	brne	.+30     	; 0x1960 <free+0xd2>
    1942:	80 81       	ld	r24, Z
    1944:	91 81       	ldd	r25, Z+1	; 0x01
    1946:	84 0f       	add	r24, r20
    1948:	95 1f       	adc	r25, r21
    194a:	02 96       	adiw	r24, 0x02	; 2
    194c:	d9 01       	movw	r26, r18
    194e:	11 96       	adiw	r26, 0x01	; 1
    1950:	9c 93       	st	X, r25
    1952:	8e 93       	st	-X, r24
    1954:	82 81       	ldd	r24, Z+2	; 0x02
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	13 96       	adiw	r26, 0x03	; 3
    195a:	9c 93       	st	X, r25
    195c:	8e 93       	st	-X, r24
    195e:	12 97       	sbiw	r26, 0x02	; 2
    1960:	e0 e0       	ldi	r30, 0x00	; 0
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	9b 81       	ldd	r25, Y+3	; 0x03
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	19 f0       	breq	.+6      	; 0x1972 <free+0xe4>
    196c:	fe 01       	movw	r30, r28
    196e:	ec 01       	movw	r28, r24
    1970:	f9 cf       	rjmp	.-14     	; 0x1964 <free+0xd6>
    1972:	ce 01       	movw	r24, r28
    1974:	02 96       	adiw	r24, 0x02	; 2
    1976:	28 81       	ld	r18, Y
    1978:	39 81       	ldd	r19, Y+1	; 0x01
    197a:	82 0f       	add	r24, r18
    197c:	93 1f       	adc	r25, r19
    197e:	20 91 76 01 	lds	r18, 0x0176
    1982:	30 91 77 01 	lds	r19, 0x0177
    1986:	28 17       	cp	r18, r24
    1988:	39 07       	cpc	r19, r25
    198a:	69 f4       	brne	.+26     	; 0x19a6 <free+0x118>
    198c:	30 97       	sbiw	r30, 0x00	; 0
    198e:	29 f4       	brne	.+10     	; 0x199a <free+0x10c>
    1990:	10 92 79 01 	sts	0x0179, r1
    1994:	10 92 78 01 	sts	0x0178, r1
    1998:	02 c0       	rjmp	.+4      	; 0x199e <free+0x110>
    199a:	13 82       	std	Z+3, r1	; 0x03
    199c:	12 82       	std	Z+2, r1	; 0x02
    199e:	d0 93 77 01 	sts	0x0177, r29
    19a2:	c0 93 76 01 	sts	0x0176, r28
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	08 95       	ret

000019ac <__eerd_byte_m328p>:
    19ac:	f9 99       	sbic	0x1f, 1	; 31
    19ae:	fe cf       	rjmp	.-4      	; 0x19ac <__eerd_byte_m328p>
    19b0:	92 bd       	out	0x22, r25	; 34
    19b2:	81 bd       	out	0x21, r24	; 33
    19b4:	f8 9a       	sbi	0x1f, 0	; 31
    19b6:	99 27       	eor	r25, r25
    19b8:	80 b5       	in	r24, 0x20	; 32
    19ba:	08 95       	ret

000019bc <__eewr_byte_m328p>:
    19bc:	26 2f       	mov	r18, r22

000019be <__eewr_r18_m328p>:
    19be:	f9 99       	sbic	0x1f, 1	; 31
    19c0:	fe cf       	rjmp	.-4      	; 0x19be <__eewr_r18_m328p>
    19c2:	1f ba       	out	0x1f, r1	; 31
    19c4:	92 bd       	out	0x22, r25	; 34
    19c6:	81 bd       	out	0x21, r24	; 33
    19c8:	20 bd       	out	0x20, r18	; 32
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	fa 9a       	sbi	0x1f, 2	; 31
    19d0:	f9 9a       	sbi	0x1f, 1	; 31
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	01 96       	adiw	r24, 0x01	; 1
    19d6:	08 95       	ret

000019d8 <_exit>:
    19d8:	f8 94       	cli

000019da <__stop_program>:
    19da:	ff cf       	rjmp	.-2      	; 0x19da <__stop_program>
